

Microchip Technology PIC LITE Macro Assembler V1.35 build -356382666 
                                                                                               Sun Jun 12 08:17:57 2016

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     5                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	intentry,global,class=CODE,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	text29,local,class=CODE,merge=1,delta=2
    44                           	psect	text30,local,class=CODE,merge=1,delta=2
    45                           	psect	text31,local,class=CODE,merge=1,delta=2
    46                           	psect	text32,local,class=CODE,merge=1,delta=2
    47                           	psect	text33,local,class=CODE,merge=1,delta=2
    48                           	psect	text34,local,class=CODE,merge=1,delta=2
    49                           	psect	text35,local,class=CODE,merge=1,delta=2
    50                           	psect	text36,local,class=CODE,merge=1,delta=2
    51                           	psect	text37,local,class=CODE,merge=1,delta=2
    52                           	psect	text38,local,class=CODE,merge=1,delta=2
    53                           	psect	text39,local,class=CODE,merge=1,delta=2
    54                           	psect	text40,local,class=CODE,merge=1,delta=2
    55                           	psect	text41,local,class=CODE,merge=1,delta=2
    56                           	psect	text42,local,class=CODE,merge=1,delta=2
    57                           	psect	text43,local,class=CODE,merge=1,delta=2
    58                           	psect	text44,local,class=CODE,merge=1,delta=2
    59                           	psect	text45,local,class=CODE,merge=1,delta=2
    60                           	psect	text46,local,class=CODE,merge=1,delta=2
    61                           	psect	text47,local,class=CODE,merge=1,delta=2
    62                           	psect	text48,local,class=CODE,merge=1,delta=2
    63                           	psect	text49,local,class=CODE,merge=1,delta=2
    64                           	psect	text50,local,class=CODE,merge=1,delta=2
    65                           	dabs	1,0x7E,2
    66  0000                     	;# 
    67  0001                     	;# 
    68  0002                     	;# 
    69  0003                     	;# 
    70  0004                     	;# 
    71  0005                     	;# 
    72  0006                     	;# 
    73  0007                     	;# 
    74  0008                     	;# 
    75  0009                     	;# 
    76  000A                     	;# 
    77  000B                     	;# 
    78  000C                     	;# 
    79  000D                     	;# 
    80  000E                     	;# 
    81  000E                     	;# 
    82  000F                     	;# 
    83  0010                     	;# 
    84  0011                     	;# 
    85  0012                     	;# 
    86  0013                     	;# 
    87  0014                     	;# 
    88  0015                     	;# 
    89  0015                     	;# 
    90  0016                     	;# 
    91  0017                     	;# 
    92  0018                     	;# 
    93  0019                     	;# 
    94  001A                     	;# 
    95  001B                     	;# 
    96  001B                     	;# 
    97  001C                     	;# 
    98  001D                     	;# 
    99  001E                     	;# 
   100  001F                     	;# 
   101  0081                     	;# 
   102  0085                     	;# 
   103  0086                     	;# 
   104  0087                     	;# 
   105  0088                     	;# 
   106  0089                     	;# 
   107  008C                     	;# 
   108  008D                     	;# 
   109  008E                     	;# 
   110  008F                     	;# 
   111  0090                     	;# 
   112  0091                     	;# 
   113  0092                     	;# 
   114  0093                     	;# 
   115  0093                     	;# 
   116  0093                     	;# 
   117  0094                     	;# 
   118  0095                     	;# 
   119  0096                     	;# 
   120  0097                     	;# 
   121  0098                     	;# 
   122  0099                     	;# 
   123  009A                     	;# 
   124  009B                     	;# 
   125  009C                     	;# 
   126  009D                     	;# 
   127  009E                     	;# 
   128  009F                     	;# 
   129  0105                     	;# 
   130  0107                     	;# 
   131  0108                     	;# 
   132  0109                     	;# 
   133  010C                     	;# 
   134  010C                     	;# 
   135  010D                     	;# 
   136  010E                     	;# 
   137  010F                     	;# 
   138  0185                     	;# 
   139  0187                     	;# 
   140  0188                     	;# 
   141  0189                     	;# 
   142  018C                     	;# 
   143  018D                     	;# 
   144  0000                     	;# 
   145  0001                     	;# 
   146  0002                     	;# 
   147  0003                     	;# 
   148  0004                     	;# 
   149  0005                     	;# 
   150  0006                     	;# 
   151  0007                     	;# 
   152  0008                     	;# 
   153  0009                     	;# 
   154  000A                     	;# 
   155  000B                     	;# 
   156  000C                     	;# 
   157  000D                     	;# 
   158  000E                     	;# 
   159  000E                     	;# 
   160  000F                     	;# 
   161  0010                     	;# 
   162  0011                     	;# 
   163  0012                     	;# 
   164  0013                     	;# 
   165  0014                     	;# 
   166  0015                     	;# 
   167  0015                     	;# 
   168  0016                     	;# 
   169  0017                     	;# 
   170  0018                     	;# 
   171  0019                     	;# 
   172  001A                     	;# 
   173  001B                     	;# 
   174  001B                     	;# 
   175  001C                     	;# 
   176  001D                     	;# 
   177  001E                     	;# 
   178  001F                     	;# 
   179  0081                     	;# 
   180  0085                     	;# 
   181  0086                     	;# 
   182  0087                     	;# 
   183  0088                     	;# 
   184  0089                     	;# 
   185  008C                     	;# 
   186  008D                     	;# 
   187  008E                     	;# 
   188  008F                     	;# 
   189  0090                     	;# 
   190  0091                     	;# 
   191  0092                     	;# 
   192  0093                     	;# 
   193  0093                     	;# 
   194  0093                     	;# 
   195  0094                     	;# 
   196  0095                     	;# 
   197  0096                     	;# 
   198  0097                     	;# 
   199  0098                     	;# 
   200  0099                     	;# 
   201  009A                     	;# 
   202  009B                     	;# 
   203  009C                     	;# 
   204  009D                     	;# 
   205  009E                     	;# 
   206  009F                     	;# 
   207  0105                     	;# 
   208  0107                     	;# 
   209  0108                     	;# 
   210  0109                     	;# 
   211  010C                     	;# 
   212  010C                     	;# 
   213  010D                     	;# 
   214  010E                     	;# 
   215  010F                     	;# 
   216  0185                     	;# 
   217  0187                     	;# 
   218  0188                     	;# 
   219  0189                     	;# 
   220  018C                     	;# 
   221  018D                     	;# 
   222  0000                     	;# 
   223  0001                     	;# 
   224  0002                     	;# 
   225  0003                     	;# 
   226  0004                     	;# 
   227  0005                     	;# 
   228  0006                     	;# 
   229  0007                     	;# 
   230  0008                     	;# 
   231  0009                     	;# 
   232  000A                     	;# 
   233  000B                     	;# 
   234  000C                     	;# 
   235  000D                     	;# 
   236  000E                     	;# 
   237  000E                     	;# 
   238  000F                     	;# 
   239  0010                     	;# 
   240  0011                     	;# 
   241  0012                     	;# 
   242  0013                     	;# 
   243  0014                     	;# 
   244  0015                     	;# 
   245  0015                     	;# 
   246  0016                     	;# 
   247  0017                     	;# 
   248  0018                     	;# 
   249  0019                     	;# 
   250  001A                     	;# 
   251  001B                     	;# 
   252  001B                     	;# 
   253  001C                     	;# 
   254  001D                     	;# 
   255  001E                     	;# 
   256  001F                     	;# 
   257  0081                     	;# 
   258  0085                     	;# 
   259  0086                     	;# 
   260  0087                     	;# 
   261  0088                     	;# 
   262  0089                     	;# 
   263  008C                     	;# 
   264  008D                     	;# 
   265  008E                     	;# 
   266  008F                     	;# 
   267  0090                     	;# 
   268  0091                     	;# 
   269  0092                     	;# 
   270  0093                     	;# 
   271  0093                     	;# 
   272  0093                     	;# 
   273  0094                     	;# 
   274  0095                     	;# 
   275  0096                     	;# 
   276  0097                     	;# 
   277  0098                     	;# 
   278  0099                     	;# 
   279  009A                     	;# 
   280  009B                     	;# 
   281  009C                     	;# 
   282  009D                     	;# 
   283  009E                     	;# 
   284  009F                     	;# 
   285  0105                     	;# 
   286  0107                     	;# 
   287  0108                     	;# 
   288  0109                     	;# 
   289  010C                     	;# 
   290  010C                     	;# 
   291  010D                     	;# 
   292  010E                     	;# 
   293  010F                     	;# 
   294  0185                     	;# 
   295  0187                     	;# 
   296  0188                     	;# 
   297  0189                     	;# 
   298  018C                     	;# 
   299  018D                     	;# 
   300                           
   301                           	psect	nvBANK0
   302  0051                     __pnvBANK0:	
   303  0051                     _ADCvalue:	
   304  0051                     	ds	3
   305  0054                     _voltage:	
   306  0054                     	ds	3
   307                           
   308                           	psect	nvBANK1
   309  00BE                     __pnvBANK1:	
   310  00BE                     _day_alarm:	
   311  00BE                     	ds	1
   312  00BF                     _minute_alarm:	
   313  00BF                     	ds	1
   314  001F                     _ADCON0	set	31
   315  001F                     _ADCON0bits	set	31
   316  001E                     _ADRESH	set	30
   317  000B                     _INTCONbits	set	11
   318  0008                     _PORTD	set	8
   319  0013                     _SSPBUF	set	19
   320  0014                     _SSPCON	set	20
   321  0001                     _TMR0	set	1
   322  0031                     _RB1	set	49
   323  0032                     _RB2	set	50
   324  0033                     _RB3	set	51
   325  0034                     _RB4	set	52
   326  0035                     _RB5	set	53
   327  0058                     _RBIF	set	88
   328  0040                     _RD0	set	64
   329  0042                     _RD2	set	66
   330  0043                     _RD3	set	67
   331  0044                     _RD4	set	68
   332  0045                     _RD5	set	69
   333  0046                     _RD6	set	70
   334  0047                     _RD7	set	71
   335  0063                     _SSPIF	set	99
   336  009F                     _ADCON1	set	159
   337  009E                     _ADRESL	set	158
   338  0096                     _IOCBbits	set	150
   339  0081                     _OPTION_REGbits	set	129
   340  0093                     _SSPADD	set	147
   341  0086                     _TRISB	set	134
   342  0088                     _TRISD	set	136
   343  0095                     _WPUBbits	set	149
   344  048D                     _ACKDT	set	1165
   345  048C                     _ACKEN	set	1164
   346  048A                     _PEN	set	1162
   347  040B                     _PSA	set	1035
   348  048B                     _RCEN	set	1163
   349  0489                     _RSEN	set	1161
   350  0488                     _SEN	set	1160
   351  04A7                     _SMP	set	1191
   352  0429                     _TRISA1	set	1065
   353  0188                     _ANSEL	set	392
   354  0189                     _ANSELH	set	393
   355  0188                     _ANSELbits	set	392
   356                           
   357                           	psect	strings
   358  0505                     __pstrings:	
   359  0505                     stringtab:	
   360  0505                     __stringtab:	
   361  0505                     stringcode:	
   362                           ;	String table - string pointers are 1 byte each
   363                           
   364  0505                     stringdir:	
   365  0505  3005               	movlw	high stringdir
   366  0506  008A               	movwf	10
   367  0507  0804               	movf	4,w
   368  0508  0A84               	incf	4,f
   369  0509  0782               	addwf	2,f
   370  050A                     __stringbase:	
   371  050A  3400               	retlw	0
   372  050B                     __end_of__stringtab:	
   373  050B                     STR_31:	
   374  050B  3420               	retlw	32	;' '
   375  050C  3420               	retlw	32	;' '
   376  050D  3420               	retlw	32	;' '
   377  050E  3420               	retlw	32	;' '
   378  050F  3420               	retlw	32	;' '
   379  0510  3420               	retlw	32	;' '
   380  0511  3420               	retlw	32	;' '
   381  0512  3420               	retlw	32	;' '
   382  0513  3420               	retlw	32	;' '
   383  0514  3420               	retlw	32	;' '
   384  0515  3420               	retlw	32	;' '
   385  0516  3420               	retlw	32	;' '
   386  0517  3420               	retlw	32	;' '
   387  0518  3420               	retlw	32	;' '
   388  0519  3420               	retlw	32	;' '
   389  051A  3420               	retlw	32	;' '
   390  051B  3400               	retlw	0
   391  051C                     STR_9:	
   392  051C  3448               	retlw	72	;'H'
   393  051D  3445               	retlw	69	;'E'
   394  051E  344E               	retlw	78	;'N'
   395  051F  3420               	retlw	32	;' '
   396  0520  3447               	retlw	71	;'G'
   397  0521  3449               	retlw	73	;'I'
   398  0522  344F               	retlw	79	;'O'
   399  0523  3420               	retlw	32	;' '
   400  0524  3420               	retlw	32	;' '
   401  0525  3420               	retlw	32	;' '
   402  0526  3420               	retlw	32	;' '
   403  0527  3420               	retlw	32	;' '
   404  0528  3420               	retlw	32	;' '
   405  0529  3420               	retlw	32	;' '
   406  052A  3420               	retlw	32	;' '
   407  052B  3420               	retlw	32	;' '
   408  052C  3400               	retlw	0
   409  052D                     STR_34:	
   410  052D  3443               	retlw	67	;'C'
   411  052E  3448               	retlw	72	;'H'
   412  052F  3449               	retlw	73	;'I'
   413  0530  344E               	retlw	78	;'N'
   414  0531  3448               	retlw	72	;'H'
   415  0532  3420               	retlw	32	;' '
   416  0533  3453               	retlw	83	;'S'
   417  0534  3455               	retlw	85	;'U'
   418  0535  3441               	retlw	65	;'A'
   419  0536  343F               	retlw	63	;'?'
   420  0537  3420               	retlw	32	;' '
   421  0538  3420               	retlw	32	;' '
   422  0539  3420               	retlw	32	;' '
   423  053A  3420               	retlw	32	;' '
   424  053B  3420               	retlw	32	;' '
   425  053C  3420               	retlw	32	;' '
   426  053D  3400               	retlw	0
   427  053E                     STR_60:	
   428  053E  3420               	retlw	32	;' '
   429  053F  3420               	retlw	32	;' '
   430  0540  3420               	retlw	32	;' '
   431  0541  3420               	retlw	32	;' '
   432  0542  3420               	retlw	32	;' '
   433  0543  3448               	retlw	72	;'H'
   434  0544  3445               	retlw	69	;'E'
   435  0545  344C               	retlw	76	;'L'
   436  0546  344C               	retlw	76	;'L'
   437  0547  344F               	retlw	79	;'O'
   438  0548  3420               	retlw	32	;' '
   439  0549  3420               	retlw	32	;' '
   440  054A  3420               	retlw	32	;' '
   441  054B  3420               	retlw	32	;' '
   442  054C  3420               	retlw	32	;' '
   443  054D  3420               	retlw	32	;' '
   444  054E  3400               	retlw	0
   445  054F                     STR_30:	
   446  054F  3443               	retlw	67	;'C'
   447  0550  3448               	retlw	72	;'H'
   448  0551  3445               	retlw	69	;'E'
   449  0552  3420               	retlw	32	;' '
   450  0553  3444               	retlw	68	;'D'
   451  0554  344F               	retlw	79	;'O'
   452  0555  3420               	retlw	32	;' '
   453  0556  3431               	retlw	49	;'1'
   454  0557  3432               	retlw	50	;'2'
   455  0558  3468               	retlw	104	;'h'
   456  0559  343F               	retlw	63	;'?'
   457  055A  3420               	retlw	32	;' '
   458  055B  3420               	retlw	32	;' '
   459  055C  3420               	retlw	32	;' '
   460  055D  3420               	retlw	32	;' '
   461  055E  3420               	retlw	32	;' '
   462  055F  3400               	retlw	0
   463  0560                     STR_32:	
   464  0560  3443               	retlw	67	;'C'
   465  0561  3448               	retlw	72	;'H'
   466  0562  3445               	retlw	69	;'E'
   467  0563  3420               	retlw	32	;' '
   468  0564  3444               	retlw	68	;'D'
   469  0565  344F               	retlw	79	;'O'
   470  0566  3420               	retlw	32	;' '
   471  0567  3432               	retlw	50	;'2'
   472  0568  3434               	retlw	52	;'4'
   473  0569  3468               	retlw	104	;'h'
   474  056A  343F               	retlw	63	;'?'
   475  056B  3420               	retlw	32	;' '
   476  056C  3420               	retlw	32	;' '
   477  056D  3420               	retlw	32	;' '
   478  056E  3420               	retlw	32	;' '
   479  056F  3420               	retlw	32	;' '
   480  0570  3400               	retlw	0
   481  0571                     STR_4:	
   482  0571  3458               	retlw	88	;'X'
   483  0572  344F               	retlw	79	;'O'
   484  0573  3441               	retlw	65	;'A'
   485  0574  3420               	retlw	32	;' '
   486  0575  3448               	retlw	72	;'H'
   487  0576  3445               	retlw	69	;'E'
   488  0577  344E               	retlw	78	;'N'
   489  0578  3420               	retlw	32	;' '
   490  0579  3447               	retlw	71	;'G'
   491  057A  3449               	retlw	73	;'I'
   492  057B  344F               	retlw	79	;'O'
   493  057C  343F               	retlw	63	;'?'
   494  057D  3420               	retlw	32	;' '
   495  057E  3420               	retlw	32	;' '
   496  057F  3420               	retlw	32	;' '
   497  0580  3420               	retlw	32	;' '
   498  0581  3400               	retlw	0
   499  0582                     STR_61:	
   500  0582  3420               	retlw	32	;' '
   501  0583  3447               	retlw	71	;'G'
   502  0584  3452               	retlw	82	;'R'
   503  0585  344F               	retlw	79	;'O'
   504  0586  3455               	retlw	85	;'U'
   505  0587  3450               	retlw	80	;'P'
   506  0588  3420               	retlw	32	;' '
   507  0589  3430               	retlw	48	;'0'
   508  058A  3431               	retlw	49	;'1'
   509  058B  3420               	retlw	32	;' '
   510  058C  3456               	retlw	86	;'V'
   511  058D  3458               	retlw	88	;'X'
   512  058E  344C               	retlw	76	;'L'
   513  058F  3421               	retlw	33	;'!'
   514  0590  3420               	retlw	32	;' '
   515  0591  3420               	retlw	32	;' '
   516  0592  3400               	retlw	0
   517  0593                     STR_36:	
   518  0593  3443               	retlw	67	;'C'
   519  0594  3448               	retlw	72	;'H'
   520  0595  3449               	retlw	73	;'I'
   521  0596  344E               	retlw	78	;'N'
   522  0597  3448               	retlw	72	;'H'
   523  0598  3420               	retlw	32	;' '
   524  0599  3453               	retlw	83	;'S'
   525  059A  3455               	retlw	85	;'U'
   526  059B  3441               	retlw	65	;'A'
   527  059C  3420               	retlw	32	;' '
   528  059D  3420               	retlw	32	;' '
   529  059E  3420               	retlw	32	;' '
   530  059F  3420               	retlw	32	;' '
   531  05A0  3420               	retlw	32	;' '
   532  05A1  3420               	retlw	32	;' '
   533  05A2  3400               	retlw	0
   534  05A3                     STR_57:	
   535  05A3  3454               	retlw	84	;'T'
   536  05A4  3448               	retlw	72	;'H'
   537  05A5  3441               	retlw	65	;'A'
   538  05A6  344E               	retlw	78	;'N'
   539  05A7  3447               	retlw	71	;'G'
   540  05A8  343A               	retlw	58	;':'
   541  05A9  3420               	retlw	32	;' '
   542  05AA  3400               	retlw	0
   543  05AB                     STR_14:	
   544  05AB  3450               	retlw	80	;'P'
   545  05AC  3448               	retlw	72	;'H'
   546  05AD  3455               	retlw	85	;'U'
   547  05AE  3454               	retlw	84	;'T'
   548  05AF  343A               	retlw	58	;':'
   549  05B0  3420               	retlw	32	;' '
   550  05B1  3400               	retlw	0
   551  05B2                     STR_55:	
   552  05B2  344E               	retlw	78	;'N'
   553  05B3  3447               	retlw	71	;'G'
   554  05B4  3441               	retlw	65	;'A'
   555  05B5  3459               	retlw	89	;'Y'
   556  05B6  343A               	retlw	58	;':'
   557  05B7  3420               	retlw	32	;' '
   558  05B8  3400               	retlw	0
   559  05B9                     STR_59:	
   560  05B9  344E               	retlw	78	;'N'
   561  05BA  3441               	retlw	65	;'A'
   562  05BB  344D               	retlw	77	;'M'
   563  05BC  343A               	retlw	58	;':'
   564  05BD  3420               	retlw	32	;' '
   565  05BE  3400               	retlw	0
   566  05BF                     STR_10:	
   567  05BF  3447               	retlw	71	;'G'
   568  05C0  3449               	retlw	73	;'I'
   569  05C1  344F               	retlw	79	;'O'
   570  05C2  343A               	retlw	58	;':'
   571  05C3  3420               	retlw	32	;' '
   572  05C4  3400               	retlw	0
   573  05C5                     STR_44:	
   574  05C5  3454               	retlw	84	;'T'
   575  05C6  3448               	retlw	72	;'H'
   576  05C7  3455               	retlw	85	;'U'
   577  05C8  343A               	retlw	58	;':'
   578  05C9  3420               	retlw	32	;' '
   579  05CA  3400               	retlw	0
   580  05CB                     STR_17:	
   581  05CB  3441               	retlw	65	;'A'
   582  05CC  344C               	retlw	76	;'L'
   583  05CD  344D               	retlw	77	;'M'
   584  05CE  3420               	retlw	32	;' '
   585  05CF  3400               	retlw	0
   586  05D0                     STR_24:	
   587  05D0  3454               	retlw	84	;'T'
   588  05D1  3455               	retlw	85	;'U'
   589  05D2  3445               	retlw	69	;'E'
   590  05D3  3400               	retlw	0
   591  05D4                     STR_27:	
   592  05D4  3446               	retlw	70	;'F'
   593  05D5  3452               	retlw	82	;'R'
   594  05D6  3449               	retlw	73	;'I'
   595  05D7  3400               	retlw	0
   596  05D8                     STR_2:	
   597  05D8  3420               	retlw	32	;' '
   598  05D9  3441               	retlw	65	;'A'
   599  05DA  344D               	retlw	77	;'M'
   600  05DB  3400               	retlw	0
   601  05DC                     STR_3:	
   602  05DC  3420               	retlw	32	;' '
   603  05DD  3450               	retlw	80	;'P'
   604  05DE  344D               	retlw	77	;'M'
   605  05DF  3400               	retlw	0
   606  05E0                     STR_23:	
   607  05E0  344D               	retlw	77	;'M'
   608  05E1  344F               	retlw	79	;'O'
   609  05E2  344E               	retlw	78	;'N'
   610  05E3  3400               	retlw	0
   611  05E4                     STR_22:	
   612  05E4  3453               	retlw	83	;'S'
   613  05E5  3455               	retlw	85	;'U'
   614  05E6  344E               	retlw	78	;'N'
   615  05E7  3400               	retlw	0
   616  05E8                     STR_25:	
   617  05E8  3457               	retlw	87	;'W'
   618  05E9  3445               	retlw	69	;'E'
   619  05EA  3453               	retlw	83	;'S'
   620  05EB  3400               	retlw	0
   621  05EC                     STR_28:	
   622  05EC  3453               	retlw	83	;'S'
   623  05ED  3441               	retlw	65	;'A'
   624  05EE  3454               	retlw	84	;'T'
   625  05EF  3400               	retlw	0
   626  05F0                     STR_26:	
   627  05F0  3454               	retlw	84	;'T'
   628  05F1  3448               	retlw	72	;'H'
   629  05F2  3455               	retlw	85	;'U'
   630  05F3  3400               	retlw	0
   631  0519                     
   632                           ; #config settings
   633  0000                     
   634                           	psect	cinit
   635  0015                     start_initialization:	
   636  0015                     __initialization:	
   637                           
   638                           ; Clear objects allocated to BANK0
   639  0015  01D7               	clrf	__pbssBANK0& (0+127)
   640  0016  01D8               	clrf	(__pbssBANK0+1)& (0+127)
   641  0017  01D9               	clrf	(__pbssBANK0+2)& (0+127)
   642                           
   643                           ; Clear objects allocated to BANK1
   644  0018  1683               	bsf	3,5	;RP0=1, select bank1
   645  0019  1303               	bcf	3,6	;RP1=0, select bank1
   646  001A  01B1               	clrf	__pbssBANK1& (0+127)
   647  001B  01B2               	clrf	(__pbssBANK1+1)& (0+127)
   648  001C  01B3               	clrf	(__pbssBANK1+2)& (0+127)
   649  001D  01B4               	clrf	(__pbssBANK1+3)& (0+127)
   650  001E  01B5               	clrf	(__pbssBANK1+4)& (0+127)
   651  001F  01B6               	clrf	(__pbssBANK1+5)& (0+127)
   652  0020  01B7               	clrf	(__pbssBANK1+6)& (0+127)
   653  0021  01B8               	clrf	(__pbssBANK1+7)& (0+127)
   654  0022  01B9               	clrf	(__pbssBANK1+8)& (0+127)
   655  0023  01BA               	clrf	(__pbssBANK1+9)& (0+127)
   656  0024  01BB               	clrf	(__pbssBANK1+10)& (0+127)
   657  0025  01BC               	clrf	(__pbssBANK1+11)& (0+127)
   658  0026  01BD               	clrf	(__pbssBANK1+12)& (0+127)
   659  0027                     end_of_initialization:	
   660                           ;End of C runtime variable initialization code
   661                           
   662  0027                     __end_of__initialization:	
   663  0027  0183               	clrf	3
   664  0028  120A  118A  2ED2   	ljmp	_main	;jump to C main() function
   665                           
   666                           	psect	bssBANK0
   667  0057                     __pbssBANK0:	
   668  0057                     _count:	
   669  0057                     	ds	1
   670  0058                     _hour_alarm:	
   671  0058                     	ds	1
   672  0059                     _mode:	
   673  0059                     	ds	1
   674                           
   675                           	psect	bssBANK1
   676  00B1                     __pbssBANK1:	
   677  00B1                     _alarm:	
   678  00B1                     	ds	1
   679  00B2                     _date:	
   680  00B2                     	ds	1
   681  00B3                     _day:	
   682  00B3                     	ds	1
   683  00B4                     _hour:	
   684  00B4                     	ds	1
   685  00B5                     _hour_alarm_display:	
   686  00B5                     	ds	1
   687  00B6                     _hour_display:	
   688  00B6                     	ds	1
   689  00B7                     _minute:	
   690  00B7                     	ds	1
   691  00B8                     _month:	
   692  00B8                     	ds	1
   693  00B9                     _quit:	
   694  00B9                     	ds	1
   695  00BA                     _second:	
   696  00BA                     	ds	1
   697  00BB                     _set:	
   698  00BB                     	ds	1
   699  00BC                     _temperature:	
   700  00BC                     	ds	1
   701  00BD                     _year:	
   702  00BD                     	ds	1
   703                           
   704                           	psect	cstackBANK1
   705  00A0                     __pcstackBANK1:	
   706  00A0                     ??_i2c_Init:	
   707  00A0                     ??_Display_Hour:	
   708                           ; 0 bytes @ 0x0
   709                           
   710  00A0                     ??_Display_HourAlarm:	
   711                           ; 0 bytes @ 0x0
   712                           
   713  00A0                     ??_Lcd_Port:	
   714                           ; 0 bytes @ 0x0
   715                           
   716  00A0                     ??_i2c_Start:	
   717                           ; 0 bytes @ 0x0
   718                           
   719  00A0                     ??_i2c_Restart:	
   720                           ; 0 bytes @ 0x0
   721                           
   722  00A0                     ??_i2c_Stop:	
   723                           ; 0 bytes @ 0x0
   724                           
   725  00A0                     ??_i2c_Nack:	
   726                           ; 0 bytes @ 0x0
   727                           
   728  00A0                     ??_i2c_Write:	
   729                           ; 0 bytes @ 0x0
   730                           
   731  00A0                     ??_i2c_Read:	
   732                           ; 0 bytes @ 0x0
   733                           
   734  00A0                     ?___bmul:	
   735                           ; 0 bytes @ 0x0
   736                           
   737  00A0                     ?___awdiv:	
   738                           ; 1 bytes @ 0x0
   739                           
   740  00A0                     ?___awmod:	
   741                           ; 2 bytes @ 0x0
   742                           
   743  00A0                     Lcd_Port@a:	
   744                           ; 2 bytes @ 0x0
   745                           
   746  00A0                     i2c_Write@data:	
   747                           ; 1 bytes @ 0x0
   748                           
   749  00A0                     ___bmul@multiplicand:	
   750                           ; 1 bytes @ 0x0
   751                           
   752  00A0                     ___awdiv@divisor:	
   753                           ; 1 bytes @ 0x0
   754                           
   755  00A0                     ___awmod@divisor:	
   756                           ; 2 bytes @ 0x0
   757                           
   758                           
   759                           ; 2 bytes @ 0x0
   760  00A0                     	ds	1
   761  00A1                     ??_Lcd_Write_Char:	
   762  00A1                     ??_Lcd_Cmd:	
   763                           ; 0 bytes @ 0x1
   764                           
   765  00A1                     ??___bmul:	
   766                           ; 0 bytes @ 0x1
   767                           
   768                           
   769                           ; 0 bytes @ 0x1
   770  00A1                     	ds	1
   771  00A2                     Lcd_Cmd@a:	
   772  00A2                     Lcd_Write_Char@temp:	
   773                           ; 1 bytes @ 0x2
   774                           
   775  00A2                     ___bmul@product:	
   776                           ; 1 bytes @ 0x2
   777                           
   778  00A2                     ___awdiv@dividend:	
   779                           ; 1 bytes @ 0x2
   780                           
   781  00A2                     ___awmod@dividend:	
   782                           ; 2 bytes @ 0x2
   783                           
   784                           
   785                           ; 2 bytes @ 0x2
   786  00A2                     	ds	1
   787  00A3                     ?_Lcd_Set_Cursor:	
   788  00A3                     ??_Lcd_Init:	
   789                           ; 0 bytes @ 0x3
   790                           
   791  00A3                     Lcd_Set_Cursor@b:	
   792                           ; 0 bytes @ 0x3
   793                           
   794  00A3                     Lcd_Write_Char@y:	
   795                           ; 1 bytes @ 0x3
   796                           
   797  00A3                     ___bmul@multiplier:	
   798                           ; 1 bytes @ 0x3
   799                           
   800                           
   801                           ; 1 bytes @ 0x3
   802  00A3                     	ds	1
   803  00A4                     ??_DS1307_Read:	
   804  00A4                     ??_Lcd_Set_Cursor:	
   805                           ; 0 bytes @ 0x4
   806                           
   807  00A4                     ??___awdiv:	
   808                           ; 0 bytes @ 0x4
   809                           
   810  00A4                     ??___awmod:	
   811                           ; 0 bytes @ 0x4
   812                           
   813  00A4                     Lcd_Write_Char@a:	
   814                           ; 0 bytes @ 0x4
   815                           
   816                           
   817                           ; 1 bytes @ 0x4
   818  00A4                     	ds	1
   819  00A5                     ??_Lcd_Write_String:	
   820  00A5                     ___awdiv@counter:	
   821                           ; 0 bytes @ 0x5
   822                           
   823  00A5                     ___awmod@counter:	
   824                           ; 1 bytes @ 0x5
   825                           
   826  00A5                     Lcd_Write_String@i:	
   827                           ; 1 bytes @ 0x5
   828                           
   829                           
   830                           ; 2 bytes @ 0x5
   831  00A5                     	ds	1
   832  00A6                     Lcd_Set_Cursor@a:	
   833  00A6                     ___awdiv@sign:	
   834                           ; 1 bytes @ 0x6
   835                           
   836  00A6                     ___awmod@sign:	
   837                           ; 1 bytes @ 0x6
   838                           
   839                           
   840                           ; 1 bytes @ 0x6
   841  00A6                     	ds	1
   842  00A7                     Lcd_Set_Cursor@z:	
   843  00A7                     Lcd_Write_String@a:	
   844                           ; 1 bytes @ 0x7
   845                           
   846  00A7                     ___awdiv@quotient:	
   847                           ; 1 bytes @ 0x7
   848                           
   849                           
   850                           ; 2 bytes @ 0x7
   851  00A7                     	ds	1
   852  00A8                     Lcd_Set_Cursor@y:	
   853  00A8                     DS1307_Read@add:	
   854                           ; 1 bytes @ 0x8
   855                           
   856                           
   857                           ; 1 bytes @ 0x8
   858  00A8                     	ds	1
   859  00A9                     ??_Display:	
   860  00A9                     Lcd_Set_Cursor@temp:	
   861                           ; 0 bytes @ 0x9
   862                           
   863  00A9                     DS1307_Read@temp:	
   864                           ; 1 bytes @ 0x9
   865                           
   866                           
   867                           ; 1 bytes @ 0x9
   868  00A9                     	ds	1
   869  00AA                     DS1307_Read@data:	
   870                           
   871                           ; 1 bytes @ 0xA
   872  00AA                     	ds	1
   873  00AB                     ??_Read_FullTime:	
   874  00AB                     Display@One:	
   875                           ; 0 bytes @ 0xB
   876                           
   877                           
   878                           ; 1 bytes @ 0xB
   879  00AB                     	ds	1
   880  00AC                     ??_Display_Alarm:	
   881  00AC                     ??_Display_Time:	
   882                           ; 0 bytes @ 0xC
   883                           
   884  00AC                     ??_Display_SetTime:	
   885                           ; 0 bytes @ 0xC
   886                           
   887                           
   888                           ; 0 bytes @ 0xC
   889  00AC                     	ds	2
   890  00AE                     ??_main:	
   891                           
   892                           ; 0 bytes @ 0xE
   893  00AE                     	ds	3
   894                           
   895                           	psect	cstackCOMMON
   896  0070                     __pcstackCOMMON:	
   897  0070                     ?_Lcd_Write_Char:	
   898  0070                     ?_Lcd_Write_String:	
   899                           ; 0 bytes @ 0x0
   900                           
   901  0070                     ?_i2c_Init:	
   902                           ; 0 bytes @ 0x0
   903                           
   904  0070                     ?_Lcd_Init:	
   905                           ; 0 bytes @ 0x0
   906                           
   907  0070                     ?_Fix_Time:	
   908                           ; 0 bytes @ 0x0
   909                           
   910  0070                     ??_Fix_Time:	
   911                           ; 0 bytes @ 0x0
   912                           
   913  0070                     ?_Fix_Alarm:	
   914                           ; 0 bytes @ 0x0
   915                           
   916  0070                     ??_Fix_Alarm:	
   917                           ; 0 bytes @ 0x0
   918                           
   919  0070                     ?_Read_FullTime:	
   920                           ; 0 bytes @ 0x0
   921                           
   922  0070                     ?_Read_Time:	
   923                           ; 0 bytes @ 0x0
   924                           
   925  0070                     ?_Read_Tem:	
   926                           ; 0 bytes @ 0x0
   927                           
   928  0070                     ?_Write_Min:	
   929                           ; 0 bytes @ 0x0
   930                           
   931  0070                     ?_Write_Hour:	
   932                           ; 0 bytes @ 0x0
   933                           
   934  0070                     ?_Write_Time:	
   935                           ; 0 bytes @ 0x0
   936                           
   937  0070                     ?_Change_Mode12h:	
   938                           ; 0 bytes @ 0x0
   939                           
   940  0070                     ??_Change_Mode12h:	
   941                           ; 0 bytes @ 0x0
   942                           
   943  0070                     ?_Display:	
   944                           ; 0 bytes @ 0x0
   945                           
   946  0070                     ?_Display_Hour:	
   947                           ; 0 bytes @ 0x0
   948                           
   949  0070                     ?_Display_HourAlarm:	
   950                           ; 0 bytes @ 0x0
   951                           
   952  0070                     ?_Display_Alarm:	
   953                           ; 0 bytes @ 0x0
   954                           
   955  0070                     ?_Display_Time:	
   956                           ; 0 bytes @ 0x0
   957                           
   958  0070                     ?_Display_SetTime:	
   959                           ; 0 bytes @ 0x0
   960                           
   961  0070                     ?_ISR:	
   962                           ; 0 bytes @ 0x0
   963                           
   964  0070                     ?_Lcd_Port:	
   965                           ; 0 bytes @ 0x0
   966                           
   967  0070                     ?_Lcd_Cmd:	
   968                           ; 0 bytes @ 0x0
   969                           
   970  0070                     ?_i2c_Start:	
   971                           ; 0 bytes @ 0x0
   972                           
   973  0070                     ?_i2c_Restart:	
   974                           ; 0 bytes @ 0x0
   975                           
   976  0070                     ?_i2c_Stop:	
   977                           ; 0 bytes @ 0x0
   978                           
   979  0070                     ?_i2c_Nack:	
   980                           ; 0 bytes @ 0x0
   981                           
   982  0070                     ?_i2c_Write:	
   983                           ; 0 bytes @ 0x0
   984                           
   985  0070                     ?i1_Read_FullTime:	
   986                           ; 0 bytes @ 0x0
   987                           
   988  0070                     ?i1_i2c_Start:	
   989                           ; 0 bytes @ 0x0
   990                           
   991  0070                     ??i1_i2c_Start:	
   992                           ; 0 bytes @ 0x0
   993                           
   994  0070                     ?i1_i2c_Restart:	
   995                           ; 0 bytes @ 0x0
   996                           
   997  0070                     ??i1_i2c_Restart:	
   998                           ; 0 bytes @ 0x0
   999                           
  1000  0070                     ?i1_i2c_Stop:	
  1001                           ; 0 bytes @ 0x0
  1002                           
  1003  0070                     ??i1_i2c_Stop:	
  1004                           ; 0 bytes @ 0x0
  1005                           
  1006  0070                     ?i1_i2c_Nack:	
  1007                           ; 0 bytes @ 0x0
  1008                           
  1009  0070                     ??i1_i2c_Nack:	
  1010                           ; 0 bytes @ 0x0
  1011                           
  1012  0070                     ?i1_i2c_Write:	
  1013                           ; 0 bytes @ 0x0
  1014                           
  1015  0070                     ??i1_i2c_Write:	
  1016                           ; 0 bytes @ 0x0
  1017                           
  1018  0070                     ??i1_i2c_Read:	
  1019                           ; 0 bytes @ 0x0
  1020                           
  1021  0070                     ?_DS1307_Read:	
  1022                           ; 0 bytes @ 0x0
  1023                           
  1024  0070                     ?_i2c_Read:	
  1025                           ; 1 bytes @ 0x0
  1026                           
  1027  0070                     ?i1_i2c_Read:	
  1028                           ; 1 bytes @ 0x0
  1029                           
  1030  0070                     ?i1_DS1307_Read:	
  1031                           ; 1 bytes @ 0x0
  1032                           
  1033  0070                     ?i1___bmul:	
  1034                           ; 1 bytes @ 0x0
  1035                           
  1036  0070                     ?_main:	
  1037                           ; 1 bytes @ 0x0
  1038                           
  1039  0070                     ?i1___awdiv:	
  1040                           ; 2 bytes @ 0x0
  1041                           
  1042  0070                     ?i1___awmod:	
  1043                           ; 2 bytes @ 0x0
  1044                           
  1045  0070                     ?___ftpack:	
  1046                           ; 2 bytes @ 0x0
  1047                           
  1048  0070                     i1i2c_Write@data:	
  1049                           ; 3 bytes @ 0x0
  1050                           
  1051  0070                     i1___bmul@multiplicand:	
  1052                           ; 1 bytes @ 0x0
  1053                           
  1054  0070                     i1___awdiv@divisor:	
  1055                           ; 1 bytes @ 0x0
  1056                           
  1057  0070                     i1___awmod@divisor:	
  1058                           ; 2 bytes @ 0x0
  1059                           
  1060  0070                     ___ftpack@arg:	
  1061                           ; 2 bytes @ 0x0
  1062                           
  1063                           
  1064                           ; 3 bytes @ 0x0
  1065  0070                     	ds	1
  1066  0071                     ??i1___bmul:	
  1067                           
  1068                           ; 0 bytes @ 0x1
  1069  0071                     	ds	1
  1070  0072                     i1___bmul@product:	
  1071  0072                     i1___awdiv@dividend:	
  1072                           ; 1 bytes @ 0x2
  1073                           
  1074  0072                     i1___awmod@dividend:	
  1075                           ; 2 bytes @ 0x2
  1076                           
  1077                           
  1078                           ; 2 bytes @ 0x2
  1079  0072                     	ds	1
  1080  0073                     ___ftpack@exp:	
  1081  0073                     i1___bmul@multiplier:	
  1082                           ; 1 bytes @ 0x3
  1083                           
  1084                           
  1085                           ; 1 bytes @ 0x3
  1086  0073                     	ds	1
  1087  0074                     ??i1_DS1307_Read:	
  1088  0074                     ??i1___awdiv:	
  1089                           ; 0 bytes @ 0x4
  1090                           
  1091  0074                     ??i1___awmod:	
  1092                           ; 0 bytes @ 0x4
  1093                           
  1094  0074                     ___ftpack@sign:	
  1095                           ; 0 bytes @ 0x4
  1096                           
  1097                           
  1098                           ; 1 bytes @ 0x4
  1099  0074                     	ds	1
  1100  0075                     ??___ftpack:	
  1101  0075                     i1___awdiv@counter:	
  1102                           ; 0 bytes @ 0x5
  1103                           
  1104  0075                     i1___awmod@counter:	
  1105                           ; 1 bytes @ 0x5
  1106                           
  1107                           
  1108                           ; 1 bytes @ 0x5
  1109  0075                     	ds	1
  1110  0076                     i1___awdiv@sign:	
  1111  0076                     i1___awmod@sign:	
  1112                           ; 1 bytes @ 0x6
  1113                           
  1114                           
  1115                           ; 1 bytes @ 0x6
  1116  0076                     	ds	1
  1117  0077                     i1___awdiv@quotient:	
  1118                           
  1119                           ; 2 bytes @ 0x7
  1120  0077                     	ds	1
  1121  0078                     ?___awtoft:	
  1122  0078                     ?___ftmul:	
  1123                           ; 3 bytes @ 0x8
  1124                           
  1125  0078                     i1DS1307_Read@add:	
  1126                           ; 3 bytes @ 0x8
  1127                           
  1128  0078                     ___awtoft@c:	
  1129                           ; 1 bytes @ 0x8
  1130                           
  1131  0078                     ___ftmul@f1:	
  1132                           ; 2 bytes @ 0x8
  1133                           
  1134                           
  1135                           ; 3 bytes @ 0x8
  1136  0078                     	ds	1
  1137  0079                     ?_DS1307_Write:	
  1138  0079                     DS1307_Write@dat:	
  1139                           ; 0 bytes @ 0x9
  1140                           
  1141  0079                     i1DS1307_Read@temp:	
  1142                           ; 1 bytes @ 0x9
  1143                           
  1144                           
  1145                           ; 1 bytes @ 0x9
  1146  0079                     	ds	1
  1147  007A                     DS1307_Write@add:	
  1148  007A                     i1DS1307_Read@data:	
  1149                           ; 1 bytes @ 0xA
  1150                           
  1151                           
  1152                           ; 1 bytes @ 0xA
  1153  007A                     	ds	1
  1154  007B                     ??_Read_Time:	
  1155  007B                     ??___awtoft:	
  1156                           ; 0 bytes @ 0xB
  1157                           
  1158  007B                     ??i1_Read_FullTime:	
  1159                           ; 0 bytes @ 0xB
  1160                           
  1161  007B                     DS1307_Write@tmp:	
  1162                           ; 0 bytes @ 0xB
  1163                           
  1164  007B                     ___ftmul@f2:	
  1165                           ; 1 bytes @ 0xB
  1166                           
  1167                           
  1168                           ; 3 bytes @ 0xB
  1169  007B                     	ds	1
  1170  007C                     ??_Write_Min:	
  1171  007C                     ??_Write_Hour:	
  1172                           ; 0 bytes @ 0xC
  1173                           
  1174  007C                     ??_Write_Time:	
  1175                           ; 0 bytes @ 0xC
  1176                           
  1177                           
  1178                           ; 0 bytes @ 0xC
  1179  007C                     	ds	1
  1180  007D                     ___awtoft@sign:	
  1181                           
  1182                           ; 1 bytes @ 0xD
  1183  007D                     	ds	1
  1184                           
  1185                           	psect	cstackBANK0
  1186  0020                     __pcstackBANK0:	
  1187  0020                     ??_DS1307_Write:	
  1188  0020                     ??___ftmul:	
  1189                           ; 0 bytes @ 0x0
  1190                           
  1191                           
  1192                           ; 0 bytes @ 0x0
  1193  0020                     	ds	4
  1194  0024                     ___ftmul@exp:	
  1195                           
  1196                           ; 1 bytes @ 0x4
  1197  0024                     	ds	1
  1198  0025                     ___ftmul@f3_as_product:	
  1199                           
  1200                           ; 3 bytes @ 0x5
  1201  0025                     	ds	3
  1202  0028                     ___ftmul@cntr:	
  1203                           
  1204                           ; 1 bytes @ 0x8
  1205  0028                     	ds	1
  1206  0029                     ___ftmul@sign:	
  1207                           
  1208                           ; 1 bytes @ 0x9
  1209  0029                     	ds	1
  1210  002A                     ?___ftdiv:	
  1211  002A                     ___ftdiv@f2:	
  1212                           ; 3 bytes @ 0xA
  1213                           
  1214                           
  1215                           ; 3 bytes @ 0xA
  1216  002A                     	ds	3
  1217  002D                     ___ftdiv@f1:	
  1218                           
  1219                           ; 3 bytes @ 0xD
  1220  002D                     	ds	3
  1221  0030                     ??___ftdiv:	
  1222                           
  1223                           ; 0 bytes @ 0x10
  1224  0030                     	ds	4
  1225  0034                     ___ftdiv@cntr:	
  1226                           
  1227                           ; 1 bytes @ 0x14
  1228  0034                     	ds	1
  1229  0035                     ___ftdiv@f3:	
  1230                           
  1231                           ; 3 bytes @ 0x15
  1232  0035                     	ds	3
  1233  0038                     ___ftdiv@exp:	
  1234                           
  1235                           ; 1 bytes @ 0x18
  1236  0038                     	ds	1
  1237  0039                     ___ftdiv@sign:	
  1238                           
  1239                           ; 1 bytes @ 0x19
  1240  0039                     	ds	1
  1241  003A                     ?___fttol:	
  1242  003A                     ___fttol@f1:	
  1243                           ; 4 bytes @ 0x1A
  1244                           
  1245                           
  1246                           ; 3 bytes @ 0x1A
  1247  003A                     	ds	4
  1248  003E                     ??___fttol:	
  1249                           
  1250                           ; 0 bytes @ 0x1E
  1251  003E                     	ds	4
  1252  0042                     ___fttol@sign1:	
  1253                           
  1254                           ; 1 bytes @ 0x22
  1255  0042                     	ds	1
  1256  0043                     ___fttol@lval:	
  1257                           
  1258                           ; 4 bytes @ 0x23
  1259  0043                     	ds	4
  1260  0047                     ___fttol@exp1:	
  1261                           
  1262                           ; 1 bytes @ 0x27
  1263  0047                     	ds	1
  1264  0048                     ??_Read_Tem:	
  1265                           
  1266                           ; 0 bytes @ 0x28
  1267  0048                     	ds	4
  1268  004C                     ??_ISR:	
  1269                           
  1270                           ; 0 bytes @ 0x2C
  1271  004C                     	ds	5
  1272                           
  1273                           	psect	maintext
  1274  06D2                     __pmaintext:	
  1275 ;;
  1276 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1277 ;;
  1278 ;; *************** function _main *****************
  1279 ;; Defined at:
  1280 ;;		line 602 in file "main.c"
  1281 ;; Parameters:    Size  Location     Type
  1282 ;;		None
  1283 ;; Auto vars:     Size  Location     Type
  1284 ;;		None
  1285 ;; Return value:  Size  Location     Type
  1286 ;;                  2  410[None  ] int 
  1287 ;; Registers used:
  1288 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1289 ;; Tracked objects:
  1290 ;;		On entry : B00/0
  1291 ;;		On exit  : 0/0
  1292 ;;		Unchanged: 0/0
  1293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1294 ;;      Params:         0       0       0       0       0
  1295 ;;      Locals:         0       0       0       0       0
  1296 ;;      Temps:          0       0       3       0       0
  1297 ;;      Totals:         0       0       3       0       0
  1298 ;;Total ram usage:        3 bytes
  1299 ;; Hardware stack levels required when called:    8
  1300 ;; This function calls:
  1301 ;;		_Display_Alarm
  1302 ;;		_Display_SetTime
  1303 ;;		_Display_Time
  1304 ;;		_Lcd_Init
  1305 ;;		_Lcd_Set_Cursor
  1306 ;;		_Lcd_Write_String
  1307 ;;		_Read_FullTime
  1308 ;;		_i2c_Init
  1309 ;; This function is called by:
  1310 ;;		Startup code after reset
  1311 ;; This function uses a non-reentrant model
  1312 ;;
  1313                           
  1314                           
  1315                           ;psect for function _main
  1316  06D2                     _main:	
  1317                           
  1318                           ;main.c: 603: TRISD = 0;
  1319                           
  1320                           ;incstack = 0
  1321                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1322  06D2  1683               	bsf	3,5	;RP0=1, select bank1
  1323  06D3  1303               	bcf	3,6	;RP1=0, select bank1
  1324  06D4  0188               	clrf	8	;volatile
  1325                           
  1326                           ;main.c: 604: PORTD = 0;
  1327  06D5  1283               	bcf	3,5	;RP0=0, select bank0
  1328  06D6  1303               	bcf	3,6	;RP1=0, select bank0
  1329  06D7  0188               	clrf	8	;volatile
  1330                           
  1331                           ;main.c: 605: TRISB = 0xFF;
  1332  06D8  30FF               	movlw	255
  1333  06D9  1683               	bsf	3,5	;RP0=1, select bank1
  1334  06DA  1303               	bcf	3,6	;RP1=0, select bank1
  1335  06DB  0086               	movwf	6	;volatile
  1336                           
  1337                           ;main.c: 606: ANSEL = 0x00;
  1338  06DC  1683               	bsf	3,5	;RP0=1, select bank3
  1339  06DD  1703               	bsf	3,6	;RP1=1, select bank3
  1340  06DE  0188               	clrf	8	;volatile
  1341                           
  1342                           ;main.c: 607: ANSELH = 0x00;
  1343  06DF  0189               	clrf	9	;volatile
  1344                           
  1345                           ;main.c: 609: TRISA1 = 1;
  1346  06E0  1683               	bsf	3,5	;RP0=1, select bank1
  1347  06E1  1303               	bcf	3,6	;RP1=0, select bank1
  1348  06E2  1485               	bsf	5,1	;volatile
  1349                           
  1350                           ;main.c: 610: ANSELbits.ANS1 = 1;
  1351  06E3  1683               	bsf	3,5	;RP0=1, select bank3
  1352  06E4  1703               	bsf	3,6	;RP1=1, select bank3
  1353  06E5  1488               	bsf	8,1	;volatile
  1354                           
  1355                           ;main.c: 611: ADCON1 = 0x80;
  1356  06E6  3080               	movlw	128
  1357  06E7  1683               	bsf	3,5	;RP0=1, select bank1
  1358  06E8  1303               	bcf	3,6	;RP1=0, select bank1
  1359  06E9  009F               	movwf	31	;volatile
  1360                           
  1361                           ;main.c: 612: ADCON0 = 0x45;
  1362  06EA  3045               	movlw	69
  1363  06EB  1283               	bcf	3,5	;RP0=0, select bank0
  1364  06EC  1303               	bcf	3,6	;RP1=0, select bank0
  1365  06ED  009F               	movwf	31	;volatile
  1366                           
  1367                           ;main.c: 614: count = 0;
  1368  06EE  01D7               	clrf	_count
  1369                           
  1370                           ;main.c: 615: set = 0;
  1371  06EF  1683               	bsf	3,5	;RP0=1, select bank1
  1372  06F0  1303               	bcf	3,6	;RP1=0, select bank1
  1373  06F1  01BB               	clrf	_set^(0+128)
  1374                           
  1375                           ;main.c: 616: mode = 0;
  1376  06F2  1283               	bcf	3,5	;RP0=0, select bank0
  1377  06F3  1303               	bcf	3,6	;RP1=0, select bank0
  1378  06F4  01D9               	clrf	_mode
  1379                           
  1380                           ;main.c: 617: quit = 0;
  1381  06F5  1683               	bsf	3,5	;RP0=1, select bank1
  1382  06F6  1303               	bcf	3,6	;RP1=0, select bank1
  1383  06F7  01B9               	clrf	_quit^(0+128)
  1384                           
  1385                           ;main.c: 618: voltage = 0;
  1386  06F8  3000               	movlw	0
  1387  06F9  1283               	bcf	3,5	;RP0=0, select bank0
  1388  06FA  1303               	bcf	3,6	;RP1=0, select bank0
  1389  06FB  00D4               	movwf	_voltage
  1390  06FC  3000               	movlw	0
  1391  06FD  00D5               	movwf	_voltage+1
  1392  06FE  3000               	movlw	0
  1393  06FF  00D6               	movwf	_voltage+2
  1394                           
  1395                           ;main.c: 619: ADCvalue = 0;
  1396  0700  3000               	movlw	0
  1397  0701  00D1               	movwf	_ADCvalue
  1398  0702  3000               	movlw	0
  1399  0703  00D2               	movwf	_ADCvalue+1
  1400  0704  3000               	movlw	0
  1401  0705  00D3               	movwf	_ADCvalue+2
  1402                           
  1403                           ;main.c: 620: day_alarm = 2;
  1404  0706  3002               	movlw	2
  1405  0707  1683               	bsf	3,5	;RP0=1, select bank1
  1406  0708  1303               	bcf	3,6	;RP1=0, select bank1
  1407  0709  00AE               	movwf	??_main^(0+128)
  1408  070A  082E               	movf	??_main^(0+128),w
  1409  070B  00BE               	movwf	_day_alarm^(0+128)
  1410                           
  1411                           ;main.c: 621: hour_alarm = 00;
  1412  070C  1283               	bcf	3,5	;RP0=0, select bank0
  1413  070D  1303               	bcf	3,6	;RP1=0, select bank0
  1414  070E  01D8               	clrf	_hour_alarm
  1415                           
  1416                           ;main.c: 622: minute_alarm = 55;
  1417  070F  3037               	movlw	55
  1418  0710  1683               	bsf	3,5	;RP0=1, select bank1
  1419  0711  1303               	bcf	3,6	;RP1=0, select bank1
  1420  0712  00AE               	movwf	??_main^(0+128)
  1421  0713  082E               	movf	??_main^(0+128),w
  1422  0714  00BF               	movwf	_minute_alarm^(0+128)
  1423                           
  1424                           ;main.c: 624: OPTION_REGbits.nRBPU = 0;
  1425  0715  1381               	bcf	1,7	;volatile
  1426                           
  1427                           ;main.c: 625: WPUBbits.WPUB = 0xFF;
  1428  0716  30FF               	movlw	255
  1429  0717  0095               	movwf	21	;volatile
  1430                           
  1431                           ;main.c: 626: INTCONbits.GIE = 1;
  1432  0718  178B               	bsf	11,7	;volatile
  1433                           
  1434                           ;main.c: 627: INTCONbits.RBIE = 1;
  1435  0719  158B               	bsf	11,3	;volatile
  1436                           
  1437                           ;main.c: 628: IOCBbits.IOCB = 0xFF;
  1438  071A  30FF               	movlw	255
  1439  071B  0096               	movwf	22	;volatile
  1440                           
  1441                           ;main.c: 629: INTCONbits.RBIF = 0;
  1442  071C  100B               	bcf	11,0	;volatile
  1443                           
  1444                           ;main.c: 631: OPTION_REGbits.T0CS = 0;
  1445  071D  1281               	bcf	1,5	;volatile
  1446                           
  1447                           ;main.c: 632: INTCONbits.T0IF = 0;
  1448  071E  110B               	bcf	11,2	;volatile
  1449                           
  1450                           ;main.c: 633: PSA = 0;
  1451  071F  1181               	bcf	1,3	;volatile
  1452                           
  1453                           ;main.c: 634: OPTION_REGbits.PS = 0b010;
  1454  0720  0801               	movf	1,w	;volatile
  1455  0721  39F8               	andlw	-8
  1456  0722  3802               	iorlw	2
  1457  0723  0081               	movwf	1	;volatile
  1458                           
  1459                           ;main.c: 635: INTCONbits.T0IE = 1;
  1460  0724  168B               	bsf	11,5	;volatile
  1461                           
  1462                           ;main.c: 636: TMR0 = 6;
  1463  0725  3006               	movlw	6
  1464  0726  1283               	bcf	3,5	;RP0=0, select bank0
  1465  0727  1303               	bcf	3,6	;RP1=0, select bank0
  1466  0728  0081               	movwf	1	;volatile
  1467                           
  1468                           ;main.c: 638: i2c_Init();
  1469  0729  120A  158A  2000  120A  118A  	fcall	_i2c_Init
  1470                           
  1471                           ;main.c: 639: Lcd_Init();
  1472  072E  120A  158A  2253  120A  118A  	fcall	_Lcd_Init
  1473                           
  1474                           ;main.c: 641: Read_FullTime();
  1475  0733  120A  158A  2069  120A  118A  	fcall	_Read_FullTime
  1476                           
  1477                           ;main.c: 643: Lcd_Set_Cursor(1, 1);
  1478  0738  1683               	bsf	3,5	;RP0=1, select bank1
  1479  0739  1303               	bcf	3,6	;RP1=0, select bank1
  1480  073A  01A3               	clrf	Lcd_Set_Cursor@b^(0+128)
  1481  073B  0AA3               	incf	Lcd_Set_Cursor@b^(0+128),f
  1482  073C  3001               	movlw	1
  1483  073D  120A  158A  2102  120A  118A  	fcall	_Lcd_Set_Cursor
  1484                           
  1485                           ;main.c: 644: Lcd_Write_String("     HELLO      ");
  1486  0742  3034               	movlw	(low ((STR_60-__stringbase)| (0+32768)))& (0+255)
  1487  0743  160A  118A  261B  120A  118A  	fcall	_Lcd_Write_String
  1488                           
  1489                           ;main.c: 645: Lcd_Set_Cursor(2, 1);
  1490  0748  1683               	bsf	3,5	;RP0=1, select bank1
  1491  0749  1303               	bcf	3,6	;RP1=0, select bank1
  1492  074A  01A3               	clrf	Lcd_Set_Cursor@b^(0+128)
  1493  074B  0AA3               	incf	Lcd_Set_Cursor@b^(0+128),f
  1494  074C  3002               	movlw	2
  1495  074D  120A  158A  2102  120A  118A  	fcall	_Lcd_Set_Cursor
  1496                           
  1497                           ;main.c: 646: Lcd_Write_String(" GROUP 01 VXL!  ");
  1498  0752  3078               	movlw	(low ((STR_61-__stringbase)| (0+32768)))& (0+255)
  1499  0753  160A  118A  261B  120A  118A  	fcall	_Lcd_Write_String
  1500                           
  1501                           ;main.c: 647: _delay((unsigned long)((1000)*(1000000/4000.0)));
  1502  0758  3002               	movlw	2
  1503  0759  1683               	bsf	3,5	;RP0=1, select bank1
  1504  075A  1303               	bcf	3,6	;RP1=0, select bank1
  1505  075B  00B0               	movwf	(??_main^(0+128)+2)
  1506  075C  3045               	movlw	69
  1507  075D  00AF               	movwf	(??_main^(0+128)+1)
  1508  075E  30A9               	movlw	169
  1509  075F  00AE               	movwf	??_main^(0+128)
  1510  0760                     u5107:	
  1511  0760  0BAE               	decfsz	??_main^(0+128),f
  1512  0761  2F60               	goto	u5107
  1513  0762  0BAF               	decfsz	(??_main^(0+128)+1),f
  1514  0763  2F60               	goto	u5107
  1515  0764  0BB0               	decfsz	(??_main^(0+128)+2),f
  1516  0765  2F60               	goto	u5107
  1517  0766  2F67               	nop2
  1518  0767                     l3816:	
  1519                           ;main.c: 650: while (1) {
  1520                           
  1521                           
  1522                           ;main.c: 652: _delay((unsigned long)((20)*(1000000/4000.0)));
  1523  0767  3007               	movlw	7
  1524  0768  1683               	bsf	3,5	;RP0=1, select bank1
  1525  0769  1303               	bcf	3,6	;RP1=0, select bank1
  1526  076A  00AF               	movwf	(??_main^(0+128)+1)
  1527  076B  307D               	movlw	125
  1528  076C  00AE               	movwf	??_main^(0+128)
  1529  076D                     u5117:	
  1530  076D  0BAE               	decfsz	??_main^(0+128),f
  1531  076E  2F6D               	goto	u5117
  1532  076F  0BAF               	decfsz	(??_main^(0+128)+1),f
  1533  0770  2F6D               	goto	u5117
  1534                           
  1535                           ;main.c: 653: if (minute == minute_alarm && hour == hour_alarm && alarm)
  1536  0771  1683               	bsf	3,5	;RP0=1, select bank1
  1537  0772  1303               	bcf	3,6	;RP1=0, select bank1
  1538  0773  0837               	movf	_minute^(0+128),w
  1539  0774  063F               	xorwf	_minute_alarm^(0+128),w
  1540  0775  1D03               	skipz
  1541  0776  2F86               	goto	l412
  1542  0777  0834               	movf	_hour^(0+128),w
  1543  0778  1283               	bcf	3,5	;RP0=0, select bank0
  1544  0779  1303               	bcf	3,6	;RP1=0, select bank0
  1545  077A  0658               	xorwf	_hour_alarm,w
  1546  077B  1D03               	skipz
  1547  077C  2F86               	goto	l412
  1548  077D  1683               	bsf	3,5	;RP0=1, select bank1
  1549  077E  1303               	bcf	3,6	;RP1=0, select bank1
  1550  077F  0831               	movf	_alarm^(0+128),w
  1551  0780  1903               	btfsc	3,2
  1552  0781  2F86               	goto	l412
  1553                           
  1554                           ;main.c: 654: RD0 = 1;
  1555  0782  1283               	bcf	3,5	;RP0=0, select bank0
  1556  0783  1303               	bcf	3,6	;RP1=0, select bank0
  1557  0784  1408               	bsf	8,0	;volatile
  1558  0785  2F88               	goto	l3826
  1559  0786                     l412:	
  1560                           
  1561                           ;main.c: 655: else RD0 = 0;
  1562  0786  1283               	bcf	3,5	;RP0=0, select bank0
  1563  0787  1008               	bcf	8,0	;volatile
  1564  0788                     l3826:	
  1565                           
  1566                           ;main.c: 656: if (mode == 1) {
  1567  0788  0359               	decf	_mode,w
  1568  0789  1D03               	btfss	3,2
  1569  078A  2F91               	goto	l3830
  1570                           
  1571                           ;main.c: 657: Display_SetTime();
  1572  078B  120A  118A  220E  120A  118A  	fcall	_Display_SetTime
  1573                           
  1574                           ;main.c: 658: } else if (mode == 2) {
  1575  0790  2F67               	goto	l3816
  1576  0791                     l3830:	
  1577  0791  3002               	movlw	2
  1578  0792  1283               	bcf	3,5	;RP0=0, select bank0
  1579  0793  1303               	bcf	3,6	;RP1=0, select bank0
  1580  0794  0659               	xorwf	_mode,w
  1581  0795  1D03               	btfss	3,2
  1582  0796  2F9D               	goto	l3834
  1583                           
  1584                           ;main.c: 659: Display_Alarm();
  1585  0797  120A  118A  25F4  120A  118A  	fcall	_Display_Alarm
  1586                           
  1587                           ;main.c: 660: } else Display_Time();
  1588  079C  2F67               	goto	l3816
  1589  079D                     l3834:	
  1590  079D  120A  118A  23DB  120A  118A  	fcall	_Display_Time
  1591  07A2  2F67               	goto	l3816
  1592  07A3                     __end_of_main:	
  1593                           ;main.c: 661: }
  1594                           ;main.c: 662: return (0);
  1595                           ;	Return value of _main is never used
  1596                           
  1597                           
  1598                           	psect	text1
  1599  0800                     __ptext1:	
  1600 ;; *************** function _i2c_Init *****************
  1601 ;; Defined at:
  1602 ;;		line 5 in file "i2c.c"
  1603 ;; Parameters:    Size  Location     Type
  1604 ;;		None
  1605 ;; Auto vars:     Size  Location     Type
  1606 ;;		None
  1607 ;; Return value:  Size  Location     Type
  1608 ;;		None               void
  1609 ;; Registers used:
  1610 ;;		wreg
  1611 ;; Tracked objects:
  1612 ;;		On entry : 0/0
  1613 ;;		On exit  : 0/0
  1614 ;;		Unchanged: 0/0
  1615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1616 ;;      Params:         0       0       0       0       0
  1617 ;;      Locals:         0       0       0       0       0
  1618 ;;      Temps:          0       0       0       0       0
  1619 ;;      Totals:         0       0       0       0       0
  1620 ;;Total ram usage:        0 bytes
  1621 ;; Hardware stack levels used:    1
  1622 ;; Hardware stack levels required when called:    4
  1623 ;; This function calls:
  1624 ;;		Nothing
  1625 ;; This function is called by:
  1626 ;;		_main
  1627 ;; This function uses a non-reentrant model
  1628 ;;
  1629                           
  1630                           
  1631                           ;psect for function _i2c_Init
  1632  0800                     _i2c_Init:	
  1633                           
  1634                           ;i2c.c: 6: SSPCON = 0x28;
  1635                           
  1636                           ;incstack = 0
  1637                           ; Regs used in _i2c_Init: [wreg]
  1638  0800  3028               	movlw	40
  1639  0801  1283               	bcf	3,5	;RP0=0, select bank0
  1640  0802  1303               	bcf	3,6	;RP1=0, select bank0
  1641  0803  0094               	movwf	20	;volatile
  1642                           
  1643                           ;i2c.c: 7: SSPADD = 9;
  1644  0804  3009               	movlw	9
  1645  0805  1683               	bsf	3,5	;RP0=1, select bank1
  1646  0806  1303               	bcf	3,6	;RP1=0, select bank1
  1647  0807  0093               	movwf	19	;volatile
  1648                           
  1649                           ;i2c.c: 8: SMP = 1;
  1650  0808  1794               	bsf	20,7	;volatile
  1651  0809  0008               	return
  1652  080A                     __end_of_i2c_Init:	
  1653                           
  1654                           	psect	text2
  1655  0869                     __ptext2:	
  1656 ;; *************** function _Read_FullTime *****************
  1657 ;; Defined at:
  1658 ;;		line 108 in file "main.c"
  1659 ;; Parameters:    Size  Location     Type
  1660 ;;		None
  1661 ;; Auto vars:     Size  Location     Type
  1662 ;;		None
  1663 ;; Return value:  Size  Location     Type
  1664 ;;		None               void
  1665 ;; Registers used:
  1666 ;;		wreg, status,2, status,0, pclath, cstack
  1667 ;; Tracked objects:
  1668 ;;		On entry : 0/0
  1669 ;;		On exit  : 0/0
  1670 ;;		Unchanged: 0/0
  1671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1672 ;;      Params:         0       0       0       0       0
  1673 ;;      Locals:         0       0       0       0       0
  1674 ;;      Temps:          0       0       1       0       0
  1675 ;;      Totals:         0       0       1       0       0
  1676 ;;Total ram usage:        1 bytes
  1677 ;; Hardware stack levels used:    1
  1678 ;; Hardware stack levels required when called:    6
  1679 ;; This function calls:
  1680 ;;		_DS1307_Read
  1681 ;; This function is called by:
  1682 ;;		_main
  1683 ;; This function uses a non-reentrant model
  1684 ;;
  1685                           
  1686                           
  1687                           ;psect for function _Read_FullTime
  1688  0869                     _Read_FullTime:	
  1689                           
  1690                           ;main.c: 109: second = DS1307_Read(0x00);
  1691                           
  1692                           ;incstack = 0
  1693                           ; Regs used in _Read_FullTime: [wreg+status,2+status,0+pclath+cstack]
  1694  0869  3000               	movlw	0
  1695  086A  120A  158A  2154  120A  158A  	fcall	_DS1307_Read
  1696  086F  1683               	bsf	3,5	;RP0=1, select bank1
  1697  0870  1303               	bcf	3,6	;RP1=0, select bank1
  1698  0871  00AB               	movwf	??_Read_FullTime^(0+128)
  1699  0872  082B               	movf	??_Read_FullTime^(0+128),w
  1700  0873  00BA               	movwf	_second^(0+128)
  1701                           
  1702                           ;main.c: 110: minute = DS1307_Read(0x01);
  1703  0874  3001               	movlw	1
  1704  0875  120A  158A  2154  120A  158A  	fcall	_DS1307_Read
  1705  087A  1683               	bsf	3,5	;RP0=1, select bank1
  1706  087B  1303               	bcf	3,6	;RP1=0, select bank1
  1707  087C  00AB               	movwf	??_Read_FullTime^(0+128)
  1708  087D  082B               	movf	??_Read_FullTime^(0+128),w
  1709  087E  00B7               	movwf	_minute^(0+128)
  1710                           
  1711                           ;main.c: 111: hour = DS1307_Read(0x02);
  1712  087F  3002               	movlw	2
  1713  0880  120A  158A  2154  120A  158A  	fcall	_DS1307_Read
  1714  0885  1683               	bsf	3,5	;RP0=1, select bank1
  1715  0886  1303               	bcf	3,6	;RP1=0, select bank1
  1716  0887  00AB               	movwf	??_Read_FullTime^(0+128)
  1717  0888  082B               	movf	??_Read_FullTime^(0+128),w
  1718  0889  00B4               	movwf	_hour^(0+128)
  1719                           
  1720                           ;main.c: 112: day = DS1307_Read(0x03);
  1721  088A  3003               	movlw	3
  1722  088B  120A  158A  2154  120A  158A  	fcall	_DS1307_Read
  1723  0890  1683               	bsf	3,5	;RP0=1, select bank1
  1724  0891  1303               	bcf	3,6	;RP1=0, select bank1
  1725  0892  00AB               	movwf	??_Read_FullTime^(0+128)
  1726  0893  082B               	movf	??_Read_FullTime^(0+128),w
  1727  0894  00B3               	movwf	_day^(0+128)
  1728                           
  1729                           ;main.c: 113: date = DS1307_Read(0x04);
  1730  0895  3004               	movlw	4
  1731  0896  120A  158A  2154  120A  158A  	fcall	_DS1307_Read
  1732  089B  1683               	bsf	3,5	;RP0=1, select bank1
  1733  089C  1303               	bcf	3,6	;RP1=0, select bank1
  1734  089D  00AB               	movwf	??_Read_FullTime^(0+128)
  1735  089E  082B               	movf	??_Read_FullTime^(0+128),w
  1736  089F  00B2               	movwf	_date^(0+128)
  1737                           
  1738                           ;main.c: 114: month = DS1307_Read(0x05);
  1739  08A0  3005               	movlw	5
  1740  08A1  120A  158A  2154  120A  158A  	fcall	_DS1307_Read
  1741  08A6  1683               	bsf	3,5	;RP0=1, select bank1
  1742  08A7  1303               	bcf	3,6	;RP1=0, select bank1
  1743  08A8  00AB               	movwf	??_Read_FullTime^(0+128)
  1744  08A9  082B               	movf	??_Read_FullTime^(0+128),w
  1745  08AA  00B8               	movwf	_month^(0+128)
  1746                           
  1747                           ;main.c: 115: year = DS1307_Read(0x06);
  1748  08AB  3006               	movlw	6
  1749  08AC  120A  158A  2154   	fcall	_DS1307_Read
  1750  08AF  1683               	bsf	3,5	;RP0=1, select bank1
  1751  08B0  1303               	bcf	3,6	;RP1=0, select bank1
  1752  08B1  00AB               	movwf	??_Read_FullTime^(0+128)
  1753  08B2  082B               	movf	??_Read_FullTime^(0+128),w
  1754  08B3  00BD               	movwf	_year^(0+128)
  1755  08B4  0008               	return
  1756  08B5                     __end_of_Read_FullTime:	
  1757                           
  1758                           	psect	text3
  1759  0954                     __ptext3:	
  1760 ;; *************** function _DS1307_Read *****************
  1761 ;; Defined at:
  1762 ;;		line 70 in file "i2c.c"
  1763 ;; Parameters:    Size  Location     Type
  1764 ;;  add             1    wreg     unsigned char 
  1765 ;; Auto vars:     Size  Location     Type
  1766 ;;  add             1    8[BANK1 ] unsigned char 
  1767 ;;  data            1   10[BANK1 ] unsigned char 
  1768 ;;  temp            1    9[BANK1 ] unsigned char 
  1769 ;; Return value:  Size  Location     Type
  1770 ;;                  1    wreg      unsigned char 
  1771 ;; Registers used:
  1772 ;;		wreg, status,2, status,0, pclath, cstack
  1773 ;; Tracked objects:
  1774 ;;		On entry : 0/0
  1775 ;;		On exit  : 0/0
  1776 ;;		Unchanged: 0/0
  1777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1778 ;;      Params:         0       0       0       0       0
  1779 ;;      Locals:         0       0       3       0       0
  1780 ;;      Temps:          0       0       4       0       0
  1781 ;;      Totals:         0       0       7       0       0
  1782 ;;Total ram usage:        7 bytes
  1783 ;; Hardware stack levels used:    1
  1784 ;; Hardware stack levels required when called:    5
  1785 ;; This function calls:
  1786 ;;		___bmul
  1787 ;;		_i2c_Nack
  1788 ;;		_i2c_Read
  1789 ;;		_i2c_Restart
  1790 ;;		_i2c_Start
  1791 ;;		_i2c_Stop
  1792 ;;		_i2c_Write
  1793 ;; This function is called by:
  1794 ;;		_Read_FullTime
  1795 ;; This function uses a non-reentrant model
  1796 ;;
  1797                           
  1798                           
  1799                           ;psect for function _DS1307_Read
  1800  0954                     _DS1307_Read:	
  1801                           
  1802                           ;incstack = 0
  1803                           ; Regs used in _DS1307_Read: [wreg+status,2+status,0+pclath+cstack]
  1804                           ;DS1307_Read@add stored from wreg
  1805  0954  1683               	bsf	3,5	;RP0=1, select bank1
  1806  0955  1303               	bcf	3,6	;RP1=0, select bank1
  1807  0956  00A8               	movwf	DS1307_Read@add^(0+128)
  1808                           
  1809                           ;i2c.c: 71: unsigned char data;
  1810                           ;i2c.c: 72: i2c_Start();
  1811  0957  160A  118A  2564  120A  158A  	fcall	_i2c_Start
  1812                           
  1813                           ;i2c.c: 73: i2c_Write(0xD0);
  1814  095C  30D0               	movlw	208
  1815  095D  160A  118A  25A1  120A  158A  	fcall	_i2c_Write
  1816                           
  1817                           ;i2c.c: 74: i2c_Write(add);
  1818  0962  1683               	bsf	3,5	;RP0=1, select bank1
  1819  0963  1303               	bcf	3,6	;RP1=0, select bank1
  1820  0964  0828               	movf	DS1307_Read@add^(0+128),w
  1821  0965  160A  118A  25A1  120A  158A  	fcall	_i2c_Write
  1822                           
  1823                           ;i2c.c: 76: i2c_Restart();
  1824  096A  160A  118A  255C  120A  158A  	fcall	_i2c_Restart
  1825                           
  1826                           ;i2c.c: 77: i2c_Write(0xD1);
  1827  096F  30D1               	movlw	209
  1828  0970  160A  118A  25A1  120A  158A  	fcall	_i2c_Write
  1829                           
  1830                           ;i2c.c: 78: data = i2c_Read();
  1831  0975  160A  118A  2598  120A  158A  	fcall	_i2c_Read
  1832  097A  1683               	bsf	3,5	;RP0=1, select bank1
  1833  097B  1303               	bcf	3,6	;RP1=0, select bank1
  1834  097C  00A4               	movwf	??_DS1307_Read^(0+128)
  1835  097D  0824               	movf	??_DS1307_Read^(0+128),w
  1836  097E  00AA               	movwf	DS1307_Read@data^(0+128)
  1837                           
  1838                           ;i2c.c: 79: i2c_Nack();
  1839  097F  160A  118A  258F  120A  158A  	fcall	_i2c_Nack
  1840                           
  1841                           ;i2c.c: 80: i2c_Stop();
  1842  0984  160A  118A  256C  120A  158A  	fcall	_i2c_Stop
  1843                           
  1844                           ;i2c.c: 81: unsigned char temp = (data >> 4) * 10 + (data & 0x0f);
  1845  0989  300F               	movlw	15
  1846  098A  1683               	bsf	3,5	;RP0=1, select bank1
  1847  098B  1303               	bcf	3,6	;RP1=0, select bank1
  1848  098C  052A               	andwf	DS1307_Read@data^(0+128),w
  1849  098D  00A4               	movwf	??_DS1307_Read^(0+128)
  1850  098E  300A               	movlw	10
  1851  098F  00A5               	movwf	(??_DS1307_Read+1)^(0+128)
  1852  0990  0825               	movf	(??_DS1307_Read+1)^(0+128),w
  1853  0991  00A0               	movwf	___bmul@multiplicand^(0+128)
  1854  0992  082A               	movf	DS1307_Read@data^(0+128),w
  1855  0993  00A6               	movwf	(??_DS1307_Read+2)^(0+128)
  1856  0994  3004               	movlw	4
  1857  0995                     u3455:	
  1858  0995  1003               	clrc
  1859  0996  0CA6               	rrf	(??_DS1307_Read+2)^(0+128),f
  1860  0997  3EFF               	addlw	-1
  1861  0998  1D03               	skipz
  1862  0999  2995               	goto	u3455
  1863  099A  0826               	movf	(??_DS1307_Read+2)^(0+128),w
  1864  099B  120A  158A  200A   	fcall	___bmul
  1865  099E  1683               	bsf	3,5	;RP0=1, select bank1
  1866  099F  1303               	bcf	3,6	;RP1=0, select bank1
  1867  09A0  0724               	addwf	??_DS1307_Read^(0+128),w
  1868  09A1  00A7               	movwf	(??_DS1307_Read+3)^(0+128)
  1869  09A2  0827               	movf	(??_DS1307_Read+3)^(0+128),w
  1870  09A3  00A9               	movwf	DS1307_Read@temp^(0+128)
  1871                           
  1872                           ;i2c.c: 82: return temp;
  1873  09A4  0829               	movf	DS1307_Read@temp^(0+128),w
  1874  09A5  0008               	return
  1875  09A6                     __end_of_DS1307_Read:	
  1876                           
  1877                           	psect	text4
  1878  15A1                     __ptext4:	
  1879 ;; *************** function _i2c_Write *****************
  1880 ;; Defined at:
  1881 ;;		line 43 in file "i2c.c"
  1882 ;; Parameters:    Size  Location     Type
  1883 ;;  data            1    wreg     unsigned char 
  1884 ;; Auto vars:     Size  Location     Type
  1885 ;;  data            1    0[BANK1 ] unsigned char 
  1886 ;; Return value:  Size  Location     Type
  1887 ;;		None               void
  1888 ;; Registers used:
  1889 ;;		wreg
  1890 ;; Tracked objects:
  1891 ;;		On entry : 0/0
  1892 ;;		On exit  : 0/0
  1893 ;;		Unchanged: 0/0
  1894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1895 ;;      Params:         0       0       0       0       0
  1896 ;;      Locals:         0       0       1       0       0
  1897 ;;      Temps:          0       0       0       0       0
  1898 ;;      Totals:         0       0       1       0       0
  1899 ;;Total ram usage:        1 bytes
  1900 ;; Hardware stack levels used:    1
  1901 ;; Hardware stack levels required when called:    4
  1902 ;; This function calls:
  1903 ;;		Nothing
  1904 ;; This function is called by:
  1905 ;;		_DS1307_Read
  1906 ;; This function uses a non-reentrant model
  1907 ;;
  1908                           
  1909                           
  1910                           ;psect for function _i2c_Write
  1911  15A1                     _i2c_Write:	
  1912                           
  1913                           ;incstack = 0
  1914                           ; Regs used in _i2c_Write: [wreg]
  1915                           ;i2c_Write@data stored from wreg
  1916  15A1  1683               	bsf	3,5	;RP0=1, select bank1
  1917  15A2  1303               	bcf	3,6	;RP1=0, select bank1
  1918  15A3  00A0               	movwf	i2c_Write@data^(0+128)
  1919                           
  1920                           ;i2c.c: 44: SSPBUF = data;
  1921  15A4  0820               	movf	i2c_Write@data^(0+128),w
  1922  15A5  1283               	bcf	3,5	;RP0=0, select bank0
  1923  15A6  1303               	bcf	3,6	;RP1=0, select bank0
  1924  15A7  0093               	movwf	19	;volatile
  1925  15A8                     l533:	
  1926                           ;i2c.c: 45: while(SSPIF == 0);
  1927                           
  1928  15A8  1D8C               	btfss	12,3	;volatile
  1929  15A9  2DA8               	goto	l533
  1930                           
  1931                           ;i2c.c: 46: SSPIF = 0;
  1932  15AA  118C               	bcf	12,3	;volatile
  1933  15AB  0008               	return
  1934  15AC                     __end_of_i2c_Write:	
  1935                           
  1936                           	psect	text5
  1937  156C                     __ptext5:	
  1938 ;; *************** function _i2c_Stop *****************
  1939 ;; Defined at:
  1940 ;;		line 23 in file "i2c.c"
  1941 ;; Parameters:    Size  Location     Type
  1942 ;;		None
  1943 ;; Auto vars:     Size  Location     Type
  1944 ;;		None
  1945 ;; Return value:  Size  Location     Type
  1946 ;;		None               void
  1947 ;; Registers used:
  1948 ;;		None
  1949 ;; Tracked objects:
  1950 ;;		On entry : 0/0
  1951 ;;		On exit  : 0/0
  1952 ;;		Unchanged: 0/0
  1953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1954 ;;      Params:         0       0       0       0       0
  1955 ;;      Locals:         0       0       0       0       0
  1956 ;;      Temps:          0       0       0       0       0
  1957 ;;      Totals:         0       0       0       0       0
  1958 ;;Total ram usage:        0 bytes
  1959 ;; Hardware stack levels used:    1
  1960 ;; Hardware stack levels required when called:    4
  1961 ;; This function calls:
  1962 ;;		Nothing
  1963 ;; This function is called by:
  1964 ;;		_DS1307_Read
  1965 ;; This function uses a non-reentrant model
  1966 ;;
  1967                           
  1968                           
  1969                           ;psect for function _i2c_Stop
  1970  156C                     _i2c_Stop:	
  1971                           
  1972                           ;i2c.c: 24: PEN = 1;
  1973                           
  1974                           ;incstack = 0
  1975                           ; Regs used in _i2c_Stop: []
  1976  156C  1683               	bsf	3,5	;RP0=1, select bank1
  1977  156D  1303               	bcf	3,6	;RP1=0, select bank1
  1978  156E  1511               	bsf	17,2	;volatile
  1979  156F                     l515:	
  1980                           ;i2c.c: 25: while(SSPIF == 0);
  1981                           
  1982  156F  1283               	bcf	3,5	;RP0=0, select bank0
  1983  1570  1D8C               	btfss	12,3	;volatile
  1984  1571  2D6F               	goto	l515
  1985                           
  1986                           ;i2c.c: 26: SSPIF = 0;
  1987  1572  118C               	bcf	12,3	;volatile
  1988  1573  0008               	return
  1989  1574                     __end_of_i2c_Stop:	
  1990                           
  1991                           	psect	text6
  1992  1564                     __ptext6:	
  1993 ;; *************** function _i2c_Start *****************
  1994 ;; Defined at:
  1995 ;;		line 11 in file "i2c.c"
  1996 ;; Parameters:    Size  Location     Type
  1997 ;;		None
  1998 ;; Auto vars:     Size  Location     Type
  1999 ;;		None
  2000 ;; Return value:  Size  Location     Type
  2001 ;;		None               void
  2002 ;; Registers used:
  2003 ;;		None
  2004 ;; Tracked objects:
  2005 ;;		On entry : 0/0
  2006 ;;		On exit  : 0/0
  2007 ;;		Unchanged: 0/0
  2008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2009 ;;      Params:         0       0       0       0       0
  2010 ;;      Locals:         0       0       0       0       0
  2011 ;;      Temps:          0       0       0       0       0
  2012 ;;      Totals:         0       0       0       0       0
  2013 ;;Total ram usage:        0 bytes
  2014 ;; Hardware stack levels used:    1
  2015 ;; Hardware stack levels required when called:    4
  2016 ;; This function calls:
  2017 ;;		Nothing
  2018 ;; This function is called by:
  2019 ;;		_DS1307_Read
  2020 ;; This function uses a non-reentrant model
  2021 ;;
  2022                           
  2023                           
  2024                           ;psect for function _i2c_Start
  2025  1564                     _i2c_Start:	
  2026                           
  2027                           ;i2c.c: 12: SEN = 1;
  2028                           
  2029                           ;incstack = 0
  2030                           ; Regs used in _i2c_Start: []
  2031  1564  1683               	bsf	3,5	;RP0=1, select bank1
  2032  1565  1303               	bcf	3,6	;RP1=0, select bank1
  2033  1566  1411               	bsf	17,0	;volatile
  2034  1567                     l503:	
  2035                           ;i2c.c: 13: while(SSPIF == 0);
  2036                           
  2037  1567  1283               	bcf	3,5	;RP0=0, select bank0
  2038  1568  1D8C               	btfss	12,3	;volatile
  2039  1569  2D67               	goto	l503
  2040                           
  2041                           ;i2c.c: 14: SSPIF = 0;
  2042  156A  118C               	bcf	12,3	;volatile
  2043  156B  0008               	return
  2044  156C                     __end_of_i2c_Start:	
  2045                           
  2046                           	psect	text7
  2047  155C                     __ptext7:	
  2048 ;; *************** function _i2c_Restart *****************
  2049 ;; Defined at:
  2050 ;;		line 17 in file "i2c.c"
  2051 ;; Parameters:    Size  Location     Type
  2052 ;;		None
  2053 ;; Auto vars:     Size  Location     Type
  2054 ;;		None
  2055 ;; Return value:  Size  Location     Type
  2056 ;;		None               void
  2057 ;; Registers used:
  2058 ;;		None
  2059 ;; Tracked objects:
  2060 ;;		On entry : 0/0
  2061 ;;		On exit  : 0/0
  2062 ;;		Unchanged: 0/0
  2063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2064 ;;      Params:         0       0       0       0       0
  2065 ;;      Locals:         0       0       0       0       0
  2066 ;;      Temps:          0       0       0       0       0
  2067 ;;      Totals:         0       0       0       0       0
  2068 ;;Total ram usage:        0 bytes
  2069 ;; Hardware stack levels used:    1
  2070 ;; Hardware stack levels required when called:    4
  2071 ;; This function calls:
  2072 ;;		Nothing
  2073 ;; This function is called by:
  2074 ;;		_DS1307_Read
  2075 ;; This function uses a non-reentrant model
  2076 ;;
  2077                           
  2078                           
  2079                           ;psect for function _i2c_Restart
  2080  155C                     _i2c_Restart:	
  2081                           
  2082                           ;i2c.c: 18: RSEN = 1;
  2083                           
  2084                           ;incstack = 0
  2085                           ; Regs used in _i2c_Restart: []
  2086  155C  1683               	bsf	3,5	;RP0=1, select bank1
  2087  155D  1303               	bcf	3,6	;RP1=0, select bank1
  2088  155E  1491               	bsf	17,1	;volatile
  2089  155F                     l509:	
  2090                           ;i2c.c: 19: while(SSPIF == 0);
  2091                           
  2092  155F  1283               	bcf	3,5	;RP0=0, select bank0
  2093  1560  1D8C               	btfss	12,3	;volatile
  2094  1561  2D5F               	goto	l509
  2095                           
  2096                           ;i2c.c: 20: SSPIF = 0;
  2097  1562  118C               	bcf	12,3	;volatile
  2098  1563  0008               	return
  2099  1564                     __end_of_i2c_Restart:	
  2100                           
  2101                           	psect	text8
  2102  1598                     __ptext8:	
  2103 ;; *************** function _i2c_Read *****************
  2104 ;; Defined at:
  2105 ;;		line 49 in file "i2c.c"
  2106 ;; Parameters:    Size  Location     Type
  2107 ;;		None
  2108 ;; Auto vars:     Size  Location     Type
  2109 ;;		None
  2110 ;; Return value:  Size  Location     Type
  2111 ;;                  1    wreg      unsigned char 
  2112 ;; Registers used:
  2113 ;;		wreg
  2114 ;; Tracked objects:
  2115 ;;		On entry : 0/0
  2116 ;;		On exit  : 0/0
  2117 ;;		Unchanged: 0/0
  2118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2119 ;;      Params:         0       0       0       0       0
  2120 ;;      Locals:         0       0       0       0       0
  2121 ;;      Temps:          0       0       0       0       0
  2122 ;;      Totals:         0       0       0       0       0
  2123 ;;Total ram usage:        0 bytes
  2124 ;; Hardware stack levels used:    1
  2125 ;; Hardware stack levels required when called:    4
  2126 ;; This function calls:
  2127 ;;		Nothing
  2128 ;; This function is called by:
  2129 ;;		_DS1307_Read
  2130 ;; This function uses a non-reentrant model
  2131 ;;
  2132                           
  2133                           
  2134                           ;psect for function _i2c_Read
  2135  1598                     _i2c_Read:	
  2136                           
  2137                           ;i2c.c: 50: RCEN = 1;
  2138                           
  2139                           ;incstack = 0
  2140                           ; Regs used in _i2c_Read: [wreg]
  2141  1598  1683               	bsf	3,5	;RP0=1, select bank1
  2142  1599  1303               	bcf	3,6	;RP1=0, select bank1
  2143  159A  1591               	bsf	17,3	;volatile
  2144  159B                     l539:	
  2145                           ;i2c.c: 51: while(SSPIF == 0);
  2146                           
  2147  159B  1283               	bcf	3,5	;RP0=0, select bank0
  2148  159C  1D8C               	btfss	12,3	;volatile
  2149  159D  2D9B               	goto	l539
  2150                           
  2151                           ;i2c.c: 52: SSPIF = 0;
  2152  159E  118C               	bcf	12,3	;volatile
  2153                           
  2154                           ;i2c.c: 53: return SSPBUF;
  2155  159F  0813               	movf	19,w	;volatile
  2156  15A0  0008               	return
  2157  15A1                     __end_of_i2c_Read:	
  2158                           
  2159                           	psect	text9
  2160  158F                     __ptext9:	
  2161 ;; *************** function _i2c_Nack *****************
  2162 ;; Defined at:
  2163 ;;		line 36 in file "i2c.c"
  2164 ;; Parameters:    Size  Location     Type
  2165 ;;		None
  2166 ;; Auto vars:     Size  Location     Type
  2167 ;;		None
  2168 ;; Return value:  Size  Location     Type
  2169 ;;		None               void
  2170 ;; Registers used:
  2171 ;;		None
  2172 ;; Tracked objects:
  2173 ;;		On entry : 0/0
  2174 ;;		On exit  : 0/0
  2175 ;;		Unchanged: 0/0
  2176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2177 ;;      Params:         0       0       0       0       0
  2178 ;;      Locals:         0       0       0       0       0
  2179 ;;      Temps:          0       0       0       0       0
  2180 ;;      Totals:         0       0       0       0       0
  2181 ;;Total ram usage:        0 bytes
  2182 ;; Hardware stack levels used:    1
  2183 ;; Hardware stack levels required when called:    4
  2184 ;; This function calls:
  2185 ;;		Nothing
  2186 ;; This function is called by:
  2187 ;;		_DS1307_Read
  2188 ;; This function uses a non-reentrant model
  2189 ;;
  2190                           
  2191                           
  2192                           ;psect for function _i2c_Nack
  2193  158F                     _i2c_Nack:	
  2194                           
  2195                           ;i2c.c: 37: ACKDT = 1;
  2196                           
  2197                           ;incstack = 0
  2198                           ; Regs used in _i2c_Nack: []
  2199  158F  1683               	bsf	3,5	;RP0=1, select bank1
  2200  1590  1303               	bcf	3,6	;RP1=0, select bank1
  2201  1591  1691               	bsf	17,5	;volatile
  2202                           
  2203                           ;i2c.c: 38: ACKEN = 1;
  2204  1592  1611               	bsf	17,4	;volatile
  2205  1593                     l527:	
  2206                           ;i2c.c: 39: while(SSPIF == 0);
  2207                           
  2208  1593  1283               	bcf	3,5	;RP0=0, select bank0
  2209  1594  1D8C               	btfss	12,3	;volatile
  2210  1595  2D93               	goto	l527
  2211                           
  2212                           ;i2c.c: 40: SSPIF = 0;
  2213  1596  118C               	bcf	12,3	;volatile
  2214  1597  0008               	return
  2215  1598                     __end_of_i2c_Nack:	
  2216                           
  2217                           	psect	text10
  2218  080A                     __ptext10:	
  2219 ;; *************** function ___bmul *****************
  2220 ;; Defined at:
  2221 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\Umul8.c"
  2222 ;; Parameters:    Size  Location     Type
  2223 ;;  multiplier      1    wreg     unsigned char 
  2224 ;;  multiplicand    1    0[BANK1 ] unsigned char 
  2225 ;; Auto vars:     Size  Location     Type
  2226 ;;  multiplier      1    3[BANK1 ] unsigned char 
  2227 ;;  product         1    2[BANK1 ] unsigned char 
  2228 ;; Return value:  Size  Location     Type
  2229 ;;                  1    wreg      unsigned char 
  2230 ;; Registers used:
  2231 ;;		wreg, status,2, status,0
  2232 ;; Tracked objects:
  2233 ;;		On entry : 0/0
  2234 ;;		On exit  : 0/0
  2235 ;;		Unchanged: 0/0
  2236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2237 ;;      Params:         0       0       1       0       0
  2238 ;;      Locals:         0       0       2       0       0
  2239 ;;      Temps:          0       0       1       0       0
  2240 ;;      Totals:         0       0       4       0       0
  2241 ;;Total ram usage:        4 bytes
  2242 ;; Hardware stack levels used:    1
  2243 ;; Hardware stack levels required when called:    4
  2244 ;; This function calls:
  2245 ;;		Nothing
  2246 ;; This function is called by:
  2247 ;;		_DS1307_Read
  2248 ;; This function uses a non-reentrant model
  2249 ;;
  2250                           
  2251                           
  2252                           ;psect for function ___bmul
  2253  080A                     ___bmul:	
  2254                           
  2255                           ;incstack = 0
  2256                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2257                           ;___bmul@multiplier stored from wreg
  2258  080A  1683               	bsf	3,5	;RP0=1, select bank1
  2259  080B  1303               	bcf	3,6	;RP1=0, select bank1
  2260  080C  00A3               	movwf	___bmul@multiplier^(0+128)
  2261  080D  01A2               	clrf	___bmul@product^(0+128)
  2262  080E                     l2504:	
  2263  080E  1C23               	btfss	___bmul@multiplier^(0+128),0
  2264  080F  2814               	goto	l2508
  2265  0810  0820               	movf	___bmul@multiplicand^(0+128),w
  2266  0811  00A1               	movwf	??___bmul^(0+128)
  2267  0812  0821               	movf	??___bmul^(0+128),w
  2268  0813  07A2               	addwf	___bmul@product^(0+128),f
  2269  0814                     l2508:	
  2270  0814  1003               	clrc
  2271  0815  0DA0               	rlf	___bmul@multiplicand^(0+128),f
  2272  0816  1003               	clrc
  2273  0817  0CA3               	rrf	___bmul@multiplier^(0+128),f
  2274  0818  0823               	movf	___bmul@multiplier^(0+128),w
  2275  0819  1D03               	btfss	3,2
  2276  081A  280E               	goto	l2504
  2277  081B  0822               	movf	___bmul@product^(0+128),w
  2278  081C  0008               	return
  2279  081D                     __end_of___bmul:	
  2280                           
  2281                           	psect	text11
  2282  0A53                     __ptext11:	
  2283 ;; *************** function _Lcd_Init *****************
  2284 ;; Defined at:
  2285 ;;		line 70 in file "LCD.c"
  2286 ;; Parameters:    Size  Location     Type
  2287 ;;		None
  2288 ;; Auto vars:     Size  Location     Type
  2289 ;;		None
  2290 ;; Return value:  Size  Location     Type
  2291 ;;		None               void
  2292 ;; Registers used:
  2293 ;;		wreg, status,2, status,0, pclath, cstack
  2294 ;; Tracked objects:
  2295 ;;		On entry : 0/0
  2296 ;;		On exit  : 0/0
  2297 ;;		Unchanged: 0/0
  2298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2299 ;;      Params:         0       0       0       0       0
  2300 ;;      Locals:         0       0       0       0       0
  2301 ;;      Temps:          0       0       2       0       0
  2302 ;;      Totals:         0       0       2       0       0
  2303 ;;Total ram usage:        2 bytes
  2304 ;; Hardware stack levels used:    1
  2305 ;; Hardware stack levels required when called:    6
  2306 ;; This function calls:
  2307 ;;		_Lcd_Cmd
  2308 ;;		_Lcd_Port
  2309 ;; This function is called by:
  2310 ;;		_main
  2311 ;; This function uses a non-reentrant model
  2312 ;;
  2313                           
  2314                           
  2315                           ;psect for function _Lcd_Init
  2316  0A53                     _Lcd_Init:	
  2317                           
  2318                           ;LCD.c: 72: Lcd_Port(0x00);
  2319                           
  2320                           ;incstack = 0
  2321                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2322  0A53  3000               	movlw	0
  2323  0A54  160A  118A  2694  120A  158A  	fcall	_Lcd_Port
  2324                           
  2325                           ;LCD.c: 73: _delay((unsigned long)((20)*(1000000/4000.0)));
  2326  0A59  3007               	movlw	7
  2327  0A5A  1683               	bsf	3,5	;RP0=1, select bank1
  2328  0A5B  1303               	bcf	3,6	;RP1=0, select bank1
  2329  0A5C  00A4               	movwf	(??_Lcd_Init^(0+128)+1)
  2330  0A5D  307D               	movlw	125
  2331  0A5E  00A3               	movwf	??_Lcd_Init^(0+128)
  2332  0A5F                     u5127:	
  2333  0A5F  0BA3               	decfsz	??_Lcd_Init^(0+128),f
  2334  0A60  2A5F               	goto	u5127
  2335  0A61  0BA4               	decfsz	(??_Lcd_Init^(0+128)+1),f
  2336  0A62  2A5F               	goto	u5127
  2337                           
  2338                           ;LCD.c: 74: Lcd_Cmd(0x03);
  2339  0A63  3003               	movlw	3
  2340  0A64  160A  118A  25BD  120A  158A  	fcall	_Lcd_Cmd
  2341                           
  2342                           ;LCD.c: 75: _delay((unsigned long)((5)*(1000000/4000.0)));
  2343  0A69  30F9               	movlw	249
  2344  0A6A  1683               	bsf	3,5	;RP0=1, select bank1
  2345  0A6B  1303               	bcf	3,6	;RP1=0, select bank1
  2346  0A6C  00A3               	movwf	??_Lcd_Init^(0+128)
  2347  0A6D                     u5137:	
  2348  0A6D  2A6E               	nop2
  2349  0A6E  0BA3               	decfsz	??_Lcd_Init^(0+128),f
  2350  0A6F  2A6D               	goto	u5137
  2351  0A70  2A71               	nop2	;nop
  2352  0A71  2A72               	nop2	;nop
  2353                           
  2354                           ;LCD.c: 76: Lcd_Cmd(0x03);
  2355  0A72  3003               	movlw	3
  2356  0A73  160A  118A  25BD  120A  158A  	fcall	_Lcd_Cmd
  2357                           
  2358                           ;LCD.c: 77: _delay((unsigned long)((11)*(1000000/4000.0)));
  2359  0A78  3004               	movlw	4
  2360  0A79  1683               	bsf	3,5	;RP0=1, select bank1
  2361  0A7A  1303               	bcf	3,6	;RP1=0, select bank1
  2362  0A7B  00A4               	movwf	(??_Lcd_Init^(0+128)+1)
  2363  0A7C  3091               	movlw	145
  2364  0A7D  00A3               	movwf	??_Lcd_Init^(0+128)
  2365  0A7E                     u5147:	
  2366  0A7E  0BA3               	decfsz	??_Lcd_Init^(0+128),f
  2367  0A7F  2A7E               	goto	u5147
  2368  0A80  0BA4               	decfsz	(??_Lcd_Init^(0+128)+1),f
  2369  0A81  2A7E               	goto	u5147
  2370                           
  2371                           ;LCD.c: 78: Lcd_Cmd(0x03);
  2372  0A82  3003               	movlw	3
  2373  0A83  160A  118A  25BD  120A  158A  	fcall	_Lcd_Cmd
  2374                           
  2375                           ;LCD.c: 80: Lcd_Cmd(0x02);
  2376  0A88  3002               	movlw	2
  2377  0A89  160A  118A  25BD  120A  158A  	fcall	_Lcd_Cmd
  2378                           
  2379                           ;LCD.c: 81: Lcd_Cmd(0x02);
  2380  0A8E  3002               	movlw	2
  2381  0A8F  160A  118A  25BD  120A  158A  	fcall	_Lcd_Cmd
  2382                           
  2383                           ;LCD.c: 82: Lcd_Cmd(0x08);
  2384  0A94  3008               	movlw	8
  2385  0A95  160A  118A  25BD  120A  158A  	fcall	_Lcd_Cmd
  2386                           
  2387                           ;LCD.c: 83: Lcd_Cmd(0x00);
  2388  0A9A  3000               	movlw	0
  2389  0A9B  160A  118A  25BD  120A  158A  	fcall	_Lcd_Cmd
  2390                           
  2391                           ;LCD.c: 84: Lcd_Cmd(0x0C);
  2392  0AA0  300C               	movlw	12
  2393  0AA1  160A  118A  25BD  120A  158A  	fcall	_Lcd_Cmd
  2394                           
  2395                           ;LCD.c: 85: Lcd_Cmd(0x00);
  2396  0AA6  3000               	movlw	0
  2397  0AA7  160A  118A  25BD  120A  158A  	fcall	_Lcd_Cmd
  2398                           
  2399                           ;LCD.c: 86: Lcd_Cmd(0x06);
  2400  0AAC  3006               	movlw	6
  2401  0AAD  160A  118A  25BD   	fcall	_Lcd_Cmd
  2402  0AB0  0008               	return
  2403  0AB1                     __end_of_Lcd_Init:	
  2404                           
  2405                           	psect	text12
  2406  03DB                     __ptext12:	
  2407 ;; *************** function _Display_Time *****************
  2408 ;; Defined at:
  2409 ;;		line 297 in file "main.c"
  2410 ;; Parameters:    Size  Location     Type
  2411 ;;		None
  2412 ;; Auto vars:     Size  Location     Type
  2413 ;;		None
  2414 ;; Return value:  Size  Location     Type
  2415 ;;		None               void
  2416 ;; Registers used:
  2417 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2418 ;; Tracked objects:
  2419 ;;		On entry : 0/0
  2420 ;;		On exit  : 0/0
  2421 ;;		Unchanged: 0/0
  2422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2423 ;;      Params:         0       0       0       0       0
  2424 ;;      Locals:         0       0       0       0       0
  2425 ;;      Temps:          0       0       2       0       0
  2426 ;;      Totals:         0       0       2       0       0
  2427 ;;Total ram usage:        2 bytes
  2428 ;; Hardware stack levels used:    1
  2429 ;; Hardware stack levels required when called:    7
  2430 ;; This function calls:
  2431 ;;		_Display
  2432 ;;		_Display_Hour
  2433 ;;		_Lcd_Set_Cursor
  2434 ;;		_Lcd_Write_Char
  2435 ;;		_Lcd_Write_String
  2436 ;;		___awmod
  2437 ;; This function is called by:
  2438 ;;		_main
  2439 ;; This function uses a non-reentrant model
  2440 ;;
  2441                           
  2442                           
  2443                           ;psect for function _Display_Time
  2444  03DB                     _Display_Time:	
  2445                           
  2446                           ;main.c: 299: Lcd_Set_Cursor(1, 1);
  2447                           
  2448                           ;incstack = 0
  2449                           ; Regs used in _Display_Time: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2450  03DB  1683               	bsf	3,5	;RP0=1, select bank1
  2451  03DC  1303               	bcf	3,6	;RP1=0, select bank1
  2452  03DD  01A3               	clrf	Lcd_Set_Cursor@b^(0+128)
  2453  03DE  0AA3               	incf	Lcd_Set_Cursor@b^(0+128),f
  2454  03DF  3001               	movlw	1
  2455  03E0  120A  158A  2102  120A  118A  	fcall	_Lcd_Set_Cursor
  2456                           
  2457                           ;main.c: 301: if (alarm)
  2458  03E5  1683               	bsf	3,5	;RP0=1, select bank1
  2459  03E6  1303               	bcf	3,6	;RP1=0, select bank1
  2460  03E7  0831               	movf	_alarm^(0+128),w
  2461  03E8  1903               	btfsc	3,2
  2462  03E9  2BEC               	goto	l3370
  2463                           
  2464                           ;main.c: 302: Lcd_Write_String("ALM ");
  2465  03EA  30C1               	movlw	(low ((STR_17-__stringbase)| (0+32768)))& (0+255)
  2466  03EB  2BED               	goto	L1
  2467  03EC                     l3370:	
  2468                           
  2469                           ;main.c: 303: else Lcd_Write_String("    ");
  2470  03EC  300D               	movlw	(low (((STR_31+12)-__stringbase)| (0+32768)))& (0+255)
  2471  03ED                     L1:	
  2472  03ED  160A  118A  261B  120A  118A  	fcall	_Lcd_Write_String
  2473                           
  2474                           ;main.c: 306: Display_Hour();
  2475  03F2  160A  118A  25DB  120A  118A  	fcall	_Display_Hour
  2476                           
  2477                           ;main.c: 307: Display(hour_display);
  2478  03F7  1683               	bsf	3,5	;RP0=1, select bank1
  2479  03F8  1303               	bcf	3,6	;RP1=0, select bank1
  2480  03F9  0836               	movf	_hour_display^(0+128),w
  2481  03FA  160A  118A  26F6  120A  118A  	fcall	_Display
  2482                           
  2483                           ;main.c: 310: Lcd_Write_Char(':');
  2484  03FF  303A               	movlw	58
  2485  0400  160A  118A  272C  120A  118A  	fcall	_Lcd_Write_Char
  2486                           
  2487                           ;main.c: 311: Display(minute);
  2488  0405  1683               	bsf	3,5	;RP0=1, select bank1
  2489  0406  1303               	bcf	3,6	;RP1=0, select bank1
  2490  0407  0837               	movf	_minute^(0+128),w
  2491  0408  160A  118A  26F6  120A  118A  	fcall	_Display
  2492                           
  2493                           ;main.c: 314: Lcd_Write_Char(':');
  2494  040D  303A               	movlw	58
  2495  040E  160A  118A  272C  120A  118A  	fcall	_Lcd_Write_Char
  2496                           
  2497                           ;main.c: 315: Display(second);
  2498  0413  1683               	bsf	3,5	;RP0=1, select bank1
  2499  0414  1303               	bcf	3,6	;RP1=0, select bank1
  2500  0415  083A               	movf	_second^(0+128),w
  2501  0416  160A  118A  26F6  120A  118A  	fcall	_Display
  2502                           
  2503                           ;main.c: 317: Lcd_Set_Cursor(1, 13);
  2504  041B  300D               	movlw	13
  2505  041C  1683               	bsf	3,5	;RP0=1, select bank1
  2506  041D  1303               	bcf	3,6	;RP1=0, select bank1
  2507  041E  00AC               	movwf	??_Display_Time^(0+128)
  2508  041F  082C               	movf	??_Display_Time^(0+128),w
  2509  0420  00A3               	movwf	Lcd_Set_Cursor@b^(0+128)
  2510  0421  3001               	movlw	1
  2511  0422  120A  158A  2102  120A  118A  	fcall	_Lcd_Set_Cursor
  2512                           
  2513                           ;main.c: 319: if (hour < 40) Lcd_Write_String("   ");
  2514  0427  3028               	movlw	40
  2515  0428  1683               	bsf	3,5	;RP0=1, select bank1
  2516  0429  1303               	bcf	3,6	;RP1=0, select bank1
  2517  042A  0234               	subwf	_hour^(0+128),w
  2518  042B  1803               	skipnc
  2519  042C  2C2F               	goto	l3390
  2520  042D  300E               	movlw	(low (((STR_31+13)-__stringbase)| (0+32768)))& (0+255)
  2521  042E  2C38               	goto	L2
  2522  042F                     l3390:	
  2523                           
  2524                           ;main.c: 320: else if (hour < 60) Lcd_Write_String(" AM");
  2525  042F  303C               	movlw	60
  2526  0430  1683               	bsf	3,5	;RP0=1, select bank1
  2527  0431  1303               	bcf	3,6	;RP1=0, select bank1
  2528  0432  0234               	subwf	_hour^(0+128),w
  2529  0433  1803               	skipnc
  2530  0434  2C37               	goto	l3394
  2531  0435  30CE               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  2532  0436  2C38               	goto	L2
  2533  0437                     l3394:	
  2534                           
  2535                           ;main.c: 321: else Lcd_Write_String(" PM");
  2536  0437  30D2               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  2537  0438                     L2:	
  2538  0438  160A  118A  261B  120A  118A  	fcall	_Lcd_Write_String
  2539                           
  2540                           ;main.c: 324: Lcd_Set_Cursor(2, 1);
  2541  043D  1683               	bsf	3,5	;RP0=1, select bank1
  2542  043E  1303               	bcf	3,6	;RP1=0, select bank1
  2543  043F  01A3               	clrf	Lcd_Set_Cursor@b^(0+128)
  2544  0440  0AA3               	incf	Lcd_Set_Cursor@b^(0+128),f
  2545  0441  3002               	movlw	2
  2546  0442  120A  158A  2102  120A  118A  	fcall	_Lcd_Set_Cursor
  2547                           
  2548                           ;main.c: 326: switch (day % 10) {
  2549  0447  2C80               	goto	l3416
  2550  0448                     l3398:	
  2551                           ;main.c: 327: case 1: Lcd_Write_String("SUN");
  2552                           
  2553  0448  30DA               	movlw	(low ((STR_22-__stringbase)| (0+32768)))& (0+255)
  2554  0449  160A  118A  261B  120A  118A  	fcall	_Lcd_Write_String
  2555                           
  2556                           ;main.c: 328: break;
  2557  044E  2CB0               	goto	l3418
  2558  044F                     l3400:	
  2559                           ;main.c: 329: case 2: Lcd_Write_String("MON");
  2560                           
  2561  044F  30D6               	movlw	(low ((STR_23-__stringbase)| (0+32768)))& (0+255)
  2562  0450  160A  118A  261B  120A  118A  	fcall	_Lcd_Write_String
  2563                           
  2564                           ;main.c: 330: break;
  2565  0455  2CB0               	goto	l3418
  2566  0456                     l3402:	
  2567                           ;main.c: 331: case 3: Lcd_Write_String("TUE");
  2568                           
  2569  0456  30C6               	movlw	(low ((STR_24-__stringbase)| (0+32768)))& (0+255)
  2570  0457  160A  118A  261B  120A  118A  	fcall	_Lcd_Write_String
  2571                           
  2572                           ;main.c: 332: break;
  2573  045C  2CB0               	goto	l3418
  2574  045D                     l3404:	
  2575                           ;main.c: 333: case 4: Lcd_Write_String("WES");
  2576                           
  2577  045D  30DE               	movlw	(low ((STR_25-__stringbase)| (0+32768)))& (0+255)
  2578  045E  160A  118A  261B  120A  118A  	fcall	_Lcd_Write_String
  2579                           
  2580                           ;main.c: 334: break;
  2581  0463  2CB0               	goto	l3418
  2582  0464                     l3406:	
  2583                           ;main.c: 335: case 5: Lcd_Write_String("THU");
  2584                           
  2585  0464  30E6               	movlw	(low ((STR_26-__stringbase)| (0+32768)))& (0+255)
  2586  0465  160A  118A  261B  120A  118A  	fcall	_Lcd_Write_String
  2587                           
  2588                           ;main.c: 336: break;
  2589  046A  2CB0               	goto	l3418
  2590  046B                     l3408:	
  2591                           ;main.c: 337: case 6: Lcd_Write_String("FRI");
  2592                           
  2593  046B  30CA               	movlw	(low ((STR_27-__stringbase)| (0+32768)))& (0+255)
  2594  046C  160A  118A  261B  120A  118A  	fcall	_Lcd_Write_String
  2595                           
  2596                           ;main.c: 338: break;
  2597  0471  2CB0               	goto	l3418
  2598  0472                     l3410:	
  2599                           ;main.c: 339: case 7: Lcd_Write_String("SAT");
  2600                           
  2601  0472  30E2               	movlw	(low ((STR_28-__stringbase)| (0+32768)))& (0+255)
  2602  0473  160A  118A  261B  120A  118A  	fcall	_Lcd_Write_String
  2603                           
  2604                           ;main.c: 340: break;
  2605  0478  2CB0               	goto	l3418
  2606  0479                     l3412:	
  2607                           ;main.c: 341: default: Lcd_Write_String("   ");
  2608                           
  2609  0479  300E               	movlw	(low (((STR_31+13)-__stringbase)| (0+32768)))& (0+255)
  2610  047A  160A  118A  261B  120A  118A  	fcall	_Lcd_Write_String
  2611                           
  2612                           ;main.c: 343: }
  2613                           
  2614                           ;main.c: 342: break;
  2615  047F  2CB0               	goto	l3418
  2616  0480                     l3416:	
  2617  0480  300A               	movlw	10
  2618  0481  1683               	bsf	3,5	;RP0=1, select bank1
  2619  0482  1303               	bcf	3,6	;RP1=0, select bank1
  2620  0483  00A0               	movwf	___awmod@divisor^(0+128)
  2621  0484  3000               	movlw	0
  2622  0485  00A1               	movwf	(___awmod@divisor^(0+128)+1)
  2623  0486  0833               	movf	_day^(0+128),w
  2624  0487  00AC               	movwf	??_Display_Time^(0+128)
  2625  0488  01AD               	clrf	(??_Display_Time^(0+128)+1)
  2626  0489  082C               	movf	??_Display_Time^(0+128),w
  2627  048A  00A2               	movwf	___awmod@dividend^(0+128)
  2628  048B  082D               	movf	(??_Display_Time+1)^(0+128),w
  2629  048C  00A3               	movwf	(___awmod@dividend+1)^(0+128)
  2630  048D  120A  158A  20B5  120A  118A  	fcall	___awmod
  2631                           
  2632                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2633                           ; Switch size 1, requested type "space"
  2634                           ; Number of cases is 1, Range of values is 0 to 0
  2635                           ; switch strategies available:
  2636                           ; Name         Instructions Cycles
  2637                           ; simple_byte            4     3 (average)
  2638                           ; direct_byte           11     8 (fixed)
  2639                           ; jumptable            260     6 (fixed)
  2640                           ;	Chosen strategy is simple_byte
  2641  0492  1683               	bsf	3,5	;RP0=1, select bank1
  2642  0493  1303               	bcf	3,6	;RP1=0, select bank1
  2643  0494  0821               	movf	(?___awmod+1)^(0+128),w
  2644  0495  3A00               	xorlw	0	; case 0
  2645  0496  1903               	skipnz
  2646  0497  2C99               	goto	l3882
  2647  0498  2C79               	goto	l3412
  2648  0499                     l3882:	
  2649                           
  2650                           ; Switch size 1, requested type "space"
  2651                           ; Number of cases is 7, Range of values is 1 to 7
  2652                           ; switch strategies available:
  2653                           ; Name         Instructions Cycles
  2654                           ; simple_byte           22    12 (average)
  2655                           ; direct_byte           32    11 (fixed)
  2656                           ; jumptable            263     9 (fixed)
  2657                           ;	Chosen strategy is simple_byte
  2658  0499  0820               	movf	?___awmod^(0+128),w
  2659  049A  3A01               	xorlw	1	; case 1
  2660  049B  1903               	skipnz
  2661  049C  2C48               	goto	l3398
  2662  049D  3A03               	xorlw	3	; case 2
  2663  049E  1903               	skipnz
  2664  049F  2C4F               	goto	l3400
  2665  04A0  3A01               	xorlw	1	; case 3
  2666  04A1  1903               	skipnz
  2667  04A2  2C56               	goto	l3402
  2668  04A3  3A07               	xorlw	7	; case 4
  2669  04A4  1903               	skipnz
  2670  04A5  2C5D               	goto	l3404
  2671  04A6  3A01               	xorlw	1	; case 5
  2672  04A7  1903               	skipnz
  2673  04A8  2C64               	goto	l3406
  2674  04A9  3A03               	xorlw	3	; case 6
  2675  04AA  1903               	skipnz
  2676  04AB  2C6B               	goto	l3408
  2677  04AC  3A01               	xorlw	1	; case 7
  2678  04AD  1903               	skipnz
  2679  04AE  2C72               	goto	l3410
  2680  04AF  2C79               	goto	l3412
  2681  04B0                     l3418:	
  2682                           
  2683                           ;main.c: 346: Lcd_Set_Cursor(2, 4);
  2684  04B0  3004               	movlw	4
  2685  04B1  1683               	bsf	3,5	;RP0=1, select bank1
  2686  04B2  1303               	bcf	3,6	;RP1=0, select bank1
  2687  04B3  00AC               	movwf	??_Display_Time^(0+128)
  2688  04B4  082C               	movf	??_Display_Time^(0+128),w
  2689  04B5  00A3               	movwf	Lcd_Set_Cursor@b^(0+128)
  2690  04B6  3002               	movlw	2
  2691  04B7  120A  158A  2102  120A  118A  	fcall	_Lcd_Set_Cursor
  2692                           
  2693                           ;main.c: 347: Lcd_Write_Char(' ');
  2694  04BC  3020               	movlw	32
  2695  04BD  160A  118A  272C  120A  118A  	fcall	_Lcd_Write_Char
  2696                           
  2697                           ;main.c: 348: Display(date);
  2698  04C2  1683               	bsf	3,5	;RP0=1, select bank1
  2699  04C3  1303               	bcf	3,6	;RP1=0, select bank1
  2700  04C4  0832               	movf	_date^(0+128),w
  2701  04C5  160A  118A  26F6  120A  118A  	fcall	_Display
  2702                           
  2703                           ;main.c: 351: Lcd_Write_Char('-');
  2704  04CA  302D               	movlw	45
  2705  04CB  160A  118A  272C  120A  118A  	fcall	_Lcd_Write_Char
  2706                           
  2707                           ;main.c: 352: Display(month);
  2708  04D0  1683               	bsf	3,5	;RP0=1, select bank1
  2709  04D1  1303               	bcf	3,6	;RP1=0, select bank1
  2710  04D2  0838               	movf	_month^(0+128),w
  2711  04D3  160A  118A  26F6  120A  118A  	fcall	_Display
  2712                           
  2713                           ;main.c: 355: Lcd_Write_Char('-');
  2714  04D8  302D               	movlw	45
  2715  04D9  160A  118A  272C  120A  118A  	fcall	_Lcd_Write_Char
  2716                           
  2717                           ;main.c: 356: Display(year);
  2718  04DE  1683               	bsf	3,5	;RP0=1, select bank1
  2719  04DF  1303               	bcf	3,6	;RP1=0, select bank1
  2720  04E0  083D               	movf	_year^(0+128),w
  2721  04E1  160A  118A  26F6  120A  118A  	fcall	_Display
  2722                           
  2723                           ;main.c: 359: Lcd_Set_Cursor(2, 13);
  2724  04E6  300D               	movlw	13
  2725  04E7  1683               	bsf	3,5	;RP0=1, select bank1
  2726  04E8  1303               	bcf	3,6	;RP1=0, select bank1
  2727  04E9  00AC               	movwf	??_Display_Time^(0+128)
  2728  04EA  082C               	movf	??_Display_Time^(0+128),w
  2729  04EB  00A3               	movwf	Lcd_Set_Cursor@b^(0+128)
  2730  04EC  3002               	movlw	2
  2731  04ED  120A  158A  2102  120A  118A  	fcall	_Lcd_Set_Cursor
  2732                           
  2733                           ;main.c: 360: Lcd_Write_Char(' ');
  2734  04F2  3020               	movlw	32
  2735  04F3  160A  118A  272C  120A  118A  	fcall	_Lcd_Write_Char
  2736                           
  2737                           ;main.c: 361: Display(temperature);
  2738  04F8  1683               	bsf	3,5	;RP0=1, select bank1
  2739  04F9  1303               	bcf	3,6	;RP1=0, select bank1
  2740  04FA  083C               	movf	_temperature^(0+128),w
  2741  04FB  160A  118A  26F6  120A  118A  	fcall	_Display
  2742                           
  2743                           ;main.c: 362: Lcd_Write_Char(67);
  2744  0500  3043               	movlw	67
  2745  0501  160A  118A  272C   	fcall	_Lcd_Write_Char
  2746  0504  0008               	return
  2747  0505                     __end_of_Display_Time:	
  2748                           
  2749                           	psect	text13
  2750  020E                     __ptext13:	
  2751 ;; *************** function _Display_SetTime *****************
  2752 ;; Defined at:
  2753 ;;		line 365 in file "main.c"
  2754 ;; Parameters:    Size  Location     Type
  2755 ;;		None
  2756 ;; Auto vars:     Size  Location     Type
  2757 ;;		None
  2758 ;; Return value:  Size  Location     Type
  2759 ;;		None               void
  2760 ;; Registers used:
  2761 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2762 ;; Tracked objects:
  2763 ;;		On entry : 0/0
  2764 ;;		On exit  : 0/0
  2765 ;;		Unchanged: 0/0
  2766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2767 ;;      Params:         0       0       0       0       0
  2768 ;;      Locals:         0       0       0       0       0
  2769 ;;      Temps:          0       0       2       0       0
  2770 ;;      Totals:         0       0       2       0       0
  2771 ;;Total ram usage:        2 bytes
  2772 ;; Hardware stack levels used:    1
  2773 ;; Hardware stack levels required when called:    7
  2774 ;; This function calls:
  2775 ;;		_Display
  2776 ;;		_Display_Hour
  2777 ;;		_Lcd_Set_Cursor
  2778 ;;		_Lcd_Write_Char
  2779 ;;		_Lcd_Write_String
  2780 ;;		___awmod
  2781 ;; This function is called by:
  2782 ;;		_main
  2783 ;; This function uses a non-reentrant model
  2784 ;;
  2785                           
  2786                           
  2787                           ;psect for function _Display_SetTime
  2788  020E                     _Display_SetTime:	
  2789                           
  2790                           ;main.c: 367: if (quit == 1 && hour < 40) {
  2791                           
  2792                           ;incstack = 0
  2793                           ; Regs used in _Display_SetTime: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2794  020E  1683               	bsf	3,5	;RP0=1, select bank1
  2795  020F  1303               	bcf	3,6	;RP1=0, select bank1
  2796  0210  0339               	decf	_quit^(0+128),w
  2797  0211  1D03               	btfss	3,2
  2798  0212  2A34               	goto	l3434
  2799  0213  3028               	movlw	40
  2800  0214  0234               	subwf	_hour^(0+128),w
  2801  0215  1803               	skipnc
  2802  0216  2A34               	goto	l3434
  2803                           
  2804                           ;main.c: 368: Lcd_Set_Cursor(1, 1);
  2805  0217  01A3               	clrf	Lcd_Set_Cursor@b^(0+128)
  2806  0218  0AA3               	incf	Lcd_Set_Cursor@b^(0+128),f
  2807  0219  3001               	movlw	1
  2808  021A  120A  158A  2102  120A  118A  	fcall	_Lcd_Set_Cursor
  2809                           
  2810                           ;main.c: 369: Lcd_Write_String("CHE DO 12h?     ");
  2811  021F  3045               	movlw	(low ((STR_30-__stringbase)| (0+32768)))& (0+255)
  2812  0220  160A  118A  261B  120A  118A  	fcall	_Lcd_Write_String
  2813                           
  2814                           ;main.c: 370: Lcd_Set_Cursor(2, 1);
  2815  0225  1683               	bsf	3,5	;RP0=1, select bank1
  2816  0226  1303               	bcf	3,6	;RP1=0, select bank1
  2817  0227  01A3               	clrf	Lcd_Set_Cursor@b^(0+128)
  2818  0228  0AA3               	incf	Lcd_Set_Cursor@b^(0+128),f
  2819  0229  3002               	movlw	2
  2820  022A  120A  158A  2102  120A  118A  	fcall	_Lcd_Set_Cursor
  2821                           
  2822                           ;main.c: 371: Lcd_Write_String("                ");
  2823  022F  3001               	movlw	(low ((STR_31-__stringbase)| (0+32768)))& (0+255)
  2824  0230  160A  118A  261B   	fcall	_Lcd_Write_String
  2825                           
  2826                           ;main.c: 372: } else if (quit == 1 && hour >= 40) {
  2827  0233  0008               	return
  2828  0234                     l3434:	
  2829  0234  1683               	bsf	3,5	;RP0=1, select bank1
  2830  0235  1303               	bcf	3,6	;RP1=0, select bank1
  2831  0236  0339               	decf	_quit^(0+128),w
  2832  0237  1D03               	btfss	3,2
  2833  0238  2A5A               	goto	l3444
  2834  0239  3028               	movlw	40
  2835  023A  0234               	subwf	_hour^(0+128),w
  2836  023B  1C03               	skipc
  2837  023C  2A5A               	goto	l3444
  2838                           
  2839                           ;main.c: 373: Lcd_Set_Cursor(1, 1);
  2840  023D  01A3               	clrf	Lcd_Set_Cursor@b^(0+128)
  2841  023E  0AA3               	incf	Lcd_Set_Cursor@b^(0+128),f
  2842  023F  3001               	movlw	1
  2843  0240  120A  158A  2102  120A  118A  	fcall	_Lcd_Set_Cursor
  2844                           
  2845                           ;main.c: 374: Lcd_Write_String("CHE DO 24h?     ");
  2846  0245  3056               	movlw	(low ((STR_32-__stringbase)| (0+32768)))& (0+255)
  2847  0246  160A  118A  261B  120A  118A  	fcall	_Lcd_Write_String
  2848                           
  2849                           ;main.c: 375: Lcd_Set_Cursor(2, 1);
  2850  024B  1683               	bsf	3,5	;RP0=1, select bank1
  2851  024C  1303               	bcf	3,6	;RP1=0, select bank1
  2852  024D  01A3               	clrf	Lcd_Set_Cursor@b^(0+128)
  2853  024E  0AA3               	incf	Lcd_Set_Cursor@b^(0+128),f
  2854  024F  3002               	movlw	2
  2855  0250  120A  158A  2102  120A  118A  	fcall	_Lcd_Set_Cursor
  2856                           
  2857                           ;main.c: 376: Lcd_Write_String("                ");
  2858  0255  3001               	movlw	(low ((STR_31-__stringbase)| (0+32768)))& (0+255)
  2859  0256  160A  118A  261B   	fcall	_Lcd_Write_String
  2860                           
  2861                           ;main.c: 378: } else if (quit == 2) {
  2862  0259  0008               	return
  2863  025A                     l3444:	
  2864  025A  3002               	movlw	2
  2865  025B  1683               	bsf	3,5	;RP0=1, select bank1
  2866  025C  1303               	bcf	3,6	;RP1=0, select bank1
  2867  025D  0639               	xorwf	_quit^(0+128),w
  2868  025E  1D03               	btfss	3,2
  2869  025F  0008               	return
  2870                           
  2871                           ;main.c: 379: Lcd_Set_Cursor(1, 1);
  2872  0260  01A3               	clrf	Lcd_Set_Cursor@b^(0+128)
  2873  0261  0AA3               	incf	Lcd_Set_Cursor@b^(0+128),f
  2874  0262  3001               	movlw	1
  2875  0263  120A  158A  2102  120A  118A  	fcall	_Lcd_Set_Cursor
  2876                           
  2877                           ;main.c: 380: switch (set) {
  2878  0268  2BC0               	goto	l3524
  2879  0269                     l3448:	
  2880                           ;main.c: 381: case 0:
  2881                           
  2882                           
  2883                           ;main.c: 382: {
  2884                           ;main.c: 383: Lcd_Write_String("CHINH SUA?      ");
  2885  0269  3023               	movlw	(low ((STR_34-__stringbase)| (0+32768)))& (0+255)
  2886  026A  160A  118A  261B  120A  118A  	fcall	_Lcd_Write_String
  2887                           
  2888                           ;main.c: 384: Lcd_Set_Cursor(2, 1);
  2889  026F  1683               	bsf	3,5	;RP0=1, select bank1
  2890  0270  1303               	bcf	3,6	;RP1=0, select bank1
  2891  0271  01A3               	clrf	Lcd_Set_Cursor@b^(0+128)
  2892  0272  0AA3               	incf	Lcd_Set_Cursor@b^(0+128),f
  2893  0273  3002               	movlw	2
  2894  0274  120A  158A  2102  120A  118A  	fcall	_Lcd_Set_Cursor
  2895                           
  2896                           ;main.c: 385: Lcd_Write_String("                ");
  2897  0279  3001               	movlw	(low ((STR_31-__stringbase)| (0+32768)))& (0+255)
  2898  027A  160A  118A  261B   	fcall	_Lcd_Write_String
  2899                           
  2900                           ;main.c: 386: break;
  2901  027D  0008               	return
  2902  027E                     l3454:	
  2903                           ;main.c: 387: }
  2904                           ;main.c: 388: case 1:
  2905                           
  2906                           
  2907                           ;main.c: 389: {
  2908                           ;main.c: 390: Lcd_Write_String("CHINH SUA      ");
  2909  027E  3089               	movlw	(low ((STR_36-__stringbase)| (0+32768)))& (0+255)
  2910  027F  160A  118A  261B  120A  118A  	fcall	_Lcd_Write_String
  2911                           
  2912                           ;main.c: 391: Lcd_Set_Cursor(2, 1);
  2913  0284  1683               	bsf	3,5	;RP0=1, select bank1
  2914  0285  1303               	bcf	3,6	;RP1=0, select bank1
  2915  0286  01A3               	clrf	Lcd_Set_Cursor@b^(0+128)
  2916  0287  0AA3               	incf	Lcd_Set_Cursor@b^(0+128),f
  2917  0288  3002               	movlw	2
  2918  0289  120A  158A  2102  120A  118A  	fcall	_Lcd_Set_Cursor
  2919                           
  2920                           ;main.c: 392: Lcd_Write_String("PHUT: ");
  2921  028E  30A1               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  2922  028F  160A  118A  261B  120A  118A  	fcall	_Lcd_Write_String
  2923                           
  2924                           ;main.c: 393: Display(minute);
  2925  0294  1683               	bsf	3,5	;RP0=1, select bank1
  2926  0295  1303               	bcf	3,6	;RP1=0, select bank1
  2927  0296  0837               	movf	_minute^(0+128),w
  2928  0297  160A  118A  26F6   	fcall	_Display
  2929                           
  2930                           ;main.c: 394: break;
  2931  029A  0008               	return
  2932  029B                     l3460:	
  2933                           ;main.c: 395: }
  2934                           ;main.c: 396: case 2:
  2935                           
  2936                           
  2937                           ;main.c: 397: {
  2938                           ;main.c: 398: Lcd_Write_String("CHINH SUA      ");
  2939  029B  3089               	movlw	(low ((STR_36-__stringbase)| (0+32768)))& (0+255)
  2940  029C  160A  118A  261B  120A  118A  	fcall	_Lcd_Write_String
  2941                           
  2942                           ;main.c: 399: Lcd_Set_Cursor(2, 1);
  2943  02A1  1683               	bsf	3,5	;RP0=1, select bank1
  2944  02A2  1303               	bcf	3,6	;RP1=0, select bank1
  2945  02A3  01A3               	clrf	Lcd_Set_Cursor@b^(0+128)
  2946  02A4  0AA3               	incf	Lcd_Set_Cursor@b^(0+128),f
  2947  02A5  3002               	movlw	2
  2948  02A6  120A  158A  2102  120A  118A  	fcall	_Lcd_Set_Cursor
  2949                           
  2950                           ;main.c: 400: Lcd_Write_String("GIO: ");
  2951  02AB  30B5               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  2952  02AC  160A  118A  261B  120A  118A  	fcall	_Lcd_Write_String
  2953                           
  2954                           ;main.c: 401: Display_Hour();
  2955  02B1  160A  118A  25DB  120A  118A  	fcall	_Display_Hour
  2956                           
  2957                           ;main.c: 402: Display(hour_display);
  2958  02B6  1683               	bsf	3,5	;RP0=1, select bank1
  2959  02B7  1303               	bcf	3,6	;RP1=0, select bank1
  2960  02B8  0836               	movf	_hour_display^(0+128),w
  2961  02B9  160A  118A  26F6  120A  118A  	fcall	_Display
  2962                           
  2963                           ;main.c: 404: if (hour < 40) Lcd_Write_String("   ");
  2964  02BE  3028               	movlw	40
  2965  02BF  1683               	bsf	3,5	;RP0=1, select bank1
  2966  02C0  1303               	bcf	3,6	;RP1=0, select bank1
  2967  02C1  0234               	subwf	_hour^(0+128),w
  2968  02C2  1803               	skipnc
  2969  02C3  2AC9               	goto	l3470
  2970  02C4  300E               	movlw	(low (((STR_31+13)-__stringbase)| (0+32768)))& (0+255)
  2971  02C5  160A  118A  261B   	fcall	_Lcd_Write_String
  2972  02C8  0008               	return
  2973  02C9                     l3470:	
  2974                           
  2975                           ;main.c: 405: else if (hour < 60) Lcd_Write_String(" AM");
  2976  02C9  303C               	movlw	60
  2977  02CA  1683               	bsf	3,5	;RP0=1, select bank1
  2978  02CB  1303               	bcf	3,6	;RP1=0, select bank1
  2979  02CC  0234               	subwf	_hour^(0+128),w
  2980  02CD  1803               	skipnc
  2981  02CE  2AD4               	goto	l3474
  2982  02CF  30CE               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  2983  02D0  160A  118A  261B   	fcall	_Lcd_Write_String
  2984  02D3  0008               	return
  2985  02D4                     l3474:	
  2986                           
  2987                           ;main.c: 406: else Lcd_Write_String(" PM");
  2988  02D4  30D2               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  2989  02D5  160A  118A  261B   	fcall	_Lcd_Write_String
  2990                           
  2991                           ;main.c: 407: break;
  2992  02D8  0008               	return
  2993  02D9                     l3476:	
  2994                           ;main.c: 408: }
  2995                           ;main.c: 409: case 3:
  2996                           
  2997                           
  2998                           ;main.c: 410: {
  2999                           ;main.c: 411: Lcd_Write_String("CHINH SUA      ");
  3000  02D9  3089               	movlw	(low ((STR_36-__stringbase)| (0+32768)))& (0+255)
  3001  02DA  160A  118A  261B  120A  118A  	fcall	_Lcd_Write_String
  3002                           
  3003                           ;main.c: 412: Lcd_Set_Cursor(2, 1);
  3004  02DF  1683               	bsf	3,5	;RP0=1, select bank1
  3005  02E0  1303               	bcf	3,6	;RP1=0, select bank1
  3006  02E1  01A3               	clrf	Lcd_Set_Cursor@b^(0+128)
  3007  02E2  0AA3               	incf	Lcd_Set_Cursor@b^(0+128),f
  3008  02E3  3002               	movlw	2
  3009  02E4  120A  158A  2102  120A  118A  	fcall	_Lcd_Set_Cursor
  3010                           
  3011                           ;main.c: 413: Lcd_Write_String("THU: ");
  3012  02E9  30BB               	movlw	(low ((STR_44-__stringbase)| (0+32768)))& (0+255)
  3013  02EA  160A  118A  261B  120A  118A  	fcall	_Lcd_Write_String
  3014                           
  3015                           ;main.c: 415: switch (day % 10) {
  3016  02EF  2B28               	goto	l3500
  3017  02F0                     l3482:	
  3018                           ;main.c: 416: case 1: Lcd_Write_String("SUN");
  3019                           
  3020  02F0  30DA               	movlw	(low ((STR_22-__stringbase)| (0+32768)))& (0+255)
  3021  02F1  160A  118A  261B  120A  118A  	fcall	_Lcd_Write_String
  3022                           
  3023                           ;main.c: 417: break;
  3024  02F6  2B58               	goto	l3502
  3025  02F7                     l3484:	
  3026                           ;main.c: 418: case 2: Lcd_Write_String("MON");
  3027                           
  3028  02F7  30D6               	movlw	(low ((STR_23-__stringbase)| (0+32768)))& (0+255)
  3029  02F8  160A  118A  261B  120A  118A  	fcall	_Lcd_Write_String
  3030                           
  3031                           ;main.c: 419: break;
  3032  02FD  2B58               	goto	l3502
  3033  02FE                     l3486:	
  3034                           ;main.c: 420: case 3: Lcd_Write_String("TUE");
  3035                           
  3036  02FE  30C6               	movlw	(low ((STR_24-__stringbase)| (0+32768)))& (0+255)
  3037  02FF  160A  118A  261B  120A  118A  	fcall	_Lcd_Write_String
  3038                           
  3039                           ;main.c: 421: break;
  3040  0304  2B58               	goto	l3502
  3041  0305                     l3488:	
  3042                           ;main.c: 422: case 4: Lcd_Write_String("WES");
  3043                           
  3044  0305  30DE               	movlw	(low ((STR_25-__stringbase)| (0+32768)))& (0+255)
  3045  0306  160A  118A  261B  120A  118A  	fcall	_Lcd_Write_String
  3046                           
  3047                           ;main.c: 423: break;
  3048  030B  2B58               	goto	l3502
  3049  030C                     l3490:	
  3050                           ;main.c: 424: case 5: Lcd_Write_String("THU");
  3051                           
  3052  030C  30E6               	movlw	(low ((STR_26-__stringbase)| (0+32768)))& (0+255)
  3053  030D  160A  118A  261B  120A  118A  	fcall	_Lcd_Write_String
  3054                           
  3055                           ;main.c: 425: break;
  3056  0312  2B58               	goto	l3502
  3057  0313                     l3492:	
  3058                           ;main.c: 426: case 6: Lcd_Write_String("FRI");
  3059                           
  3060  0313  30CA               	movlw	(low ((STR_27-__stringbase)| (0+32768)))& (0+255)
  3061  0314  160A  118A  261B  120A  118A  	fcall	_Lcd_Write_String
  3062                           
  3063                           ;main.c: 427: break;
  3064  0319  2B58               	goto	l3502
  3065  031A                     l3494:	
  3066                           ;main.c: 428: case 7: Lcd_Write_String("SAT");
  3067                           
  3068  031A  30E2               	movlw	(low ((STR_28-__stringbase)| (0+32768)))& (0+255)
  3069  031B  160A  118A  261B  120A  118A  	fcall	_Lcd_Write_String
  3070                           
  3071                           ;main.c: 429: break;
  3072  0320  2B58               	goto	l3502
  3073  0321                     l3496:	
  3074                           ;main.c: 430: default: Lcd_Write_String("   ");
  3075                           
  3076  0321  300E               	movlw	(low (((STR_31+13)-__stringbase)| (0+32768)))& (0+255)
  3077  0322  160A  118A  261B  120A  118A  	fcall	_Lcd_Write_String
  3078                           
  3079                           ;main.c: 432: }
  3080                           
  3081                           ;main.c: 431: break;
  3082  0327  2B58               	goto	l3502
  3083  0328                     l3500:	
  3084  0328  300A               	movlw	10
  3085  0329  1683               	bsf	3,5	;RP0=1, select bank1
  3086  032A  1303               	bcf	3,6	;RP1=0, select bank1
  3087  032B  00A0               	movwf	___awmod@divisor^(0+128)
  3088  032C  3000               	movlw	0
  3089  032D  00A1               	movwf	(___awmod@divisor^(0+128)+1)
  3090  032E  0833               	movf	_day^(0+128),w
  3091  032F  00AC               	movwf	??_Display_SetTime^(0+128)
  3092  0330  01AD               	clrf	(??_Display_SetTime^(0+128)+1)
  3093  0331  082C               	movf	??_Display_SetTime^(0+128),w
  3094  0332  00A2               	movwf	___awmod@dividend^(0+128)
  3095  0333  082D               	movf	(??_Display_SetTime+1)^(0+128),w
  3096  0334  00A3               	movwf	(___awmod@dividend+1)^(0+128)
  3097  0335  120A  158A  20B5  120A  118A  	fcall	___awmod
  3098                           
  3099                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3100                           ; Switch size 1, requested type "space"
  3101                           ; Number of cases is 1, Range of values is 0 to 0
  3102                           ; switch strategies available:
  3103                           ; Name         Instructions Cycles
  3104                           ; simple_byte            4     3 (average)
  3105                           ; direct_byte           11     8 (fixed)
  3106                           ; jumptable            260     6 (fixed)
  3107                           ;	Chosen strategy is simple_byte
  3108  033A  1683               	bsf	3,5	;RP0=1, select bank1
  3109  033B  1303               	bcf	3,6	;RP1=0, select bank1
  3110  033C  0821               	movf	(?___awmod+1)^(0+128),w
  3111  033D  3A00               	xorlw	0	; case 0
  3112  033E  1903               	skipnz
  3113  033F  2B41               	goto	l3884
  3114  0340  2B21               	goto	l3496
  3115  0341                     l3884:	
  3116                           
  3117                           ; Switch size 1, requested type "space"
  3118                           ; Number of cases is 7, Range of values is 1 to 7
  3119                           ; switch strategies available:
  3120                           ; Name         Instructions Cycles
  3121                           ; simple_byte           22    12 (average)
  3122                           ; direct_byte           32    11 (fixed)
  3123                           ; jumptable            263     9 (fixed)
  3124                           ;	Chosen strategy is simple_byte
  3125  0341  0820               	movf	?___awmod^(0+128),w
  3126  0342  3A01               	xorlw	1	; case 1
  3127  0343  1903               	skipnz
  3128  0344  2AF0               	goto	l3482
  3129  0345  3A03               	xorlw	3	; case 2
  3130  0346  1903               	skipnz
  3131  0347  2AF7               	goto	l3484
  3132  0348  3A01               	xorlw	1	; case 3
  3133  0349  1903               	skipnz
  3134  034A  2AFE               	goto	l3486
  3135  034B  3A07               	xorlw	7	; case 4
  3136  034C  1903               	skipnz
  3137  034D  2B05               	goto	l3488
  3138  034E  3A01               	xorlw	1	; case 5
  3139  034F  1903               	skipnz
  3140  0350  2B0C               	goto	l3490
  3141  0351  3A03               	xorlw	3	; case 6
  3142  0352  1903               	skipnz
  3143  0353  2B13               	goto	l3492
  3144  0354  3A01               	xorlw	1	; case 7
  3145  0355  1903               	skipnz
  3146  0356  2B1A               	goto	l3494
  3147  0357  2B21               	goto	l3496
  3148  0358                     l3502:	
  3149                           
  3150                           ;main.c: 433: Lcd_Write_String("   ");
  3151  0358  300E               	movlw	(low (((STR_31+13)-__stringbase)| (0+32768)))& (0+255)
  3152  0359  160A  118A  261B   	fcall	_Lcd_Write_String
  3153                           
  3154                           ;main.c: 434: break;
  3155  035C  0008               	return
  3156  035D                     l3504:	
  3157                           ;main.c: 435: }
  3158                           ;main.c: 436: case 4:
  3159                           
  3160                           
  3161                           ;main.c: 437: {
  3162                           ;main.c: 438: Lcd_Write_String("CHINH SUA      ");
  3163  035D  3089               	movlw	(low ((STR_36-__stringbase)| (0+32768)))& (0+255)
  3164  035E  160A  118A  261B  120A  118A  	fcall	_Lcd_Write_String
  3165                           
  3166                           ;main.c: 439: Lcd_Set_Cursor(2, 1);
  3167  0363  1683               	bsf	3,5	;RP0=1, select bank1
  3168  0364  1303               	bcf	3,6	;RP1=0, select bank1
  3169  0365  01A3               	clrf	Lcd_Set_Cursor@b^(0+128)
  3170  0366  0AA3               	incf	Lcd_Set_Cursor@b^(0+128),f
  3171  0367  3002               	movlw	2
  3172  0368  120A  158A  2102  120A  118A  	fcall	_Lcd_Set_Cursor
  3173                           
  3174                           ;main.c: 440: Lcd_Write_String("NGAY: ");
  3175  036D  30A8               	movlw	(low ((STR_55-__stringbase)| (0+32768)))& (0+255)
  3176  036E  160A  118A  261B  120A  118A  	fcall	_Lcd_Write_String
  3177                           
  3178                           ;main.c: 441: Display(date);
  3179  0373  1683               	bsf	3,5	;RP0=1, select bank1
  3180  0374  1303               	bcf	3,6	;RP1=0, select bank1
  3181  0375  0832               	movf	_date^(0+128),w
  3182  0376  160A  118A  26F6   	fcall	_Display
  3183                           
  3184                           ;main.c: 442: break;
  3185  0379  0008               	return
  3186  037A                     l3510:	
  3187                           ;main.c: 443: }
  3188                           ;main.c: 444: case 5:
  3189                           
  3190                           
  3191                           ;main.c: 445: {
  3192                           ;main.c: 446: Lcd_Write_String("CHINH SUA      ");
  3193  037A  3089               	movlw	(low ((STR_36-__stringbase)| (0+32768)))& (0+255)
  3194  037B  160A  118A  261B  120A  118A  	fcall	_Lcd_Write_String
  3195                           
  3196                           ;main.c: 447: Lcd_Set_Cursor(2, 1);
  3197  0380  1683               	bsf	3,5	;RP0=1, select bank1
  3198  0381  1303               	bcf	3,6	;RP1=0, select bank1
  3199  0382  01A3               	clrf	Lcd_Set_Cursor@b^(0+128)
  3200  0383  0AA3               	incf	Lcd_Set_Cursor@b^(0+128),f
  3201  0384  3002               	movlw	2
  3202  0385  120A  158A  2102  120A  118A  	fcall	_Lcd_Set_Cursor
  3203                           
  3204                           ;main.c: 448: Lcd_Write_String("THANG: ");
  3205  038A  3099               	movlw	(low ((STR_57-__stringbase)| (0+32768)))& (0+255)
  3206  038B  160A  118A  261B  120A  118A  	fcall	_Lcd_Write_String
  3207                           
  3208                           ;main.c: 449: Display(month);
  3209  0390  1683               	bsf	3,5	;RP0=1, select bank1
  3210  0391  1303               	bcf	3,6	;RP1=0, select bank1
  3211  0392  0838               	movf	_month^(0+128),w
  3212  0393  160A  118A  26F6   	fcall	_Display
  3213                           
  3214                           ;main.c: 450: break;
  3215  0396  0008               	return
  3216  0397                     l3516:	
  3217                           ;main.c: 451: }
  3218                           ;main.c: 452: case 6:
  3219                           
  3220                           
  3221                           ;main.c: 453: {
  3222                           ;main.c: 454: Lcd_Write_String("CHINH SUA      ");
  3223  0397  3089               	movlw	(low ((STR_36-__stringbase)| (0+32768)))& (0+255)
  3224  0398  160A  118A  261B  120A  118A  	fcall	_Lcd_Write_String
  3225                           
  3226                           ;main.c: 455: Lcd_Set_Cursor(2, 1);
  3227  039D  1683               	bsf	3,5	;RP0=1, select bank1
  3228  039E  1303               	bcf	3,6	;RP1=0, select bank1
  3229  039F  01A3               	clrf	Lcd_Set_Cursor@b^(0+128)
  3230  03A0  0AA3               	incf	Lcd_Set_Cursor@b^(0+128),f
  3231  03A1  3002               	movlw	2
  3232  03A2  120A  158A  2102  120A  118A  	fcall	_Lcd_Set_Cursor
  3233                           
  3234                           ;main.c: 456: Lcd_Write_String("NAM: ");
  3235  03A7  30AF               	movlw	(low ((STR_59-__stringbase)| (0+32768)))& (0+255)
  3236  03A8  160A  118A  261B  120A  118A  	fcall	_Lcd_Write_String
  3237                           
  3238                           ;main.c: 457: Lcd_Write_Char(0x32);
  3239  03AD  3032               	movlw	50
  3240  03AE  160A  118A  272C  120A  118A  	fcall	_Lcd_Write_Char
  3241                           
  3242                           ;main.c: 458: Lcd_Write_Char(0x30);
  3243  03B3  3030               	movlw	48
  3244  03B4  160A  118A  272C  120A  118A  	fcall	_Lcd_Write_Char
  3245                           
  3246                           ;main.c: 459: Display(year);
  3247  03B9  1683               	bsf	3,5	;RP0=1, select bank1
  3248  03BA  1303               	bcf	3,6	;RP1=0, select bank1
  3249  03BB  083D               	movf	_year^(0+128),w
  3250  03BC  160A  118A  26F6   	fcall	_Display
  3251                           
  3252                           ;main.c: 462: }
  3253                           ;main.c: 463: }
  3254                           
  3255                           ;main.c: 461: break;
  3256  03BF  0008               	return
  3257  03C0                     l3524:	
  3258  03C0  1683               	bsf	3,5	;RP0=1, select bank1
  3259  03C1  1303               	bcf	3,6	;RP1=0, select bank1
  3260  03C2  083B               	movf	_set^(0+128),w
  3261                           
  3262                           ; Switch size 1, requested type "space"
  3263                           ; Number of cases is 7, Range of values is 0 to 6
  3264                           ; switch strategies available:
  3265                           ; Name         Instructions Cycles
  3266                           ; simple_byte           22    12 (average)
  3267                           ; direct_byte           29     8 (fixed)
  3268                           ; jumptable            260     6 (fixed)
  3269                           ;	Chosen strategy is simple_byte
  3270  03C3  3A00               	xorlw	0	; case 0
  3271  03C4  1903               	skipnz
  3272  03C5  2A69               	goto	l3448
  3273  03C6  3A01               	xorlw	1	; case 1
  3274  03C7  1903               	skipnz
  3275  03C8  2A7E               	goto	l3454
  3276  03C9  3A03               	xorlw	3	; case 2
  3277  03CA  1903               	skipnz
  3278  03CB  2A9B               	goto	l3460
  3279  03CC  3A01               	xorlw	1	; case 3
  3280  03CD  1903               	skipnz
  3281  03CE  2AD9               	goto	l3476
  3282  03CF  3A07               	xorlw	7	; case 4
  3283  03D0  1903               	skipnz
  3284  03D1  2B5D               	goto	l3504
  3285  03D2  3A01               	xorlw	1	; case 5
  3286  03D3  1903               	skipnz
  3287  03D4  2B7A               	goto	l3510
  3288  03D5  3A03               	xorlw	3	; case 6
  3289  03D6  1903               	skipnz
  3290  03D7  2B97               	goto	l3516
  3291  03D8  2BDA               	goto	l352
  3292  03D9  0008               	return
  3293  03DA                     l352:	
  3294  03DA  0008               	return
  3295  03DB                     __end_of_Display_SetTime:	
  3296                           
  3297                           	psect	text14
  3298  15DB                     __ptext14:	
  3299 ;; *************** function _Display_Hour *****************
  3300 ;; Defined at:
  3301 ;;		line 209 in file "main.c"
  3302 ;; Parameters:    Size  Location     Type
  3303 ;;		None
  3304 ;; Auto vars:     Size  Location     Type
  3305 ;;		None
  3306 ;; Return value:  Size  Location     Type
  3307 ;;		None               void
  3308 ;; Registers used:
  3309 ;;		wreg, status,2, status,0
  3310 ;; Tracked objects:
  3311 ;;		On entry : 0/0
  3312 ;;		On exit  : 0/0
  3313 ;;		Unchanged: 0/0
  3314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3315 ;;      Params:         0       0       0       0       0
  3316 ;;      Locals:         0       0       0       0       0
  3317 ;;      Temps:          0       0       1       0       0
  3318 ;;      Totals:         0       0       1       0       0
  3319 ;;Total ram usage:        1 bytes
  3320 ;; Hardware stack levels used:    1
  3321 ;; Hardware stack levels required when called:    4
  3322 ;; This function calls:
  3323 ;;		Nothing
  3324 ;; This function is called by:
  3325 ;;		_Display_Time
  3326 ;;		_Display_SetTime
  3327 ;; This function uses a non-reentrant model
  3328 ;;
  3329                           
  3330                           
  3331                           ;psect for function _Display_Hour
  3332  15DB                     _Display_Hour:	
  3333                           
  3334                           ;main.c: 210: if (hour < 40) hour_display = hour;
  3335                           
  3336                           ;incstack = 0
  3337                           ; Regs used in _Display_Hour: [wreg+status,2+status,0]
  3338  15DB  3028               	movlw	40
  3339  15DC  1683               	bsf	3,5	;RP0=1, select bank1
  3340  15DD  1303               	bcf	3,6	;RP1=0, select bank1
  3341  15DE  0234               	subwf	_hour^(0+128),w
  3342  15DF  1803               	skipnc
  3343  15E0  2DE6               	goto	l2842
  3344  15E1  0834               	movf	_hour^(0+128),w
  3345  15E2  00A0               	movwf	??_Display_Hour^(0+128)
  3346  15E3  0820               	movf	??_Display_Hour^(0+128),w
  3347  15E4  00B6               	movwf	_hour_display^(0+128)
  3348  15E5  0008               	return
  3349  15E6                     l2842:	
  3350                           
  3351                           ;main.c: 211: else if (hour < 60) hour_display = hour - 40;
  3352  15E6  303C               	movlw	60
  3353  15E7  0234               	subwf	_hour^(0+128),w
  3354  15E8  1803               	skipnc
  3355  15E9  2DF0               	goto	l2846
  3356  15EA  0834               	movf	_hour^(0+128),w
  3357  15EB  3ED8               	addlw	216
  3358  15EC  00A0               	movwf	??_Display_Hour^(0+128)
  3359  15ED  0820               	movf	??_Display_Hour^(0+128),w
  3360  15EE  00B6               	movwf	_hour_display^(0+128)
  3361  15EF  0008               	return
  3362  15F0                     l2846:	
  3363                           
  3364                           ;main.c: 212: else if (hour > 60) hour_display = hour - 60;
  3365  15F0  303D               	movlw	61
  3366  15F1  0234               	subwf	_hour^(0+128),w
  3367  15F2  1C03               	skipc
  3368  15F3  0008               	return
  3369  15F4  0834               	movf	_hour^(0+128),w
  3370  15F5  3EC4               	addlw	196
  3371  15F6  00A0               	movwf	??_Display_Hour^(0+128)
  3372  15F7  0820               	movf	??_Display_Hour^(0+128),w
  3373  15F8  00B6               	movwf	_hour_display^(0+128)
  3374  15F9  0008               	return
  3375  15FA                     __end_of_Display_Hour:	
  3376                           
  3377                           	psect	text15
  3378  05F4                     __ptext15:	
  3379 ;; *************** function _Display_Alarm *****************
  3380 ;; Defined at:
  3381 ;;		line 248 in file "main.c"
  3382 ;; Parameters:    Size  Location     Type
  3383 ;;		None
  3384 ;; Auto vars:     Size  Location     Type
  3385 ;;		None
  3386 ;; Return value:  Size  Location     Type
  3387 ;;		None               void
  3388 ;; Registers used:
  3389 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3390 ;; Tracked objects:
  3391 ;;		On entry : 0/0
  3392 ;;		On exit  : 0/0
  3393 ;;		Unchanged: 0/0
  3394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3395 ;;      Params:         0       0       0       0       0
  3396 ;;      Locals:         0       0       0       0       0
  3397 ;;      Temps:          0       0       1       0       0
  3398 ;;      Totals:         0       0       1       0       0
  3399 ;;Total ram usage:        1 bytes
  3400 ;; Hardware stack levels used:    1
  3401 ;; Hardware stack levels required when called:    7
  3402 ;; This function calls:
  3403 ;;		_Display
  3404 ;;		_Display_HourAlarm
  3405 ;;		_Lcd_Set_Cursor
  3406 ;;		_Lcd_Write_Char
  3407 ;;		_Lcd_Write_String
  3408 ;; This function is called by:
  3409 ;;		_main
  3410 ;; This function uses a non-reentrant model
  3411 ;;
  3412                           
  3413                           
  3414                           ;psect for function _Display_Alarm
  3415  05F4                     _Display_Alarm:	
  3416                           
  3417                           ;main.c: 249: if (alarm) {
  3418                           
  3419                           ;incstack = 0
  3420                           ; Regs used in _Display_Alarm: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3421  05F4  1683               	bsf	3,5	;RP0=1, select bank1
  3422  05F5  1303               	bcf	3,6	;RP1=0, select bank1
  3423  05F6  0831               	movf	_alarm^(0+128),w
  3424  05F7  1903               	btfsc	3,2
  3425  05F8  2E47               	goto	l3326
  3426                           
  3427                           ;main.c: 250: Lcd_Set_Cursor(1, 1);
  3428  05F9  01A3               	clrf	Lcd_Set_Cursor@b^(0+128)
  3429  05FA  0AA3               	incf	Lcd_Set_Cursor@b^(0+128),f
  3430  05FB  3001               	movlw	1
  3431  05FC  120A  158A  2102  120A  118A  	fcall	_Lcd_Set_Cursor
  3432                           
  3433                           ;main.c: 251: Lcd_Write_String("XOA HEN GIO?    ");
  3434  0601  3067               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  3435  0602  160A  118A  261B  120A  118A  	fcall	_Lcd_Write_String
  3436                           
  3437                           ;main.c: 253: Lcd_Set_Cursor(2, 1);
  3438  0607  1683               	bsf	3,5	;RP0=1, select bank1
  3439  0608  1303               	bcf	3,6	;RP1=0, select bank1
  3440  0609  01A3               	clrf	Lcd_Set_Cursor@b^(0+128)
  3441  060A  0AA3               	incf	Lcd_Set_Cursor@b^(0+128),f
  3442  060B  3002               	movlw	2
  3443  060C  120A  158A  2102  120A  118A  	fcall	_Lcd_Set_Cursor
  3444                           
  3445                           ;main.c: 254: Display_HourAlarm();
  3446  0611  160A  118A  2641  120A  118A  	fcall	_Display_HourAlarm
  3447                           
  3448                           ;main.c: 255: Display(hour_alarm_display);
  3449  0616  1683               	bsf	3,5	;RP0=1, select bank1
  3450  0617  1303               	bcf	3,6	;RP1=0, select bank1
  3451  0618  0835               	movf	_hour_alarm_display^(0+128),w
  3452  0619  160A  118A  26F6  120A  118A  	fcall	_Display
  3453                           
  3454                           ;main.c: 257: Lcd_Write_Char(':');
  3455  061E  303A               	movlw	58
  3456  061F  160A  118A  272C  120A  118A  	fcall	_Lcd_Write_Char
  3457                           
  3458                           ;main.c: 258: Display(minute_alarm);
  3459  0624  1683               	bsf	3,5	;RP0=1, select bank1
  3460  0625  1303               	bcf	3,6	;RP1=0, select bank1
  3461  0626  083F               	movf	_minute_alarm^(0+128),w
  3462  0627  160A  118A  26F6  120A  118A  	fcall	_Display
  3463                           
  3464                           ;main.c: 259: if (hour < 40) Lcd_Write_String("   ");
  3465  062C  3028               	movlw	40
  3466  062D  1683               	bsf	3,5	;RP0=1, select bank1
  3467  062E  1303               	bcf	3,6	;RP1=0, select bank1
  3468  062F  0234               	subwf	_hour^(0+128),w
  3469  0630  1803               	skipnc
  3470  0631  2E34               	goto	l3320
  3471  0632  300E               	movlw	(low (((STR_31+13)-__stringbase)| (0+32768)))& (0+255)
  3472  0633  2E3D               	goto	L3
  3473  0634                     l3320:	
  3474                           
  3475                           ;main.c: 260: else if (hour < 60) Lcd_Write_String(" AM");
  3476  0634  303C               	movlw	60
  3477  0635  1683               	bsf	3,5	;RP0=1, select bank1
  3478  0636  1303               	bcf	3,6	;RP1=0, select bank1
  3479  0637  0234               	subwf	_hour^(0+128),w
  3480  0638  1803               	skipnc
  3481  0639  2E3C               	goto	l3324
  3482  063A  30CE               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  3483  063B  2E3D               	goto	L3
  3484  063C                     l3324:	
  3485                           
  3486                           ;main.c: 261: else Lcd_Write_String(" PM");
  3487  063C  30D2               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  3488  063D                     L3:	
  3489  063D  160A  118A  261B  120A  118A  	fcall	_Lcd_Write_String
  3490                           
  3491                           ;main.c: 262: Lcd_Write_String("           ");
  3492  0642  3006               	movlw	(low (((STR_31+5)-__stringbase)| (0+32768)))& (0+255)
  3493  0643  160A  118A  261B   	fcall	_Lcd_Write_String
  3494                           
  3495                           ;main.c: 263: } else {
  3496  0646  0008               	return
  3497  0647                     l3326:	
  3498                           
  3499                           ;main.c: 264: Lcd_Set_Cursor(1, 1);
  3500  0647  1683               	bsf	3,5	;RP0=1, select bank1
  3501  0648  1303               	bcf	3,6	;RP1=0, select bank1
  3502  0649  01A3               	clrf	Lcd_Set_Cursor@b^(0+128)
  3503  064A  0AA3               	incf	Lcd_Set_Cursor@b^(0+128),f
  3504  064B  3001               	movlw	1
  3505  064C  120A  158A  2102  120A  118A  	fcall	_Lcd_Set_Cursor
  3506                           
  3507                           ;main.c: 265: Lcd_Write_String("HEN GIO         ");
  3508  0651  3012               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  3509  0652  160A  118A  261B  120A  118A  	fcall	_Lcd_Write_String
  3510                           
  3511                           ;main.c: 266: Lcd_Set_Cursor(2, 1);
  3512  0657  1683               	bsf	3,5	;RP0=1, select bank1
  3513  0658  1303               	bcf	3,6	;RP1=0, select bank1
  3514  0659  01A3               	clrf	Lcd_Set_Cursor@b^(0+128)
  3515  065A  0AA3               	incf	Lcd_Set_Cursor@b^(0+128),f
  3516  065B  3002               	movlw	2
  3517  065C  120A  158A  2102  120A  118A  	fcall	_Lcd_Set_Cursor
  3518                           
  3519                           ;main.c: 268: switch (set) {
  3520  0661  2EB7               	goto	l3358
  3521  0662                     l3332:	
  3522                           ;main.c: 270: case 1:
  3523                           
  3524                           
  3525                           ;main.c: 271: {
  3526                           ;main.c: 272: Lcd_Write_String("GIO: ");
  3527  0662  30B5               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  3528  0663  160A  118A  261B  120A  118A  	fcall	_Lcd_Write_String
  3529                           
  3530                           ;main.c: 273: Lcd_Set_Cursor(2, 6);
  3531  0668  3006               	movlw	6
  3532  0669  1683               	bsf	3,5	;RP0=1, select bank1
  3533  066A  1303               	bcf	3,6	;RP1=0, select bank1
  3534  066B  00AC               	movwf	??_Display_Alarm^(0+128)
  3535  066C  082C               	movf	??_Display_Alarm^(0+128),w
  3536  066D  00A3               	movwf	Lcd_Set_Cursor@b^(0+128)
  3537  066E  3002               	movlw	2
  3538  066F  120A  158A  2102  120A  118A  	fcall	_Lcd_Set_Cursor
  3539                           
  3540                           ;main.c: 274: Display_HourAlarm();
  3541  0674  160A  118A  2641  120A  118A  	fcall	_Display_HourAlarm
  3542                           
  3543                           ;main.c: 275: Display(hour_alarm_display);
  3544  0679  1683               	bsf	3,5	;RP0=1, select bank1
  3545  067A  1303               	bcf	3,6	;RP1=0, select bank1
  3546  067B  0835               	movf	_hour_alarm_display^(0+128),w
  3547  067C  160A  118A  26F6  120A  118A  	fcall	_Display
  3548                           
  3549                           ;main.c: 277: if (hour < 40) Lcd_Write_String("   ");
  3550  0681  3028               	movlw	40
  3551  0682  1683               	bsf	3,5	;RP0=1, select bank1
  3552  0683  1303               	bcf	3,6	;RP1=0, select bank1
  3553  0684  0234               	subwf	_hour^(0+128),w
  3554  0685  1803               	skipnc
  3555  0686  2E8E               	goto	l3344
  3556  0687  300E               	movlw	(low (((STR_31+13)-__stringbase)| (0+32768)))& (0+255)
  3557  0688  160A  118A  261B  120A  118A  	fcall	_Lcd_Write_String
  3558  068D  2EC1               	goto	l3360
  3559  068E                     l3344:	
  3560                           
  3561                           ;main.c: 278: else if (hour < 60) Lcd_Write_String(" AM");
  3562  068E  303C               	movlw	60
  3563  068F  1683               	bsf	3,5	;RP0=1, select bank1
  3564  0690  1303               	bcf	3,6	;RP1=0, select bank1
  3565  0691  0234               	subwf	_hour^(0+128),w
  3566  0692  1803               	skipnc
  3567  0693  2E9B               	goto	l3348
  3568  0694  30CE               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  3569  0695  160A  118A  261B  120A  118A  	fcall	_Lcd_Write_String
  3570  069A  2EC1               	goto	l3360
  3571  069B                     l3348:	
  3572                           
  3573                           ;main.c: 279: else Lcd_Write_String(" PM");
  3574  069B  30D2               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  3575  069C  160A  118A  261B  120A  118A  	fcall	_Lcd_Write_String
  3576                           
  3577                           ;main.c: 280: break;
  3578  06A1  2EC1               	goto	l3360
  3579  06A2                     l3350:	
  3580                           ;main.c: 281: }
  3581                           ;main.c: 283: case 2:
  3582                           
  3583                           
  3584                           ;main.c: 284: {
  3585                           ;main.c: 285: Lcd_Write_String("PHUT: ");
  3586  06A2  30A1               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  3587  06A3  160A  118A  261B  120A  118A  	fcall	_Lcd_Write_String
  3588                           
  3589                           ;main.c: 286: Display(minute_alarm);
  3590  06A8  1683               	bsf	3,5	;RP0=1, select bank1
  3591  06A9  1303               	bcf	3,6	;RP1=0, select bank1
  3592  06AA  083F               	movf	_minute_alarm^(0+128),w
  3593  06AB  160A  118A  26F6  120A  118A  	fcall	_Display
  3594                           
  3595                           ;main.c: 287: Lcd_Write_String("  ");
  3596  06B0  300F               	movlw	(low (((STR_31+14)-__stringbase)| (0+32768)))& (0+255)
  3597  06B1  160A  118A  261B  120A  118A  	fcall	_Lcd_Write_String
  3598                           
  3599                           ;main.c: 289: }
  3600                           ;main.c: 290: }
  3601                           
  3602                           ;main.c: 288: break;
  3603  06B6  2EC1               	goto	l3360
  3604  06B7                     l3358:	
  3605  06B7  1683               	bsf	3,5	;RP0=1, select bank1
  3606  06B8  1303               	bcf	3,6	;RP1=0, select bank1
  3607  06B9  083B               	movf	_set^(0+128),w
  3608                           
  3609                           ; Switch size 1, requested type "space"
  3610                           ; Number of cases is 2, Range of values is 1 to 2
  3611                           ; switch strategies available:
  3612                           ; Name         Instructions Cycles
  3613                           ; simple_byte            7     4 (average)
  3614                           ; direct_byte           17    11 (fixed)
  3615                           ; jumptable            263     9 (fixed)
  3616                           ;	Chosen strategy is simple_byte
  3617  06BA  3A01               	xorlw	1	; case 1
  3618  06BB  1903               	skipnz
  3619  06BC  2E62               	goto	l3332
  3620  06BD  3A03               	xorlw	3	; case 2
  3621  06BE  1903               	skipnz
  3622  06BF  2EA2               	goto	l3350
  3623  06C0  2EC1               	goto	l3360
  3624  06C1                     l3360:	
  3625                           
  3626                           ;main.c: 291: Lcd_Set_Cursor(2, 11);
  3627  06C1  300B               	movlw	11
  3628  06C2  1683               	bsf	3,5	;RP0=1, select bank1
  3629  06C3  1303               	bcf	3,6	;RP1=0, select bank1
  3630  06C4  00AC               	movwf	??_Display_Alarm^(0+128)
  3631  06C5  082C               	movf	??_Display_Alarm^(0+128),w
  3632  06C6  00A3               	movwf	Lcd_Set_Cursor@b^(0+128)
  3633  06C7  3002               	movlw	2
  3634  06C8  120A  158A  2102  120A  118A  	fcall	_Lcd_Set_Cursor
  3635                           
  3636                           ;main.c: 292: Lcd_Write_String("      ");
  3637  06CD  300B               	movlw	(low (((STR_31+10)-__stringbase)| (0+32768)))& (0+255)
  3638  06CE  160A  118A  261B   	fcall	_Lcd_Write_String
  3639  06D1  0008               	return
  3640  06D2                     __end_of_Display_Alarm:	
  3641                           
  3642                           	psect	text16
  3643  161B                     __ptext16:	
  3644 ;; *************** function _Lcd_Write_String *****************
  3645 ;; Defined at:
  3646 ;;		line 105 in file "LCD.c"
  3647 ;; Parameters:    Size  Location     Type
  3648 ;;  a               1    wreg     PTR unsigned char 
  3649 ;;		 -> STR_61(17), STR_60(17), STR_59(6), STR_58(16), 
  3650 ;;		 -> STR_57(8), STR_56(16), STR_55(7), STR_54(16), 
  3651 ;;		 -> STR_53(4), STR_52(4), STR_51(4), STR_50(4), 
  3652 ;;		 -> STR_49(4), STR_48(4), STR_47(4), STR_46(4), 
  3653 ;;		 -> STR_45(4), STR_44(6), STR_43(16), STR_42(4), 
  3654 ;;		 -> STR_41(4), STR_40(4), STR_39(6), STR_38(16), 
  3655 ;;		 -> STR_37(7), STR_36(16), STR_35(17), STR_34(17), 
  3656 ;;		 -> STR_33(17), STR_32(17), STR_31(17), STR_30(17), 
  3657 ;;		 -> STR_29(4), STR_28(4), STR_27(4), STR_26(4), 
  3658 ;;		 -> STR_25(4), STR_24(4), STR_23(4), STR_22(4), 
  3659 ;;		 -> STR_21(4), STR_20(4), STR_19(4), STR_18(5), 
  3660 ;;		 -> STR_17(5), STR_16(7), STR_15(3), STR_14(7), 
  3661 ;;		 -> STR_13(4), STR_12(4), STR_11(4), STR_10(6), 
  3662 ;;		 -> STR_9(17), STR_8(12), STR_7(4), STR_6(4), 
  3663 ;;		 -> STR_5(4), STR_4(17), STR_3(4), STR_2(4), 
  3664 ;;		 -> STR_1(4), 
  3665 ;; Auto vars:     Size  Location     Type
  3666 ;;  a               1    7[BANK1 ] PTR unsigned char 
  3667 ;;		 -> STR_61(17), STR_60(17), STR_59(6), STR_58(16), 
  3668 ;;		 -> STR_57(8), STR_56(16), STR_55(7), STR_54(16), 
  3669 ;;		 -> STR_53(4), STR_52(4), STR_51(4), STR_50(4), 
  3670 ;;		 -> STR_49(4), STR_48(4), STR_47(4), STR_46(4), 
  3671 ;;		 -> STR_45(4), STR_44(6), STR_43(16), STR_42(4), 
  3672 ;;		 -> STR_41(4), STR_40(4), STR_39(6), STR_38(16), 
  3673 ;;		 -> STR_37(7), STR_36(16), STR_35(17), STR_34(17), 
  3674 ;;		 -> STR_33(17), STR_32(17), STR_31(17), STR_30(17), 
  3675 ;;		 -> STR_29(4), STR_28(4), STR_27(4), STR_26(4), 
  3676 ;;		 -> STR_25(4), STR_24(4), STR_23(4), STR_22(4), 
  3677 ;;		 -> STR_21(4), STR_20(4), STR_19(4), STR_18(5), 
  3678 ;;		 -> STR_17(5), STR_16(7), STR_15(3), STR_14(7), 
  3679 ;;		 -> STR_13(4), STR_12(4), STR_11(4), STR_10(6), 
  3680 ;;		 -> STR_9(17), STR_8(12), STR_7(4), STR_6(4), 
  3681 ;;		 -> STR_5(4), STR_4(17), STR_3(4), STR_2(4), 
  3682 ;;		 -> STR_1(4), 
  3683 ;;  i               2    5[BANK1 ] int 
  3684 ;; Return value:  Size  Location     Type
  3685 ;;		None               void
  3686 ;; Registers used:
  3687 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3688 ;; Tracked objects:
  3689 ;;		On entry : 0/0
  3690 ;;		On exit  : 0/0
  3691 ;;		Unchanged: 0/0
  3692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3693 ;;      Params:         0       0       0       0       0
  3694 ;;      Locals:         0       0       3       0       0
  3695 ;;      Temps:          0       0       0       0       0
  3696 ;;      Totals:         0       0       3       0       0
  3697 ;;Total ram usage:        3 bytes
  3698 ;; Hardware stack levels used:    1
  3699 ;; Hardware stack levels required when called:    6
  3700 ;; This function calls:
  3701 ;;		_Lcd_Write_Char
  3702 ;; This function is called by:
  3703 ;;		_Display_Alarm
  3704 ;;		_Display_Time
  3705 ;;		_Display_SetTime
  3706 ;;		_main
  3707 ;;		_Display_AM_PM
  3708 ;; This function uses a non-reentrant model
  3709 ;;
  3710                           
  3711                           
  3712                           ;psect for function _Lcd_Write_String
  3713  161B                     _Lcd_Write_String:	
  3714                           
  3715                           ;incstack = 0
  3716                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3717                           ;Lcd_Write_String@a stored from wreg
  3718  161B  1683               	bsf	3,5	;RP0=1, select bank1
  3719  161C  1303               	bcf	3,6	;RP1=0, select bank1
  3720  161D  00A7               	movwf	Lcd_Write_String@a^(0+128)
  3721                           
  3722                           ;LCD.c: 107: int i;
  3723                           ;LCD.c: 108: for(i=0;a[i]!='\0';i++)
  3724  161E  01A5               	clrf	Lcd_Write_String@i^(0+128)
  3725  161F  01A6               	clrf	(Lcd_Write_String@i+1)^(0+128)
  3726  1620                     l2868:	
  3727  1620  0825               	movf	Lcd_Write_String@i^(0+128),w
  3728  1621  0727               	addwf	Lcd_Write_String@a^(0+128),w
  3729  1622  0084               	movwf	4
  3730  1623  120A  118A  2505  160A  118A  	fcall	stringdir
  3731  1628  3A00               	xorlw	0
  3732  1629  1903               	btfsc	3,2
  3733  162A  0008               	return
  3734                           
  3735                           ;LCD.c: 109: Lcd_Write_Char(a[i]);
  3736  162B  0825               	movf	Lcd_Write_String@i^(0+128),w
  3737  162C  0727               	addwf	Lcd_Write_String@a^(0+128),w
  3738  162D  0084               	movwf	4
  3739  162E  120A  118A  2505  160A  118A  	fcall	stringdir
  3740  1633  160A  118A  272C  160A  118A  	fcall	_Lcd_Write_Char
  3741  1638  3001               	movlw	1
  3742  1639  1683               	bsf	3,5	;RP0=1, select bank1
  3743  163A  1303               	bcf	3,6	;RP1=0, select bank1
  3744  163B  07A5               	addwf	Lcd_Write_String@i^(0+128),f
  3745  163C  1803               	skipnc
  3746  163D  0AA6               	incf	(Lcd_Write_String@i+1)^(0+128),f
  3747  163E  3000               	movlw	0
  3748  163F  07A6               	addwf	(Lcd_Write_String@i+1)^(0+128),f
  3749  1640  2E20               	goto	l2868
  3750  1641                     __end_of_Lcd_Write_String:	
  3751                           
  3752                           	psect	text17
  3753  0902                     __ptext17:	
  3754 ;; *************** function _Lcd_Set_Cursor *****************
  3755 ;; Defined at:
  3756 ;;		line 49 in file "LCD.c"
  3757 ;; Parameters:    Size  Location     Type
  3758 ;;  a               1    wreg     unsigned char 
  3759 ;;  b               1    3[BANK1 ] unsigned char 
  3760 ;; Auto vars:     Size  Location     Type
  3761 ;;  a               1    6[BANK1 ] unsigned char 
  3762 ;;  temp            1    9[BANK1 ] unsigned char 
  3763 ;;  y               1    8[BANK1 ] unsigned char 
  3764 ;;  z               1    7[BANK1 ] unsigned char 
  3765 ;; Return value:  Size  Location     Type
  3766 ;;		None               void
  3767 ;; Registers used:
  3768 ;;		wreg, status,2, status,0, pclath, cstack
  3769 ;; Tracked objects:
  3770 ;;		On entry : 0/0
  3771 ;;		On exit  : 0/0
  3772 ;;		Unchanged: 0/0
  3773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3774 ;;      Params:         0       0       1       0       0
  3775 ;;      Locals:         0       0       4       0       0
  3776 ;;      Temps:          0       0       2       0       0
  3777 ;;      Totals:         0       0       7       0       0
  3778 ;;Total ram usage:        7 bytes
  3779 ;; Hardware stack levels used:    1
  3780 ;; Hardware stack levels required when called:    6
  3781 ;; This function calls:
  3782 ;;		_Lcd_Cmd
  3783 ;; This function is called by:
  3784 ;;		_Display_Alarm
  3785 ;;		_Display_Time
  3786 ;;		_Display_SetTime
  3787 ;;		_main
  3788 ;; This function uses a non-reentrant model
  3789 ;;
  3790                           
  3791                           
  3792                           ;psect for function _Lcd_Set_Cursor
  3793  0902                     _Lcd_Set_Cursor:	
  3794                           
  3795                           ;incstack = 0
  3796                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  3797                           ;Lcd_Set_Cursor@a stored from wreg
  3798  0902  1683               	bsf	3,5	;RP0=1, select bank1
  3799  0903  1303               	bcf	3,6	;RP1=0, select bank1
  3800  0904  00A6               	movwf	Lcd_Set_Cursor@a^(0+128)
  3801                           
  3802                           ;LCD.c: 51: char temp,z,y;
  3803                           ;LCD.c: 52: if(a == 1)
  3804  0905  0326               	decf	Lcd_Set_Cursor@a^(0+128),w
  3805  0906  1D03               	btfss	3,2
  3806  0907  292B               	goto	l2880
  3807                           
  3808                           ;LCD.c: 53: {
  3809                           ;LCD.c: 54: temp = 0x80 + b - 1;
  3810  0908  0823               	movf	Lcd_Set_Cursor@b^(0+128),w
  3811  0909  3E7F               	addlw	127
  3812  090A  00A4               	movwf	??_Lcd_Set_Cursor^(0+128)
  3813  090B  0824               	movf	??_Lcd_Set_Cursor^(0+128),w
  3814  090C  00A9               	movwf	Lcd_Set_Cursor@temp^(0+128)
  3815                           
  3816                           ;LCD.c: 55: z = temp>>4;
  3817  090D  0829               	movf	Lcd_Set_Cursor@temp^(0+128),w
  3818  090E  00A4               	movwf	??_Lcd_Set_Cursor^(0+128)
  3819  090F  3004               	movlw	4
  3820  0910                     u3555:	
  3821  0910  1003               	clrc
  3822  0911  0CA4               	rrf	??_Lcd_Set_Cursor^(0+128),f
  3823  0912  3EFF               	addlw	-1
  3824  0913  1D03               	skipz
  3825  0914  2910               	goto	u3555
  3826  0915  0824               	movf	??_Lcd_Set_Cursor^(0+128),w
  3827  0916  00A5               	movwf	(??_Lcd_Set_Cursor+1)^(0+128)
  3828  0917  0825               	movf	(??_Lcd_Set_Cursor+1)^(0+128),w
  3829  0918  00A7               	movwf	Lcd_Set_Cursor@z^(0+128)
  3830                           
  3831                           ;LCD.c: 56: y = temp & 0x0F;
  3832  0919  0829               	movf	Lcd_Set_Cursor@temp^(0+128),w
  3833  091A  390F               	andlw	15
  3834  091B  00A4               	movwf	??_Lcd_Set_Cursor^(0+128)
  3835  091C  0824               	movf	??_Lcd_Set_Cursor^(0+128),w
  3836  091D  00A8               	movwf	Lcd_Set_Cursor@y^(0+128)
  3837                           
  3838                           ;LCD.c: 57: Lcd_Cmd(z);
  3839  091E  0827               	movf	Lcd_Set_Cursor@z^(0+128),w
  3840  091F  160A  118A  25BD  120A  158A  	fcall	_Lcd_Cmd
  3841                           
  3842                           ;LCD.c: 58: Lcd_Cmd(y);
  3843  0924  1683               	bsf	3,5	;RP0=1, select bank1
  3844  0925  1303               	bcf	3,6	;RP1=0, select bank1
  3845  0926  0828               	movf	Lcd_Set_Cursor@y^(0+128),w
  3846  0927  160A  118A  25BD   	fcall	_Lcd_Cmd
  3847                           
  3848                           ;LCD.c: 59: }
  3849  092A  0008               	return
  3850  092B                     l2880:	
  3851                           
  3852                           ;LCD.c: 60: else if(a == 2)
  3853  092B  3002               	movlw	2
  3854  092C  1683               	bsf	3,5	;RP0=1, select bank1
  3855  092D  1303               	bcf	3,6	;RP1=0, select bank1
  3856  092E  0626               	xorwf	Lcd_Set_Cursor@a^(0+128),w
  3857  092F  1D03               	btfss	3,2
  3858  0930  0008               	return
  3859                           
  3860                           ;LCD.c: 61: {
  3861                           ;LCD.c: 62: temp = 0xC0 + b - 1;
  3862  0931  0823               	movf	Lcd_Set_Cursor@b^(0+128),w
  3863  0932  3EBF               	addlw	191
  3864  0933  00A4               	movwf	??_Lcd_Set_Cursor^(0+128)
  3865  0934  0824               	movf	??_Lcd_Set_Cursor^(0+128),w
  3866  0935  00A9               	movwf	Lcd_Set_Cursor@temp^(0+128)
  3867                           
  3868                           ;LCD.c: 63: z = temp>>4;
  3869  0936  0829               	movf	Lcd_Set_Cursor@temp^(0+128),w
  3870  0937  00A4               	movwf	??_Lcd_Set_Cursor^(0+128)
  3871  0938  3004               	movlw	4
  3872  0939                     u3575:	
  3873  0939  1003               	clrc
  3874  093A  0CA4               	rrf	??_Lcd_Set_Cursor^(0+128),f
  3875  093B  3EFF               	addlw	-1
  3876  093C  1D03               	skipz
  3877  093D  2939               	goto	u3575
  3878  093E  0824               	movf	??_Lcd_Set_Cursor^(0+128),w
  3879  093F  00A5               	movwf	(??_Lcd_Set_Cursor+1)^(0+128)
  3880  0940  0825               	movf	(??_Lcd_Set_Cursor+1)^(0+128),w
  3881  0941  00A7               	movwf	Lcd_Set_Cursor@z^(0+128)
  3882                           
  3883                           ;LCD.c: 64: y = temp & 0x0F;
  3884  0942  0829               	movf	Lcd_Set_Cursor@temp^(0+128),w
  3885  0943  390F               	andlw	15
  3886  0944  00A4               	movwf	??_Lcd_Set_Cursor^(0+128)
  3887  0945  0824               	movf	??_Lcd_Set_Cursor^(0+128),w
  3888  0946  00A8               	movwf	Lcd_Set_Cursor@y^(0+128)
  3889                           
  3890                           ;LCD.c: 65: Lcd_Cmd(z);
  3891  0947  0827               	movf	Lcd_Set_Cursor@z^(0+128),w
  3892  0948  160A  118A  25BD  120A  158A  	fcall	_Lcd_Cmd
  3893                           
  3894                           ;LCD.c: 66: Lcd_Cmd(y);
  3895  094D  1683               	bsf	3,5	;RP0=1, select bank1
  3896  094E  1303               	bcf	3,6	;RP1=0, select bank1
  3897  094F  0828               	movf	Lcd_Set_Cursor@y^(0+128),w
  3898  0950  160A  118A  25BD   	fcall	_Lcd_Cmd
  3899  0953  0008               	return
  3900  0954                     __end_of_Lcd_Set_Cursor:	
  3901                           
  3902                           	psect	text18
  3903  15BD                     __ptext18:	
  3904 ;; *************** function _Lcd_Cmd *****************
  3905 ;; Defined at:
  3906 ;;		line 34 in file "LCD.c"
  3907 ;; Parameters:    Size  Location     Type
  3908 ;;  a               1    wreg     unsigned char 
  3909 ;; Auto vars:     Size  Location     Type
  3910 ;;  a               1    2[BANK1 ] unsigned char 
  3911 ;; Return value:  Size  Location     Type
  3912 ;;		None               void
  3913 ;; Registers used:
  3914 ;;		wreg, status,2, status,0, pclath, cstack
  3915 ;; Tracked objects:
  3916 ;;		On entry : 0/0
  3917 ;;		On exit  : 0/0
  3918 ;;		Unchanged: 0/0
  3919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3920 ;;      Params:         0       0       0       0       0
  3921 ;;      Locals:         0       0       1       0       0
  3922 ;;      Temps:          0       0       1       0       0
  3923 ;;      Totals:         0       0       2       0       0
  3924 ;;Total ram usage:        2 bytes
  3925 ;; Hardware stack levels used:    1
  3926 ;; Hardware stack levels required when called:    5
  3927 ;; This function calls:
  3928 ;;		_Lcd_Port
  3929 ;; This function is called by:
  3930 ;;		_Lcd_Set_Cursor
  3931 ;;		_Lcd_Init
  3932 ;;		_Lcd_Clear
  3933 ;;		_Lcd_Shift_Right
  3934 ;;		_Lcd_Shift_Left
  3935 ;; This function uses a non-reentrant model
  3936 ;;
  3937                           
  3938                           
  3939                           ;psect for function _Lcd_Cmd
  3940  15BD                     _Lcd_Cmd:	
  3941                           
  3942                           ;incstack = 0
  3943                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  3944                           ;Lcd_Cmd@a stored from wreg
  3945  15BD  1683               	bsf	3,5	;RP0=1, select bank1
  3946  15BE  1303               	bcf	3,6	;RP1=0, select bank1
  3947  15BF  00A2               	movwf	Lcd_Cmd@a^(0+128)
  3948                           
  3949                           ;LCD.c: 36: RD2 = 0;
  3950  15C0  1283               	bcf	3,5	;RP0=0, select bank0
  3951  15C1  1303               	bcf	3,6	;RP1=0, select bank0
  3952  15C2  1108               	bcf	8,2	;volatile
  3953                           
  3954                           ;LCD.c: 37: Lcd_Port(a);
  3955  15C3  1683               	bsf	3,5	;RP0=1, select bank1
  3956  15C4  1303               	bcf	3,6	;RP1=0, select bank1
  3957  15C5  0822               	movf	Lcd_Cmd@a^(0+128),w
  3958  15C6  160A  118A  2694  160A  118A  	fcall	_Lcd_Port
  3959                           
  3960                           ;LCD.c: 38: RD3 = 1;
  3961  15CB  1283               	bcf	3,5	;RP0=0, select bank0
  3962  15CC  1303               	bcf	3,6	;RP1=0, select bank0
  3963  15CD  1588               	bsf	8,3	;volatile
  3964                           
  3965                           ;LCD.c: 39: _delay((unsigned long)((4)*(1000000/4000.0)));
  3966  15CE  30F9               	movlw	249
  3967  15CF  1683               	bsf	3,5	;RP0=1, select bank1
  3968  15D0  1303               	bcf	3,6	;RP1=0, select bank1
  3969  15D1  00A1               	movwf	??_Lcd_Cmd^(0+128)
  3970  15D2                     u5157:	
  3971  15D2  0000               	nop
  3972  15D3  0BA1               	decfsz	??_Lcd_Cmd^(0+128),f
  3973  15D4  2DD2               	goto	u5157
  3974  15D5  2DD6               	nop2	;nop
  3975  15D6  0000               	nop
  3976                           
  3977                           ;LCD.c: 40: RD3 = 0;
  3978  15D7  1283               	bcf	3,5	;RP0=0, select bank0
  3979  15D8  1303               	bcf	3,6	;RP1=0, select bank0
  3980  15D9  1188               	bcf	8,3	;volatile
  3981  15DA  0008               	return
  3982  15DB                     __end_of_Lcd_Cmd:	
  3983                           
  3984                           	psect	text19
  3985  1641                     __ptext19:	
  3986 ;; *************** function _Display_HourAlarm *****************
  3987 ;; Defined at:
  3988 ;;		line 215 in file "main.c"
  3989 ;; Parameters:    Size  Location     Type
  3990 ;;		None
  3991 ;; Auto vars:     Size  Location     Type
  3992 ;;		None
  3993 ;; Return value:  Size  Location     Type
  3994 ;;		None               void
  3995 ;; Registers used:
  3996 ;;		wreg, status,2, status,0
  3997 ;; Tracked objects:
  3998 ;;		On entry : 0/0
  3999 ;;		On exit  : 0/0
  4000 ;;		Unchanged: 0/0
  4001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4002 ;;      Params:         0       0       0       0       0
  4003 ;;      Locals:         0       0       0       0       0
  4004 ;;      Temps:          0       0       1       0       0
  4005 ;;      Totals:         0       0       1       0       0
  4006 ;;Total ram usage:        1 bytes
  4007 ;; Hardware stack levels used:    1
  4008 ;; Hardware stack levels required when called:    4
  4009 ;; This function calls:
  4010 ;;		Nothing
  4011 ;; This function is called by:
  4012 ;;		_Display_Alarm
  4013 ;; This function uses a non-reentrant model
  4014 ;;
  4015                           
  4016                           
  4017                           ;psect for function _Display_HourAlarm
  4018  1641                     _Display_HourAlarm:	
  4019                           
  4020                           ;main.c: 216: if (hour_alarm < 40) hour_alarm_display = hour_alarm;
  4021                           
  4022                           ;incstack = 0
  4023                           ; Regs used in _Display_HourAlarm: [wreg+status,2+status,0]
  4024  1641  3028               	movlw	40
  4025  1642  1283               	bcf	3,5	;RP0=0, select bank0
  4026  1643  1303               	bcf	3,6	;RP1=0, select bank0
  4027  1644  0258               	subwf	_hour_alarm,w
  4028  1645  1803               	skipnc
  4029  1646  2E4E               	goto	l2854
  4030  1647  0858               	movf	_hour_alarm,w
  4031  1648  1683               	bsf	3,5	;RP0=1, select bank1
  4032  1649  1303               	bcf	3,6	;RP1=0, select bank1
  4033  164A  00A0               	movwf	??_Display_HourAlarm^(0+128)
  4034  164B  0820               	movf	??_Display_HourAlarm^(0+128),w
  4035  164C  00B5               	movwf	_hour_alarm_display^(0+128)
  4036  164D  0008               	return
  4037  164E                     l2854:	
  4038                           
  4039                           ;main.c: 217: else if (hour_alarm < 60) hour_alarm_display = hour_alarm - 40;
  4040  164E  303C               	movlw	60
  4041  164F  1283               	bcf	3,5	;RP0=0, select bank0
  4042  1650  0258               	subwf	_hour_alarm,w
  4043  1651  1803               	skipnc
  4044  1652  2E5B               	goto	l2858
  4045  1653  0858               	movf	_hour_alarm,w
  4046  1654  3ED8               	addlw	216
  4047  1655  1683               	bsf	3,5	;RP0=1, select bank1
  4048  1656  1303               	bcf	3,6	;RP1=0, select bank1
  4049  1657  00A0               	movwf	??_Display_HourAlarm^(0+128)
  4050  1658  0820               	movf	??_Display_HourAlarm^(0+128),w
  4051  1659  00B5               	movwf	_hour_alarm_display^(0+128)
  4052  165A  0008               	return
  4053  165B                     l2858:	
  4054                           
  4055                           ;main.c: 218: else if (hour_alarm > 60) hour_alarm_display = hour_alarm - 60;
  4056  165B  303D               	movlw	61
  4057  165C  1283               	bcf	3,5	;RP0=0, select bank0
  4058  165D  0258               	subwf	_hour_alarm,w
  4059  165E  1C03               	skipc
  4060  165F  0008               	return
  4061  1660  0858               	movf	_hour_alarm,w
  4062  1661  3EC4               	addlw	196
  4063  1662  1683               	bsf	3,5	;RP0=1, select bank1
  4064  1663  1303               	bcf	3,6	;RP1=0, select bank1
  4065  1664  00A0               	movwf	??_Display_HourAlarm^(0+128)
  4066  1665  0820               	movf	??_Display_HourAlarm^(0+128),w
  4067  1666  00B5               	movwf	_hour_alarm_display^(0+128)
  4068  1667  0008               	return
  4069  1668                     __end_of_Display_HourAlarm:	
  4070                           
  4071                           	psect	text20
  4072  16F6                     __ptext20:	
  4073 ;; *************** function _Display *****************
  4074 ;; Defined at:
  4075 ;;		line 204 in file "main.c"
  4076 ;; Parameters:    Size  Location     Type
  4077 ;;  One             1    wreg     unsigned char 
  4078 ;; Auto vars:     Size  Location     Type
  4079 ;;  One             1   11[BANK1 ] unsigned char 
  4080 ;; Return value:  Size  Location     Type
  4081 ;;		None               void
  4082 ;; Registers used:
  4083 ;;		wreg, status,2, status,0, pclath, cstack
  4084 ;; Tracked objects:
  4085 ;;		On entry : 0/0
  4086 ;;		On exit  : 0/0
  4087 ;;		Unchanged: 0/0
  4088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4089 ;;      Params:         0       0       0       0       0
  4090 ;;      Locals:         0       0       1       0       0
  4091 ;;      Temps:          0       0       2       0       0
  4092 ;;      Totals:         0       0       3       0       0
  4093 ;;Total ram usage:        3 bytes
  4094 ;; Hardware stack levels used:    1
  4095 ;; Hardware stack levels required when called:    6
  4096 ;; This function calls:
  4097 ;;		_Lcd_Write_Char
  4098 ;;		___awdiv
  4099 ;;		___awmod
  4100 ;; This function is called by:
  4101 ;;		_Display_Alarm
  4102 ;;		_Display_Time
  4103 ;;		_Display_SetTime
  4104 ;; This function uses a non-reentrant model
  4105 ;;
  4106                           
  4107                           
  4108                           ;psect for function _Display
  4109  16F6                     _Display:	
  4110                           
  4111                           ;incstack = 0
  4112                           ; Regs used in _Display: [wreg+status,2+status,0+pclath+cstack]
  4113                           ;Display@One stored from wreg
  4114  16F6  1683               	bsf	3,5	;RP0=1, select bank1
  4115  16F7  1303               	bcf	3,6	;RP1=0, select bank1
  4116  16F8  00AB               	movwf	Display@One^(0+128)
  4117                           
  4118                           ;main.c: 205: Lcd_Write_Char(One / 10 + 0x30);
  4119  16F9  300A               	movlw	10
  4120  16FA  00A0               	movwf	___awdiv@divisor^(0+128)
  4121  16FB  3000               	movlw	0
  4122  16FC  00A1               	movwf	(___awdiv@divisor^(0+128)+1)
  4123  16FD  082B               	movf	Display@One^(0+128),w
  4124  16FE  00A9               	movwf	??_Display^(0+128)
  4125  16FF  01AA               	clrf	(??_Display^(0+128)+1)
  4126  1700  0829               	movf	??_Display^(0+128),w
  4127  1701  00A2               	movwf	___awdiv@dividend^(0+128)
  4128  1702  082A               	movf	(??_Display+1)^(0+128),w
  4129  1703  00A3               	movwf	(___awdiv@dividend+1)^(0+128)
  4130  1704  120A  118A  27A3  160A  118A  	fcall	___awdiv
  4131  1709  1683               	bsf	3,5	;RP0=1, select bank1
  4132  170A  1303               	bcf	3,6	;RP1=0, select bank1
  4133  170B  0820               	movf	?___awdiv^(0+128),w
  4134  170C  3E30               	addlw	48
  4135  170D  160A  118A  272C  160A  118A  	fcall	_Lcd_Write_Char
  4136                           
  4137                           ;main.c: 206: Lcd_Write_Char(One % 10 + 0x30);
  4138  1712  300A               	movlw	10
  4139  1713  1683               	bsf	3,5	;RP0=1, select bank1
  4140  1714  1303               	bcf	3,6	;RP1=0, select bank1
  4141  1715  00A0               	movwf	___awmod@divisor^(0+128)
  4142  1716  3000               	movlw	0
  4143  1717  00A1               	movwf	(___awmod@divisor^(0+128)+1)
  4144  1718  082B               	movf	Display@One^(0+128),w
  4145  1719  00A9               	movwf	??_Display^(0+128)
  4146  171A  01AA               	clrf	(??_Display^(0+128)+1)
  4147  171B  0829               	movf	??_Display^(0+128),w
  4148  171C  00A2               	movwf	___awmod@dividend^(0+128)
  4149  171D  082A               	movf	(??_Display+1)^(0+128),w
  4150  171E  00A3               	movwf	(___awmod@dividend+1)^(0+128)
  4151  171F  120A  158A  20B5  160A  118A  	fcall	___awmod
  4152  1724  1683               	bsf	3,5	;RP0=1, select bank1
  4153  1725  1303               	bcf	3,6	;RP1=0, select bank1
  4154  1726  0820               	movf	?___awmod^(0+128),w
  4155  1727  3E30               	addlw	48
  4156  1728  160A  118A  272C   	fcall	_Lcd_Write_Char
  4157  172B  0008               	return
  4158  172C                     __end_of_Display:	
  4159                           
  4160                           	psect	text21
  4161  08B5                     __ptext21:	
  4162 ;; *************** function ___awmod *****************
  4163 ;; Defined at:
  4164 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\awmod.c"
  4165 ;; Parameters:    Size  Location     Type
  4166 ;;  divisor         2    0[BANK1 ] int 
  4167 ;;  dividend        2    2[BANK1 ] int 
  4168 ;; Auto vars:     Size  Location     Type
  4169 ;;  sign            1    6[BANK1 ] unsigned char 
  4170 ;;  counter         1    5[BANK1 ] unsigned char 
  4171 ;; Return value:  Size  Location     Type
  4172 ;;                  2    0[BANK1 ] int 
  4173 ;; Registers used:
  4174 ;;		wreg, status,2, status,0
  4175 ;; Tracked objects:
  4176 ;;		On entry : 0/0
  4177 ;;		On exit  : 0/0
  4178 ;;		Unchanged: 0/0
  4179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4180 ;;      Params:         0       0       4       0       0
  4181 ;;      Locals:         0       0       2       0       0
  4182 ;;      Temps:          0       0       1       0       0
  4183 ;;      Totals:         0       0       7       0       0
  4184 ;;Total ram usage:        7 bytes
  4185 ;; Hardware stack levels used:    1
  4186 ;; Hardware stack levels required when called:    4
  4187 ;; This function calls:
  4188 ;;		Nothing
  4189 ;; This function is called by:
  4190 ;;		_Display
  4191 ;;		_Display_Time
  4192 ;;		_Display_SetTime
  4193 ;; This function uses a non-reentrant model
  4194 ;;
  4195                           
  4196                           
  4197                           ;psect for function ___awmod
  4198  08B5                     ___awmod:	
  4199                           
  4200                           ;incstack = 0
  4201                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  4202  08B5  1683               	bsf	3,5	;RP0=1, select bank1
  4203  08B6  1303               	bcf	3,6	;RP1=0, select bank1
  4204  08B7  01A6               	clrf	___awmod@sign^(0+128)
  4205  08B8  1FA3               	btfss	(___awmod@dividend+1)^(0+128),7
  4206  08B9  28C1               	goto	l2600
  4207  08BA  09A2               	comf	___awmod@dividend^(0+128),f
  4208  08BB  09A3               	comf	(___awmod@dividend+1)^(0+128),f
  4209  08BC  0AA2               	incf	___awmod@dividend^(0+128),f
  4210  08BD  1903               	skipnz
  4211  08BE  0AA3               	incf	(___awmod@dividend+1)^(0+128),f
  4212  08BF  01A6               	clrf	___awmod@sign^(0+128)
  4213  08C0  0AA6               	incf	___awmod@sign^(0+128),f
  4214  08C1                     l2600:	
  4215  08C1  1FA1               	btfss	(___awmod@divisor+1)^(0+128),7
  4216  08C2  28C8               	goto	l2604
  4217  08C3  09A0               	comf	___awmod@divisor^(0+128),f
  4218  08C4  09A1               	comf	(___awmod@divisor+1)^(0+128),f
  4219  08C5  0AA0               	incf	___awmod@divisor^(0+128),f
  4220  08C6  1903               	skipnz
  4221  08C7  0AA1               	incf	(___awmod@divisor+1)^(0+128),f
  4222  08C8                     l2604:	
  4223  08C8  0820               	movf	___awmod@divisor^(0+128),w
  4224  08C9  0421               	iorwf	(___awmod@divisor+1)^(0+128),w
  4225  08CA  1903               	btfsc	3,2
  4226  08CB  28F5               	goto	l2622
  4227  08CC  01A5               	clrf	___awmod@counter^(0+128)
  4228  08CD  0AA5               	incf	___awmod@counter^(0+128),f
  4229  08CE                     l2612:	
  4230  08CE  1BA1               	btfsc	(___awmod@divisor+1)^(0+128),7
  4231  08CF  28DC               	goto	l2614
  4232  08D0  3001               	movlw	1
  4233  08D1                     u2945:	
  4234  08D1  1003               	clrc
  4235  08D2  0DA0               	rlf	___awmod@divisor^(0+128),f
  4236  08D3  0DA1               	rlf	(___awmod@divisor+1)^(0+128),f
  4237  08D4  3EFF               	addlw	-1
  4238  08D5  1D03               	skipz
  4239  08D6  28D1               	goto	u2945
  4240  08D7  3001               	movlw	1
  4241  08D8  00A4               	movwf	??___awmod^(0+128)
  4242  08D9  0824               	movf	??___awmod^(0+128),w
  4243  08DA  07A5               	addwf	___awmod@counter^(0+128),f
  4244  08DB  28CE               	goto	l2612
  4245  08DC                     l2614:	
  4246  08DC  0821               	movf	(___awmod@divisor+1)^(0+128),w
  4247  08DD  0223               	subwf	(___awmod@dividend+1)^(0+128),w
  4248  08DE  1D03               	skipz
  4249  08DF  28E2               	goto	u2965
  4250  08E0  0820               	movf	___awmod@divisor^(0+128),w
  4251  08E1  0222               	subwf	___awmod@dividend^(0+128),w
  4252  08E2                     u2965:	
  4253  08E2  1C03               	skipc
  4254  08E3  28EA               	goto	l2618
  4255  08E4  0820               	movf	___awmod@divisor^(0+128),w
  4256  08E5  02A2               	subwf	___awmod@dividend^(0+128),f
  4257  08E6  0821               	movf	(___awmod@divisor+1)^(0+128),w
  4258  08E7  1C03               	skipc
  4259  08E8  03A3               	decf	(___awmod@dividend+1)^(0+128),f
  4260  08E9  02A3               	subwf	(___awmod@dividend+1)^(0+128),f
  4261  08EA                     l2618:	
  4262  08EA  3001               	movlw	1
  4263  08EB                     u2975:	
  4264  08EB  1003               	clrc
  4265  08EC  0CA1               	rrf	(___awmod@divisor+1)^(0+128),f
  4266  08ED  0CA0               	rrf	___awmod@divisor^(0+128),f
  4267  08EE  3EFF               	addlw	-1
  4268  08EF  1D03               	skipz
  4269  08F0  28EB               	goto	u2975
  4270  08F1  3001               	movlw	1
  4271  08F2  02A5               	subwf	___awmod@counter^(0+128),f
  4272  08F3  1D03               	btfss	3,2
  4273  08F4  28DC               	goto	l2614
  4274  08F5                     l2622:	
  4275  08F5  0826               	movf	___awmod@sign^(0+128),w
  4276  08F6  1903               	btfsc	3,2
  4277  08F7  28FD               	goto	l2626
  4278  08F8  09A2               	comf	___awmod@dividend^(0+128),f
  4279  08F9  09A3               	comf	(___awmod@dividend+1)^(0+128),f
  4280  08FA  0AA2               	incf	___awmod@dividend^(0+128),f
  4281  08FB  1903               	skipnz
  4282  08FC  0AA3               	incf	(___awmod@dividend+1)^(0+128),f
  4283  08FD                     l2626:	
  4284  08FD  0823               	movf	(___awmod@dividend+1)^(0+128),w
  4285  08FE  00A1               	movwf	(?___awmod+1)^(0+128)
  4286  08FF  0822               	movf	___awmod@dividend^(0+128),w
  4287  0900  00A0               	movwf	?___awmod^(0+128)
  4288  0901  0008               	return
  4289  0902                     __end_of___awmod:	
  4290                           
  4291                           	psect	text22
  4292  07A3                     __ptext22:	
  4293 ;; *************** function ___awdiv *****************
  4294 ;; Defined at:
  4295 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\awdiv.c"
  4296 ;; Parameters:    Size  Location     Type
  4297 ;;  divisor         2    0[BANK1 ] int 
  4298 ;;  dividend        2    2[BANK1 ] int 
  4299 ;; Auto vars:     Size  Location     Type
  4300 ;;  quotient        2    7[BANK1 ] int 
  4301 ;;  sign            1    6[BANK1 ] unsigned char 
  4302 ;;  counter         1    5[BANK1 ] unsigned char 
  4303 ;; Return value:  Size  Location     Type
  4304 ;;                  2    0[BANK1 ] int 
  4305 ;; Registers used:
  4306 ;;		wreg, status,2, status,0
  4307 ;; Tracked objects:
  4308 ;;		On entry : 0/0
  4309 ;;		On exit  : 0/0
  4310 ;;		Unchanged: 0/0
  4311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4312 ;;      Params:         0       0       4       0       0
  4313 ;;      Locals:         0       0       4       0       0
  4314 ;;      Temps:          0       0       1       0       0
  4315 ;;      Totals:         0       0       9       0       0
  4316 ;;Total ram usage:        9 bytes
  4317 ;; Hardware stack levels used:    1
  4318 ;; Hardware stack levels required when called:    4
  4319 ;; This function calls:
  4320 ;;		Nothing
  4321 ;; This function is called by:
  4322 ;;		_Display
  4323 ;; This function uses a non-reentrant model
  4324 ;;
  4325                           
  4326                           
  4327                           ;psect for function ___awdiv
  4328  07A3                     ___awdiv:	
  4329                           
  4330                           ;incstack = 0
  4331                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  4332  07A3  1683               	bsf	3,5	;RP0=1, select bank1
  4333  07A4  1303               	bcf	3,6	;RP1=0, select bank1
  4334  07A5  01A6               	clrf	___awdiv@sign^(0+128)
  4335  07A6  1FA1               	btfss	(___awdiv@divisor+1)^(0+128),7
  4336  07A7  2FAF               	goto	l2556
  4337  07A8  09A0               	comf	___awdiv@divisor^(0+128),f
  4338  07A9  09A1               	comf	(___awdiv@divisor+1)^(0+128),f
  4339  07AA  0AA0               	incf	___awdiv@divisor^(0+128),f
  4340  07AB  1903               	skipnz
  4341  07AC  0AA1               	incf	(___awdiv@divisor+1)^(0+128),f
  4342  07AD  01A6               	clrf	___awdiv@sign^(0+128)
  4343  07AE  0AA6               	incf	___awdiv@sign^(0+128),f
  4344  07AF                     l2556:	
  4345  07AF  1FA3               	btfss	(___awdiv@dividend+1)^(0+128),7
  4346  07B0  2FBA               	goto	l2562
  4347  07B1  09A2               	comf	___awdiv@dividend^(0+128),f
  4348  07B2  09A3               	comf	(___awdiv@dividend+1)^(0+128),f
  4349  07B3  0AA2               	incf	___awdiv@dividend^(0+128),f
  4350  07B4  1903               	skipnz
  4351  07B5  0AA3               	incf	(___awdiv@dividend+1)^(0+128),f
  4352  07B6  3001               	movlw	1
  4353  07B7  00A4               	movwf	??___awdiv^(0+128)
  4354  07B8  0824               	movf	??___awdiv^(0+128),w
  4355  07B9  06A6               	xorwf	___awdiv@sign^(0+128),f
  4356  07BA                     l2562:	
  4357  07BA  01A7               	clrf	___awdiv@quotient^(0+128)
  4358  07BB  01A8               	clrf	(___awdiv@quotient+1)^(0+128)
  4359  07BC  0820               	movf	___awdiv@divisor^(0+128),w
  4360  07BD  0421               	iorwf	(___awdiv@divisor+1)^(0+128),w
  4361  07BE  1903               	btfsc	3,2
  4362  07BF  2FF1               	goto	l2584
  4363  07C0  01A5               	clrf	___awdiv@counter^(0+128)
  4364  07C1  0AA5               	incf	___awdiv@counter^(0+128),f
  4365  07C2                     l2572:	
  4366  07C2  1BA1               	btfsc	(___awdiv@divisor+1)^(0+128),7
  4367  07C3  2FD0               	goto	l2574
  4368  07C4  3001               	movlw	1
  4369  07C5                     u2845:	
  4370  07C5  1003               	clrc
  4371  07C6  0DA0               	rlf	___awdiv@divisor^(0+128),f
  4372  07C7  0DA1               	rlf	(___awdiv@divisor+1)^(0+128),f
  4373  07C8  3EFF               	addlw	-1
  4374  07C9  1D03               	skipz
  4375  07CA  2FC5               	goto	u2845
  4376  07CB  3001               	movlw	1
  4377  07CC  00A4               	movwf	??___awdiv^(0+128)
  4378  07CD  0824               	movf	??___awdiv^(0+128),w
  4379  07CE  07A5               	addwf	___awdiv@counter^(0+128),f
  4380  07CF  2FC2               	goto	l2572
  4381  07D0                     l2574:	
  4382  07D0  3001               	movlw	1
  4383  07D1                     u2865:	
  4384  07D1  1003               	clrc
  4385  07D2  0DA7               	rlf	___awdiv@quotient^(0+128),f
  4386  07D3  0DA8               	rlf	(___awdiv@quotient+1)^(0+128),f
  4387  07D4  3EFF               	addlw	-1
  4388  07D5  1D03               	skipz
  4389  07D6  2FD1               	goto	u2865
  4390  07D7  0821               	movf	(___awdiv@divisor+1)^(0+128),w
  4391  07D8  0223               	subwf	(___awdiv@dividend+1)^(0+128),w
  4392  07D9  1D03               	skipz
  4393  07DA  2FDD               	goto	u2875
  4394  07DB  0820               	movf	___awdiv@divisor^(0+128),w
  4395  07DC  0222               	subwf	___awdiv@dividend^(0+128),w
  4396  07DD                     u2875:	
  4397  07DD  1C03               	skipc
  4398  07DE  2FE6               	goto	l2580
  4399  07DF  0820               	movf	___awdiv@divisor^(0+128),w
  4400  07E0  02A2               	subwf	___awdiv@dividend^(0+128),f
  4401  07E1  0821               	movf	(___awdiv@divisor+1)^(0+128),w
  4402  07E2  1C03               	skipc
  4403  07E3  03A3               	decf	(___awdiv@dividend+1)^(0+128),f
  4404  07E4  02A3               	subwf	(___awdiv@dividend+1)^(0+128),f
  4405  07E5  1427               	bsf	___awdiv@quotient^(0+128),0
  4406  07E6                     l2580:	
  4407  07E6  3001               	movlw	1
  4408  07E7                     u2885:	
  4409  07E7  1003               	clrc
  4410  07E8  0CA1               	rrf	(___awdiv@divisor+1)^(0+128),f
  4411  07E9  0CA0               	rrf	___awdiv@divisor^(0+128),f
  4412  07EA  3EFF               	addlw	-1
  4413  07EB  1D03               	skipz
  4414  07EC  2FE7               	goto	u2885
  4415  07ED  3001               	movlw	1
  4416  07EE  02A5               	subwf	___awdiv@counter^(0+128),f
  4417  07EF  1D03               	btfss	3,2
  4418  07F0  2FD0               	goto	l2574
  4419  07F1                     l2584:	
  4420  07F1  0826               	movf	___awdiv@sign^(0+128),w
  4421  07F2  1903               	btfsc	3,2
  4422  07F3  2FF9               	goto	l2588
  4423  07F4  09A7               	comf	___awdiv@quotient^(0+128),f
  4424  07F5  09A8               	comf	(___awdiv@quotient+1)^(0+128),f
  4425  07F6  0AA7               	incf	___awdiv@quotient^(0+128),f
  4426  07F7  1903               	skipnz
  4427  07F8  0AA8               	incf	(___awdiv@quotient+1)^(0+128),f
  4428  07F9                     l2588:	
  4429  07F9  0828               	movf	(___awdiv@quotient+1)^(0+128),w
  4430  07FA  00A1               	movwf	(?___awdiv+1)^(0+128)
  4431  07FB  0827               	movf	___awdiv@quotient^(0+128),w
  4432  07FC  00A0               	movwf	?___awdiv^(0+128)
  4433  07FD  0008               	return
  4434  07FE                     __end_of___awdiv:	
  4435                           
  4436                           	psect	text23
  4437  172C                     __ptext23:	
  4438 ;; *************** function _Lcd_Write_Char *****************
  4439 ;; Defined at:
  4440 ;;		line 89 in file "LCD.c"
  4441 ;; Parameters:    Size  Location     Type
  4442 ;;  a               1    wreg     unsigned char 
  4443 ;; Auto vars:     Size  Location     Type
  4444 ;;  a               1    4[BANK1 ] unsigned char 
  4445 ;;  y               1    3[BANK1 ] unsigned char 
  4446 ;;  temp            1    2[BANK1 ] unsigned char 
  4447 ;; Return value:  Size  Location     Type
  4448 ;;		None               void
  4449 ;; Registers used:
  4450 ;;		wreg, status,2, status,0, pclath, cstack
  4451 ;; Tracked objects:
  4452 ;;		On entry : 0/0
  4453 ;;		On exit  : 0/0
  4454 ;;		Unchanged: 0/0
  4455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4456 ;;      Params:         0       0       0       0       0
  4457 ;;      Locals:         0       0       3       0       0
  4458 ;;      Temps:          0       0       1       0       0
  4459 ;;      Totals:         0       0       4       0       0
  4460 ;;Total ram usage:        4 bytes
  4461 ;; Hardware stack levels used:    1
  4462 ;; Hardware stack levels required when called:    5
  4463 ;; This function calls:
  4464 ;;		_Lcd_Port
  4465 ;; This function is called by:
  4466 ;;		_Display
  4467 ;;		_Display_Alarm
  4468 ;;		_Display_Time
  4469 ;;		_Display_SetTime
  4470 ;;		_Lcd_Write_String
  4471 ;; This function uses a non-reentrant model
  4472 ;;
  4473                           
  4474                           
  4475                           ;psect for function _Lcd_Write_Char
  4476  172C                     _Lcd_Write_Char:	
  4477                           
  4478                           ;incstack = 0
  4479                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  4480                           ;Lcd_Write_Char@a stored from wreg
  4481  172C  1683               	bsf	3,5	;RP0=1, select bank1
  4482  172D  1303               	bcf	3,6	;RP1=0, select bank1
  4483  172E  00A4               	movwf	Lcd_Write_Char@a^(0+128)
  4484                           
  4485                           ;LCD.c: 91: char temp,y;
  4486                           ;LCD.c: 92: temp = a&0x0F;
  4487  172F  0824               	movf	Lcd_Write_Char@a^(0+128),w
  4488  1730  390F               	andlw	15
  4489  1731  00A1               	movwf	??_Lcd_Write_Char^(0+128)
  4490  1732  0821               	movf	??_Lcd_Write_Char^(0+128),w
  4491  1733  00A2               	movwf	Lcd_Write_Char@temp^(0+128)
  4492                           
  4493                           ;LCD.c: 93: y = a&0xF0;
  4494  1734  0824               	movf	Lcd_Write_Char@a^(0+128),w
  4495  1735  39F0               	andlw	240
  4496  1736  00A1               	movwf	??_Lcd_Write_Char^(0+128)
  4497  1737  0821               	movf	??_Lcd_Write_Char^(0+128),w
  4498  1738  00A3               	movwf	Lcd_Write_Char@y^(0+128)
  4499                           
  4500                           ;LCD.c: 94: RD2 = 1;
  4501  1739  1283               	bcf	3,5	;RP0=0, select bank0
  4502  173A  1303               	bcf	3,6	;RP1=0, select bank0
  4503  173B  1508               	bsf	8,2	;volatile
  4504                           
  4505                           ;LCD.c: 95: Lcd_Port(y>>4);
  4506  173C  1683               	bsf	3,5	;RP0=1, select bank1
  4507  173D  1303               	bcf	3,6	;RP1=0, select bank1
  4508  173E  0823               	movf	Lcd_Write_Char@y^(0+128),w
  4509  173F  00A1               	movwf	??_Lcd_Write_Char^(0+128)
  4510  1740  3004               	movlw	4
  4511  1741                     u2605:	
  4512  1741  1003               	clrc
  4513  1742  0CA1               	rrf	??_Lcd_Write_Char^(0+128),f
  4514  1743  3EFF               	addlw	-1
  4515  1744  1D03               	skipz
  4516  1745  2F41               	goto	u2605
  4517  1746  0821               	movf	??_Lcd_Write_Char^(0+128),w
  4518  1747  160A  118A  2694  160A  118A  	fcall	_Lcd_Port
  4519                           
  4520                           ;LCD.c: 96: RD3 = 1;
  4521  174C  1283               	bcf	3,5	;RP0=0, select bank0
  4522  174D  1303               	bcf	3,6	;RP1=0, select bank0
  4523  174E  1588               	bsf	8,3	;volatile
  4524                           
  4525                           ;LCD.c: 97: _delay((unsigned long)((40)*(1000000/4000000.0)));
  4526  174F  3003               	movlw	3
  4527  1750  1683               	bsf	3,5	;RP0=1, select bank1
  4528  1751  1303               	bcf	3,6	;RP1=0, select bank1
  4529  1752  00A1               	movwf	??_Lcd_Write_Char^(0+128)
  4530  1753                     u5167:	
  4531  1753  0BA1               	decfsz	??_Lcd_Write_Char^(0+128),f
  4532  1754  2F53               	goto	u5167
  4533                           
  4534                           ;LCD.c: 98: RD3 = 0;
  4535  1755  1283               	bcf	3,5	;RP0=0, select bank0
  4536  1756  1303               	bcf	3,6	;RP1=0, select bank0
  4537  1757  1188               	bcf	8,3	;volatile
  4538                           
  4539                           ;LCD.c: 99: Lcd_Port(temp);
  4540  1758  1683               	bsf	3,5	;RP0=1, select bank1
  4541  1759  1303               	bcf	3,6	;RP1=0, select bank1
  4542  175A  0822               	movf	Lcd_Write_Char@temp^(0+128),w
  4543  175B  160A  118A  2694  160A  118A  	fcall	_Lcd_Port
  4544                           
  4545                           ;LCD.c: 100: RD3 = 1;
  4546  1760  1283               	bcf	3,5	;RP0=0, select bank0
  4547  1761  1303               	bcf	3,6	;RP1=0, select bank0
  4548  1762  1588               	bsf	8,3	;volatile
  4549                           
  4550                           ;LCD.c: 101: _delay((unsigned long)((40)*(1000000/4000000.0)));
  4551  1763  3003               	movlw	3
  4552  1764  1683               	bsf	3,5	;RP0=1, select bank1
  4553  1765  1303               	bcf	3,6	;RP1=0, select bank1
  4554  1766  00A1               	movwf	??_Lcd_Write_Char^(0+128)
  4555  1767                     u5177:	
  4556  1767  0BA1               	decfsz	??_Lcd_Write_Char^(0+128),f
  4557  1768  2F67               	goto	u5177
  4558                           
  4559                           ;LCD.c: 102: RD3 = 0;
  4560  1769  1283               	bcf	3,5	;RP0=0, select bank0
  4561  176A  1303               	bcf	3,6	;RP1=0, select bank0
  4562  176B  1188               	bcf	8,3	;volatile
  4563  176C  0008               	return
  4564  176D                     __end_of_Lcd_Write_Char:	
  4565                           
  4566                           	psect	text24
  4567  1694                     __ptext24:	
  4568 ;; *************** function _Lcd_Port *****************
  4569 ;; Defined at:
  4570 ;;		line 12 in file "LCD.c"
  4571 ;; Parameters:    Size  Location     Type
  4572 ;;  a               1    wreg     unsigned char 
  4573 ;; Auto vars:     Size  Location     Type
  4574 ;;  a               1    0[BANK1 ] unsigned char 
  4575 ;; Return value:  Size  Location     Type
  4576 ;;		None               void
  4577 ;; Registers used:
  4578 ;;		wreg
  4579 ;; Tracked objects:
  4580 ;;		On entry : 0/0
  4581 ;;		On exit  : 0/0
  4582 ;;		Unchanged: 0/0
  4583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4584 ;;      Params:         0       0       0       0       0
  4585 ;;      Locals:         0       0       1       0       0
  4586 ;;      Temps:          0       0       0       0       0
  4587 ;;      Totals:         0       0       1       0       0
  4588 ;;Total ram usage:        1 bytes
  4589 ;; Hardware stack levels used:    1
  4590 ;; Hardware stack levels required when called:    4
  4591 ;; This function calls:
  4592 ;;		Nothing
  4593 ;; This function is called by:
  4594 ;;		_Lcd_Cmd
  4595 ;;		_Lcd_Init
  4596 ;;		_Lcd_Write_Char
  4597 ;; This function uses a non-reentrant model
  4598 ;;
  4599                           
  4600                           
  4601                           ;psect for function _Lcd_Port
  4602  1694                     _Lcd_Port:	
  4603                           
  4604                           ;incstack = 0
  4605                           ; Regs used in _Lcd_Port: [wreg]
  4606                           ;Lcd_Port@a stored from wreg
  4607  1694  1683               	bsf	3,5	;RP0=1, select bank1
  4608  1695  1303               	bcf	3,6	;RP1=0, select bank1
  4609  1696  00A0               	movwf	Lcd_Port@a^(0+128)
  4610                           
  4611                           ;LCD.c: 14: if(a & 1)
  4612  1697  1C20               	btfss	Lcd_Port@a^(0+128),0
  4613  1698  2E9D               	goto	l437
  4614                           
  4615                           ;LCD.c: 15: RD4 = 1;
  4616  1699  1283               	bcf	3,5	;RP0=0, select bank0
  4617  169A  1303               	bcf	3,6	;RP1=0, select bank0
  4618  169B  1608               	bsf	8,4	;volatile
  4619  169C  2EA0               	goto	l438
  4620  169D                     l437:	
  4621                           
  4622                           ;LCD.c: 16: else
  4623                           ;LCD.c: 17: RD4 = 0;
  4624  169D  1283               	bcf	3,5	;RP0=0, select bank0
  4625  169E  1303               	bcf	3,6	;RP1=0, select bank0
  4626  169F  1208               	bcf	8,4	;volatile
  4627  16A0                     l438:	
  4628                           
  4629                           ;LCD.c: 19: if(a & 2)
  4630  16A0  1683               	bsf	3,5	;RP0=1, select bank1
  4631  16A1  1303               	bcf	3,6	;RP1=0, select bank1
  4632  16A2  1CA0               	btfss	Lcd_Port@a^(0+128),1
  4633  16A3  2EA8               	goto	l439
  4634                           
  4635                           ;LCD.c: 20: RD5 = 1;
  4636  16A4  1283               	bcf	3,5	;RP0=0, select bank0
  4637  16A5  1303               	bcf	3,6	;RP1=0, select bank0
  4638  16A6  1688               	bsf	8,5	;volatile
  4639  16A7  2EAB               	goto	l440
  4640  16A8                     l439:	
  4641                           
  4642                           ;LCD.c: 21: else
  4643                           ;LCD.c: 22: RD5 = 0;
  4644  16A8  1283               	bcf	3,5	;RP0=0, select bank0
  4645  16A9  1303               	bcf	3,6	;RP1=0, select bank0
  4646  16AA  1288               	bcf	8,5	;volatile
  4647  16AB                     l440:	
  4648                           
  4649                           ;LCD.c: 24: if(a & 4)
  4650  16AB  1683               	bsf	3,5	;RP0=1, select bank1
  4651  16AC  1303               	bcf	3,6	;RP1=0, select bank1
  4652  16AD  1D20               	btfss	Lcd_Port@a^(0+128),2
  4653  16AE  2EB3               	goto	l441
  4654                           
  4655                           ;LCD.c: 25: RD6 = 1;
  4656  16AF  1283               	bcf	3,5	;RP0=0, select bank0
  4657  16B0  1303               	bcf	3,6	;RP1=0, select bank0
  4658  16B1  1708               	bsf	8,6	;volatile
  4659  16B2  2EB6               	goto	l442
  4660  16B3                     l441:	
  4661                           
  4662                           ;LCD.c: 26: else
  4663                           ;LCD.c: 27: RD6 = 0;
  4664  16B3  1283               	bcf	3,5	;RP0=0, select bank0
  4665  16B4  1303               	bcf	3,6	;RP1=0, select bank0
  4666  16B5  1308               	bcf	8,6	;volatile
  4667  16B6                     l442:	
  4668                           
  4669                           ;LCD.c: 29: if(a & 8)
  4670  16B6  1683               	bsf	3,5	;RP0=1, select bank1
  4671  16B7  1303               	bcf	3,6	;RP1=0, select bank1
  4672  16B8  1DA0               	btfss	Lcd_Port@a^(0+128),3
  4673  16B9  2EBE               	goto	l443
  4674                           
  4675                           ;LCD.c: 30: RD7 = 1;
  4676  16BA  1283               	bcf	3,5	;RP0=0, select bank0
  4677  16BB  1303               	bcf	3,6	;RP1=0, select bank0
  4678  16BC  1788               	bsf	8,7	;volatile
  4679  16BD  0008               	return
  4680  16BE                     l443:	
  4681                           
  4682                           ;LCD.c: 31: else
  4683                           ;LCD.c: 32: RD7 = 0;
  4684  16BE  1283               	bcf	3,5	;RP0=0, select bank0
  4685  16BF  1303               	bcf	3,6	;RP1=0, select bank0
  4686  16C0  1388               	bcf	8,7	;volatile
  4687  16C1  0008               	return
  4688  16C2                     __end_of_Lcd_Port:	
  4689                           
  4690                           	psect	text25
  4691  002B                     __ptext25:	
  4692 ;; *************** function _ISR *****************
  4693 ;; Defined at:
  4694 ;;		line 471 in file "main.c"
  4695 ;; Parameters:    Size  Location     Type
  4696 ;;		None
  4697 ;; Auto vars:     Size  Location     Type
  4698 ;;		None
  4699 ;; Return value:  Size  Location     Type
  4700 ;;		None               void
  4701 ;; Registers used:
  4702 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4703 ;; Tracked objects:
  4704 ;;		On entry : 0/0
  4705 ;;		On exit  : 0/0
  4706 ;;		Unchanged: 0/0
  4707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4708 ;;      Params:         0       0       0       0       0
  4709 ;;      Locals:         0       0       0       0       0
  4710 ;;      Temps:          0       5       0       0       0
  4711 ;;      Totals:         0       5       0       0       0
  4712 ;;Total ram usage:        5 bytes
  4713 ;; Hardware stack levels used:    1
  4714 ;; Hardware stack levels required when called:    3
  4715 ;; This function calls:
  4716 ;;		_Change_Mode12h
  4717 ;;		_DS1307_Write
  4718 ;;		_Fix_Alarm
  4719 ;;		_Read_Tem
  4720 ;;		_Read_Time
  4721 ;;		_Write_Hour
  4722 ;;		_Write_Min
  4723 ;;		_Write_Time
  4724 ;;		i1_Read_FullTime
  4725 ;; This function is called by:
  4726 ;;		Interrupt level 1
  4727 ;; This function uses a non-reentrant model
  4728 ;;
  4729                           
  4730                           
  4731                           ;psect for function _ISR
  4732  002B                     _ISR:	
  4733                           
  4734                           ;main.c: 473: if (RBIF) {
  4735  002B  1C0B               	btfss	11,0	;volatile
  4736  002C  29E2               	goto	i1l3726
  4737                           
  4738                           ;main.c: 475: if (RB1 == 0 && mode != 1) {
  4739  002D  1886               	btfsc	6,1	;volatile
  4740  002E  286A               	goto	i1l3584
  4741  002F  0359               	decf	_mode,w
  4742  0030  1903               	btfsc	3,2
  4743  0031  286A               	goto	i1l3584
  4744                           
  4745                           ;main.c: 476: mode = 2;
  4746  0032  3002               	movlw	2
  4747  0033  00CC               	movwf	??_ISR
  4748  0034  084C               	movf	??_ISR,w
  4749  0035  00D9               	movwf	_mode
  4750                           
  4751                           ;main.c: 477: quit++;
  4752  0036  3001               	movlw	1
  4753  0037  00CC               	movwf	??_ISR
  4754  0038  084C               	movf	??_ISR,w
  4755  0039  1683               	bsf	3,5	;RP0=1, select bank1
  4756  003A  1303               	bcf	3,6	;RP1=0, select bank1
  4757  003B  07B9               	addwf	_quit^(0+128),f
  4758                           
  4759                           ;main.c: 478: set = 1;
  4760  003C  01BB               	clrf	_set^(0+128)
  4761  003D  0ABB               	incf	_set^(0+128),f
  4762                           
  4763                           ;main.c: 479: if (minute == minute_alarm && hour == hour_alarm && alarm) {
  4764  003E  0837               	movf	_minute^(0+128),w
  4765  003F  063F               	xorwf	_minute_alarm^(0+128),w
  4766  0040  1D03               	skipz
  4767  0041  2856               	goto	i1l3576
  4768  0042  0834               	movf	_hour^(0+128),w
  4769  0043  1283               	bcf	3,5	;RP0=0, select bank0
  4770  0044  1303               	bcf	3,6	;RP1=0, select bank0
  4771  0045  0658               	xorwf	_hour_alarm,w
  4772  0046  1D03               	skipz
  4773  0047  2856               	goto	i1l3576
  4774  0048  1683               	bsf	3,5	;RP0=1, select bank1
  4775  0049  1303               	bcf	3,6	;RP1=0, select bank1
  4776  004A  0831               	movf	_alarm^(0+128),w
  4777  004B  1903               	btfsc	3,2
  4778  004C  2856               	goto	i1l3576
  4779                           
  4780                           ;main.c: 480: alarm = 0;
  4781  004D  01B1               	clrf	_alarm^(0+128)
  4782                           
  4783                           ;main.c: 481: mode = 0;
  4784  004E  1283               	bcf	3,5	;RP0=0, select bank0
  4785  004F  1303               	bcf	3,6	;RP1=0, select bank0
  4786  0050  01D9               	clrf	_mode
  4787                           
  4788                           ;main.c: 482: set = 0;
  4789  0051  1683               	bsf	3,5	;RP0=1, select bank1
  4790  0052  1303               	bcf	3,6	;RP1=0, select bank1
  4791  0053  01BB               	clrf	_set^(0+128)
  4792                           
  4793                           ;main.c: 483: quit = 0;
  4794  0054  01B9               	clrf	_quit^(0+128)
  4795                           
  4796                           ;main.c: 484: } else if (quit == 2) {
  4797  0055  2861               	goto	i1l3580
  4798  0056                     i1l3576:	
  4799  0056  3002               	movlw	2
  4800  0057  1683               	bsf	3,5	;RP0=1, select bank1
  4801  0058  1303               	bcf	3,6	;RP1=0, select bank1
  4802  0059  0639               	xorwf	_quit^(0+128),w
  4803  005A  1D03               	btfss	3,2
  4804  005B  2861               	goto	i1l3580
  4805                           
  4806                           ;main.c: 485: set = 0;
  4807  005C  01BB               	clrf	_set^(0+128)
  4808                           
  4809                           ;main.c: 486: quit = 0;
  4810  005D  01B9               	clrf	_quit^(0+128)
  4811                           
  4812                           ;main.c: 487: mode = 0;
  4813  005E  1283               	bcf	3,5	;RP0=0, select bank0
  4814  005F  1303               	bcf	3,6	;RP1=0, select bank0
  4815  0060  01D9               	clrf	_mode
  4816  0061                     i1l3580:	
  4817                           
  4818                           ;main.c: 488: }
  4819                           ;main.c: 489: if (mode == 0) Read_FullTime();
  4820  0061  1283               	bcf	3,5	;RP0=0, select bank0
  4821  0062  0859               	movf	_mode,w
  4822  0063  1D03               	btfss	3,2
  4823  0064  286A               	goto	i1l3584
  4824  0065  120A  158A  201D  120A  118A  	fcall	i1_Read_FullTime
  4825  006A                     i1l3584:	
  4826                           
  4827                           ;main.c: 490: }
  4828                           ;main.c: 492: if (RB4 == 0 && mode != 0) {
  4829  006A  1283               	bcf	3,5	;RP0=0, select bank0
  4830  006B  1303               	bcf	3,6	;RP1=0, select bank0
  4831  006C  1A06               	btfsc	6,4	;volatile
  4832  006D  28CC               	goto	i1l3618
  4833  006E  0859               	movf	_mode,w
  4834  006F  1903               	btfsc	3,2
  4835  0070  28CC               	goto	i1l3618
  4836                           
  4837                           ;main.c: 493: set++;
  4838  0071  3001               	movlw	1
  4839  0072  00CC               	movwf	??_ISR
  4840  0073  084C               	movf	??_ISR,w
  4841  0074  1683               	bsf	3,5	;RP0=1, select bank1
  4842  0075  1303               	bcf	3,6	;RP1=0, select bank1
  4843  0076  07BB               	addwf	_set^(0+128),f
  4844                           
  4845                           ;main.c: 494: if (mode == 2) {
  4846  0077  3002               	movlw	2
  4847  0078  1283               	bcf	3,5	;RP0=0, select bank0
  4848  0079  1303               	bcf	3,6	;RP1=0, select bank0
  4849  007A  0659               	xorwf	_mode,w
  4850  007B  1D03               	btfss	3,2
  4851  007C  2899               	goto	i1l3600
  4852                           
  4853                           ;main.c: 495: if (alarm) {
  4854  007D  1683               	bsf	3,5	;RP0=1, select bank1
  4855  007E  1303               	bcf	3,6	;RP1=0, select bank1
  4856  007F  0831               	movf	_alarm^(0+128),w
  4857  0080  1903               	btfsc	3,2
  4858  0081  288B               	goto	i1l3594
  4859                           
  4860                           ;main.c: 496: quit = 0;
  4861  0082  01B9               	clrf	_quit^(0+128)
  4862                           
  4863                           ;main.c: 497: alarm = 0;
  4864  0083  01B1               	clrf	_alarm^(0+128)
  4865                           
  4866                           ;main.c: 498: mode = 0;
  4867  0084  1283               	bcf	3,5	;RP0=0, select bank0
  4868  0085  1303               	bcf	3,6	;RP1=0, select bank0
  4869  0086  01D9               	clrf	_mode
  4870                           
  4871                           ;main.c: 499: set = 0;
  4872  0087  1683               	bsf	3,5	;RP0=1, select bank1
  4873  0088  1303               	bcf	3,6	;RP1=0, select bank1
  4874  0089  01BB               	clrf	_set^(0+128)
  4875                           
  4876                           ;main.c: 500: } else if (set == 3) {
  4877  008A  28C2               	goto	i1l3614
  4878  008B                     i1l3594:	
  4879  008B  3003               	movlw	3
  4880  008C  063B               	xorwf	_set^(0+128),w
  4881  008D  1D03               	btfss	3,2
  4882  008E  28C2               	goto	i1l3614
  4883                           
  4884                           ;main.c: 501: quit = 0;
  4885  008F  01B9               	clrf	_quit^(0+128)
  4886                           
  4887                           ;main.c: 502: set = 0;
  4888  0090  01BB               	clrf	_set^(0+128)
  4889                           
  4890                           ;main.c: 503: mode = 0;
  4891  0091  1283               	bcf	3,5	;RP0=0, select bank0
  4892  0092  1303               	bcf	3,6	;RP1=0, select bank0
  4893  0093  01D9               	clrf	_mode
  4894                           
  4895                           ;main.c: 504: alarm = 1;
  4896  0094  1683               	bsf	3,5	;RP0=1, select bank1
  4897  0095  1303               	bcf	3,6	;RP1=0, select bank1
  4898  0096  01B1               	clrf	_alarm^(0+128)
  4899  0097  0AB1               	incf	_alarm^(0+128),f
  4900                           
  4901                           ;main.c: 505: }
  4902                           ;main.c: 506: } else if (quit == 2 && set == 7) {
  4903  0098  28C2               	goto	i1l3614
  4904  0099                     i1l3600:	
  4905  0099  3002               	movlw	2
  4906  009A  1683               	bsf	3,5	;RP0=1, select bank1
  4907  009B  1303               	bcf	3,6	;RP1=0, select bank1
  4908  009C  0639               	xorwf	_quit^(0+128),w
  4909  009D  1D03               	btfss	3,2
  4910  009E  28AB               	goto	i1l3606
  4911  009F  3007               	movlw	7
  4912  00A0  063B               	xorwf	_set^(0+128),w
  4913  00A1  1D03               	btfss	3,2
  4914  00A2  28AB               	goto	i1l3606
  4915                           
  4916                           ;main.c: 507: set = 0;
  4917  00A3  01BB               	clrf	_set^(0+128)
  4918                           
  4919                           ;main.c: 508: mode = 0;
  4920  00A4  1283               	bcf	3,5	;RP0=0, select bank0
  4921  00A5  1303               	bcf	3,6	;RP1=0, select bank0
  4922  00A6  01D9               	clrf	_mode
  4923                           
  4924                           ;main.c: 509: quit = 0;
  4925  00A7  1683               	bsf	3,5	;RP0=1, select bank1
  4926  00A8  1303               	bcf	3,6	;RP1=0, select bank1
  4927  00A9  01B9               	clrf	_quit^(0+128)
  4928                           
  4929                           ;main.c: 510: } else if (quit == 1) {
  4930  00AA  28C2               	goto	i1l3614
  4931  00AB                     i1l3606:	
  4932  00AB  0339               	decf	_quit^(0+128),w
  4933  00AC  1D03               	btfss	3,2
  4934  00AD  28C2               	goto	i1l3614
  4935                           
  4936                           ;main.c: 511: set = 0;
  4937  00AE  01BB               	clrf	_set^(0+128)
  4938                           
  4939                           ;main.c: 512: Change_Mode12h();
  4940  00AF  120A  158A  24E4  120A  118A  	fcall	_Change_Mode12h
  4941                           
  4942                           ;main.c: 513: DS1307_Write(0x02, hour);
  4943  00B4  1683               	bsf	3,5	;RP0=1, select bank1
  4944  00B5  1303               	bcf	3,6	;RP1=0, select bank1
  4945  00B6  0834               	movf	_hour^(0+128),w
  4946  00B7  1283               	bcf	3,5	;RP0=0, select bank0
  4947  00B8  1303               	bcf	3,6	;RP1=0, select bank0
  4948  00B9  00CC               	movwf	??_ISR
  4949  00BA  084C               	movf	??_ISR,w
  4950  00BB  00F9               	movwf	DS1307_Write@dat
  4951  00BC  3002               	movlw	2
  4952  00BD  120A  158A  21A6  120A  118A  	fcall	_DS1307_Write
  4953  00C2                     i1l3614:	
  4954                           
  4955                           ;main.c: 514: }
  4956                           ;main.c: 515: if (mode == 0) Read_FullTime();
  4957  00C2  1283               	bcf	3,5	;RP0=0, select bank0
  4958  00C3  1303               	bcf	3,6	;RP1=0, select bank0
  4959  00C4  0859               	movf	_mode,w
  4960  00C5  1D03               	btfss	3,2
  4961  00C6  28CC               	goto	i1l3618
  4962  00C7  120A  158A  201D  120A  118A  	fcall	i1_Read_FullTime
  4963  00CC                     i1l3618:	
  4964                           
  4965                           ;main.c: 516: }
  4966                           ;main.c: 518: if (RB5 == 0 && mode != 2) {
  4967  00CC  1283               	bcf	3,5	;RP0=0, select bank0
  4968  00CD  1303               	bcf	3,6	;RP1=0, select bank0
  4969  00CE  1A86               	btfsc	6,5	;volatile
  4970  00CF  28EE               	goto	i1l3636
  4971  00D0  3002               	movlw	2
  4972  00D1  0659               	xorwf	_mode,w
  4973  00D2  1903               	btfsc	3,2
  4974  00D3  28EE               	goto	i1l3636
  4975                           
  4976                           ;main.c: 519: mode = 1;
  4977  00D4  01D9               	clrf	_mode
  4978  00D5  0AD9               	incf	_mode,f
  4979                           
  4980                           ;main.c: 520: quit++;
  4981  00D6  3001               	movlw	1
  4982  00D7  00CC               	movwf	??_ISR
  4983  00D8  084C               	movf	??_ISR,w
  4984  00D9  1683               	bsf	3,5	;RP0=1, select bank1
  4985  00DA  1303               	bcf	3,6	;RP1=0, select bank1
  4986  00DB  07B9               	addwf	_quit^(0+128),f
  4987                           
  4988                           ;main.c: 521: set = 0;
  4989  00DC  01BB               	clrf	_set^(0+128)
  4990                           
  4991                           ;main.c: 522: if (quit == 3) {
  4992  00DD  3003               	movlw	3
  4993  00DE  0639               	xorwf	_quit^(0+128),w
  4994  00DF  1D03               	btfss	3,2
  4995  00E0  28E5               	goto	i1l3632
  4996                           
  4997                           ;main.c: 523: quit = 0;
  4998  00E1  01B9               	clrf	_quit^(0+128)
  4999                           
  5000                           ;main.c: 524: mode = 0;
  5001  00E2  1283               	bcf	3,5	;RP0=0, select bank0
  5002  00E3  1303               	bcf	3,6	;RP1=0, select bank0
  5003  00E4  01D9               	clrf	_mode
  5004  00E5                     i1l3632:	
  5005                           
  5006                           ;main.c: 525: }
  5007                           ;main.c: 526: if (mode == 0) Read_FullTime();
  5008  00E5  1283               	bcf	3,5	;RP0=0, select bank0
  5009  00E6  0859               	movf	_mode,w
  5010  00E7  1D03               	btfss	3,2
  5011  00E8  28EE               	goto	i1l3636
  5012  00E9  120A  158A  201D  120A  118A  	fcall	i1_Read_FullTime
  5013  00EE                     i1l3636:	
  5014                           
  5015                           ;main.c: 527: }
  5016                           ;main.c: 529: if (RB2 == 0) {
  5017  00EE  1283               	bcf	3,5	;RP0=0, select bank0
  5018  00EF  1303               	bcf	3,6	;RP1=0, select bank0
  5019  00F0  1906               	btfsc	6,2	;volatile
  5020  00F1  297A               	goto	i1l3680
  5021                           
  5022                           ;main.c: 530: if (mode == 1 && quit == 2) {
  5023  00F2  0359               	decf	_mode,w
  5024  00F3  1D03               	btfss	3,2
  5025  00F4  2956               	goto	i1l3666
  5026  00F5  3002               	movlw	2
  5027  00F6  1683               	bsf	3,5	;RP0=1, select bank1
  5028  00F7  1303               	bcf	3,6	;RP1=0, select bank1
  5029  00F8  0639               	xorwf	_quit^(0+128),w
  5030  00F9  1903               	btfsc	3,2
  5031  00FA  293C               	goto	i1l3662
  5032  00FB  2956               	goto	i1l3666
  5033  00FC                     i1l3644:	
  5034                           ;main.c: 532: case 1: minute++;
  5035                           
  5036                           ;main.c: 531: switch (set) {
  5037                           
  5038  00FC  3001               	movlw	1
  5039  00FD  1283               	bcf	3,5	;RP0=0, select bank0
  5040  00FE  1303               	bcf	3,6	;RP1=0, select bank0
  5041  00FF  00CC               	movwf	??_ISR
  5042  0100  084C               	movf	??_ISR,w
  5043  0101  1683               	bsf	3,5	;RP0=1, select bank1
  5044  0102  1303               	bcf	3,6	;RP1=0, select bank1
  5045  0103  07B7               	addwf	_minute^(0+128),f
  5046                           
  5047                           ;main.c: 533: Write_Min();
  5048  0104  160A  118A  2668  120A  118A  	fcall	_Write_Min
  5049                           
  5050                           ;main.c: 534: break;
  5051  0109  2950               	goto	i1l3664
  5052  010A                     i1l3648:	
  5053                           ;main.c: 535: case 2: hour++;
  5054                           
  5055  010A  3001               	movlw	1
  5056  010B  1283               	bcf	3,5	;RP0=0, select bank0
  5057  010C  1303               	bcf	3,6	;RP1=0, select bank0
  5058  010D  00CC               	movwf	??_ISR
  5059  010E  084C               	movf	??_ISR,w
  5060  010F  1683               	bsf	3,5	;RP0=1, select bank1
  5061  0110  1303               	bcf	3,6	;RP1=0, select bank1
  5062  0111  07B4               	addwf	_hour^(0+128),f
  5063                           
  5064                           ;main.c: 536: Write_Hour();
  5065  0112  120A  158A  246B  120A  118A  	fcall	_Write_Hour
  5066                           
  5067                           ;main.c: 537: break;
  5068  0117  2950               	goto	i1l3664
  5069  0118                     i1l3652:	
  5070                           ;main.c: 538: case 3: day++;
  5071                           
  5072  0118  3001               	movlw	1
  5073  0119  1283               	bcf	3,5	;RP0=0, select bank0
  5074  011A  1303               	bcf	3,6	;RP1=0, select bank0
  5075  011B  00CC               	movwf	??_ISR
  5076  011C  084C               	movf	??_ISR,w
  5077  011D  1683               	bsf	3,5	;RP0=1, select bank1
  5078  011E  1303               	bcf	3,6	;RP1=0, select bank1
  5079  011F  07B3               	addwf	_day^(0+128),f
  5080                           
  5081                           ;main.c: 539: break;
  5082  0120  2950               	goto	i1l3664
  5083  0121                     i1l3654:	
  5084                           ;main.c: 540: case 4: date++;
  5085                           
  5086  0121  3001               	movlw	1
  5087  0122  1283               	bcf	3,5	;RP0=0, select bank0
  5088  0123  1303               	bcf	3,6	;RP1=0, select bank0
  5089  0124  00CC               	movwf	??_ISR
  5090  0125  084C               	movf	??_ISR,w
  5091  0126  1683               	bsf	3,5	;RP0=1, select bank1
  5092  0127  1303               	bcf	3,6	;RP1=0, select bank1
  5093  0128  07B2               	addwf	_date^(0+128),f
  5094                           
  5095                           ;main.c: 541: break;
  5096  0129  2950               	goto	i1l3664
  5097  012A                     i1l3656:	
  5098                           ;main.c: 542: case 5: month++;
  5099                           
  5100  012A  3001               	movlw	1
  5101  012B  1283               	bcf	3,5	;RP0=0, select bank0
  5102  012C  1303               	bcf	3,6	;RP1=0, select bank0
  5103  012D  00CC               	movwf	??_ISR
  5104  012E  084C               	movf	??_ISR,w
  5105  012F  1683               	bsf	3,5	;RP0=1, select bank1
  5106  0130  1303               	bcf	3,6	;RP1=0, select bank1
  5107  0131  07B8               	addwf	_month^(0+128),f
  5108                           
  5109                           ;main.c: 543: break;
  5110  0132  2950               	goto	i1l3664
  5111  0133                     i1l3658:	
  5112                           ;main.c: 544: case 6: year++;
  5113                           
  5114  0133  3001               	movlw	1
  5115  0134  1283               	bcf	3,5	;RP0=0, select bank0
  5116  0135  1303               	bcf	3,6	;RP1=0, select bank0
  5117  0136  00CC               	movwf	??_ISR
  5118  0137  084C               	movf	??_ISR,w
  5119  0138  1683               	bsf	3,5	;RP0=1, select bank1
  5120  0139  1303               	bcf	3,6	;RP1=0, select bank1
  5121  013A  07BD               	addwf	_year^(0+128),f
  5122                           
  5123                           ;main.c: 546: }
  5124                           
  5125                           ;main.c: 545: break;
  5126  013B  2950               	goto	i1l3664
  5127  013C                     i1l3662:	
  5128  013C  083B               	movf	_set^(0+128),w
  5129                           
  5130                           ; Switch size 1, requested type "space"
  5131                           ; Number of cases is 6, Range of values is 1 to 6
  5132                           ; switch strategies available:
  5133                           ; Name         Instructions Cycles
  5134                           ; simple_byte           19    10 (average)
  5135                           ; direct_byte           29    11 (fixed)
  5136                           ; jumptable            263     9 (fixed)
  5137                           ;	Chosen strategy is simple_byte
  5138  013D  3A01               	xorlw	1	; case 1
  5139  013E  1903               	skipnz
  5140  013F  28FC               	goto	i1l3644
  5141  0140  3A03               	xorlw	3	; case 2
  5142  0141  1903               	skipnz
  5143  0142  290A               	goto	i1l3648
  5144  0143  3A01               	xorlw	1	; case 3
  5145  0144  1903               	skipnz
  5146  0145  2918               	goto	i1l3652
  5147  0146  3A07               	xorlw	7	; case 4
  5148  0147  1903               	skipnz
  5149  0148  2921               	goto	i1l3654
  5150  0149  3A01               	xorlw	1	; case 5
  5151  014A  1903               	skipnz
  5152  014B  292A               	goto	i1l3656
  5153  014C  3A03               	xorlw	3	; case 6
  5154  014D  1903               	skipnz
  5155  014E  2933               	goto	i1l3658
  5156  014F  2950               	goto	i1l3664
  5157  0150                     i1l3664:	
  5158                           
  5159                           ;main.c: 547: Write_Time();
  5160  0150  160A  118A  26C2  120A  118A  	fcall	_Write_Time
  5161                           
  5162                           ;main.c: 548: } else if (mode == 2) {
  5163  0155  297A               	goto	i1l3680
  5164  0156                     i1l3666:	
  5165  0156  3002               	movlw	2
  5166  0157  1283               	bcf	3,5	;RP0=0, select bank0
  5167  0158  1303               	bcf	3,6	;RP1=0, select bank0
  5168  0159  0659               	xorwf	_mode,w
  5169  015A  1903               	btfsc	3,2
  5170  015B  296B               	goto	i1l3676
  5171  015C  297A               	goto	i1l3680
  5172  015D                     i1l3670:	
  5173                           ;main.c: 550: case 1: hour_alarm++;
  5174                           
  5175                           ;main.c: 549: switch (set) {
  5176                           
  5177  015D  3001               	movlw	1
  5178  015E  1283               	bcf	3,5	;RP0=0, select bank0
  5179  015F  00CC               	movwf	??_ISR
  5180  0160  084C               	movf	??_ISR,w
  5181  0161  07D8               	addwf	_hour_alarm,f
  5182                           
  5183                           ;main.c: 551: break;
  5184  0162  2975               	goto	i1l3678
  5185  0163                     i1l3672:	
  5186                           ;main.c: 552: case 2: minute_alarm++;
  5187                           
  5188  0163  3001               	movlw	1
  5189  0164  1283               	bcf	3,5	;RP0=0, select bank0
  5190  0165  00CC               	movwf	??_ISR
  5191  0166  084C               	movf	??_ISR,w
  5192  0167  1683               	bsf	3,5	;RP0=1, select bank1
  5193  0168  1303               	bcf	3,6	;RP1=0, select bank1
  5194  0169  07BF               	addwf	_minute_alarm^(0+128),f
  5195                           
  5196                           ;main.c: 554: }
  5197                           
  5198                           ;main.c: 553: break;
  5199  016A  2975               	goto	i1l3678
  5200  016B                     i1l3676:	
  5201  016B  1683               	bsf	3,5	;RP0=1, select bank1
  5202  016C  1303               	bcf	3,6	;RP1=0, select bank1
  5203  016D  083B               	movf	_set^(0+128),w
  5204                           
  5205                           ; Switch size 1, requested type "space"
  5206                           ; Number of cases is 2, Range of values is 1 to 2
  5207                           ; switch strategies available:
  5208                           ; Name         Instructions Cycles
  5209                           ; simple_byte            7     4 (average)
  5210                           ; direct_byte           17    11 (fixed)
  5211                           ; jumptable            263     9 (fixed)
  5212                           ;	Chosen strategy is simple_byte
  5213  016E  3A01               	xorlw	1	; case 1
  5214  016F  1903               	skipnz
  5215  0170  295D               	goto	i1l3670
  5216  0171  3A03               	xorlw	3	; case 2
  5217  0172  1903               	skipnz
  5218  0173  2963               	goto	i1l3672
  5219  0174  2975               	goto	i1l3678
  5220  0175                     i1l3678:	
  5221                           
  5222                           ;main.c: 555: Fix_Alarm();
  5223  0175  120A  158A  23F2  120A  118A  	fcall	_Fix_Alarm
  5224  017A                     i1l3680:	
  5225                           
  5226                           ;main.c: 556: }
  5227                           ;main.c: 557: }
  5228                           ;main.c: 559: if (RB3 == 0) {
  5229  017A  1283               	bcf	3,5	;RP0=0, select bank0
  5230  017B  1303               	bcf	3,6	;RP1=0, select bank0
  5231  017C  1986               	btfsc	6,3	;volatile
  5232  017D  29E1               	goto	i1l3724
  5233                           
  5234                           ;main.c: 560: if (mode == 1 && quit == 2) {
  5235  017E  0359               	decf	_mode,w
  5236  017F  1D03               	btfss	3,2
  5237  0180  29C2               	goto	i1l3710
  5238  0181  3002               	movlw	2
  5239  0182  1683               	bsf	3,5	;RP0=1, select bank1
  5240  0183  1303               	bcf	3,6	;RP1=0, select bank1
  5241  0184  0639               	xorwf	_quit^(0+128),w
  5242  0185  1903               	btfsc	3,2
  5243  0186  29A8               	goto	i1l3706
  5244  0187  29C2               	goto	i1l3710
  5245  0188                     i1l3688:	
  5246                           ;main.c: 562: case 1: minute--;
  5247                           
  5248                           ;main.c: 561: switch (set) {
  5249                           
  5250  0188  3001               	movlw	1
  5251  0189  02B7               	subwf	_minute^(0+128),f
  5252                           
  5253                           ;main.c: 563: Write_Min();
  5254  018A  160A  118A  2668  120A  118A  	fcall	_Write_Min
  5255                           
  5256                           ;main.c: 564: break;
  5257  018F  29BC               	goto	i1l3708
  5258  0190                     i1l3692:	
  5259                           ;main.c: 565: case 2: hour--;
  5260                           
  5261  0190  3001               	movlw	1
  5262  0191  1683               	bsf	3,5	;RP0=1, select bank1
  5263  0192  1303               	bcf	3,6	;RP1=0, select bank1
  5264  0193  02B4               	subwf	_hour^(0+128),f
  5265                           
  5266                           ;main.c: 566: Write_Hour();
  5267  0194  120A  158A  246B  120A  118A  	fcall	_Write_Hour
  5268                           
  5269                           ;main.c: 567: break;
  5270  0199  29BC               	goto	i1l3708
  5271  019A                     i1l3696:	
  5272                           ;main.c: 568: case 3: day--;
  5273                           
  5274  019A  3001               	movlw	1
  5275  019B  1683               	bsf	3,5	;RP0=1, select bank1
  5276  019C  1303               	bcf	3,6	;RP1=0, select bank1
  5277  019D  02B3               	subwf	_day^(0+128),f
  5278                           
  5279                           ;main.c: 569: break;
  5280  019E  29BC               	goto	i1l3708
  5281  019F                     i1l3698:	
  5282                           ;main.c: 570: case 4: date--;
  5283                           
  5284  019F  3001               	movlw	1
  5285  01A0  02B2               	subwf	_date^(0+128),f
  5286                           
  5287                           ;main.c: 571: break;
  5288  01A1  29BC               	goto	i1l3708
  5289  01A2                     i1l3700:	
  5290                           ;main.c: 572: case 5: month--;
  5291                           
  5292  01A2  3001               	movlw	1
  5293  01A3  02B8               	subwf	_month^(0+128),f
  5294                           
  5295                           ;main.c: 573: break;
  5296  01A4  29BC               	goto	i1l3708
  5297  01A5                     i1l3702:	
  5298                           ;main.c: 574: case 6: year--;
  5299                           
  5300  01A5  3001               	movlw	1
  5301  01A6  02BD               	subwf	_year^(0+128),f
  5302                           
  5303                           ;main.c: 576: }
  5304                           
  5305                           ;main.c: 575: break;
  5306  01A7  29BC               	goto	i1l3708
  5307  01A8                     i1l3706:	
  5308  01A8  083B               	movf	_set^(0+128),w
  5309                           
  5310                           ; Switch size 1, requested type "space"
  5311                           ; Number of cases is 6, Range of values is 1 to 6
  5312                           ; switch strategies available:
  5313                           ; Name         Instructions Cycles
  5314                           ; simple_byte           19    10 (average)
  5315                           ; direct_byte           29    11 (fixed)
  5316                           ; jumptable            263     9 (fixed)
  5317                           ;	Chosen strategy is simple_byte
  5318  01A9  3A01               	xorlw	1	; case 1
  5319  01AA  1903               	skipnz
  5320  01AB  2988               	goto	i1l3688
  5321  01AC  3A03               	xorlw	3	; case 2
  5322  01AD  1903               	skipnz
  5323  01AE  2990               	goto	i1l3692
  5324  01AF  3A01               	xorlw	1	; case 3
  5325  01B0  1903               	skipnz
  5326  01B1  299A               	goto	i1l3696
  5327  01B2  3A07               	xorlw	7	; case 4
  5328  01B3  1903               	skipnz
  5329  01B4  299F               	goto	i1l3698
  5330  01B5  3A01               	xorlw	1	; case 5
  5331  01B6  1903               	skipnz
  5332  01B7  29A2               	goto	i1l3700
  5333  01B8  3A03               	xorlw	3	; case 6
  5334  01B9  1903               	skipnz
  5335  01BA  29A5               	goto	i1l3702
  5336  01BB  29BC               	goto	i1l3708
  5337  01BC                     i1l3708:	
  5338                           
  5339                           ;main.c: 577: Write_Time();
  5340  01BC  160A  118A  26C2  120A  118A  	fcall	_Write_Time
  5341                           
  5342                           ;main.c: 578: } else if (mode == 2) {
  5343  01C1  29E1               	goto	i1l3724
  5344  01C2                     i1l3710:	
  5345  01C2  3002               	movlw	2
  5346  01C3  1283               	bcf	3,5	;RP0=0, select bank0
  5347  01C4  1303               	bcf	3,6	;RP1=0, select bank0
  5348  01C5  0659               	xorwf	_mode,w
  5349  01C6  1903               	btfsc	3,2
  5350  01C7  29D2               	goto	i1l3720
  5351  01C8  29E1               	goto	i1l3724
  5352  01C9                     i1l3714:	
  5353                           ;main.c: 580: case 1: hour_alarm--;
  5354                           
  5355                           ;main.c: 579: switch (set) {
  5356                           
  5357  01C9  3001               	movlw	1
  5358  01CA  1283               	bcf	3,5	;RP0=0, select bank0
  5359  01CB  02D8               	subwf	_hour_alarm,f
  5360                           
  5361                           ;main.c: 581: break;
  5362  01CC  29DC               	goto	i1l3722
  5363  01CD                     i1l3716:	
  5364                           ;main.c: 582: case 2: minute_alarm--;
  5365                           
  5366  01CD  3001               	movlw	1
  5367  01CE  1683               	bsf	3,5	;RP0=1, select bank1
  5368  01CF  1303               	bcf	3,6	;RP1=0, select bank1
  5369  01D0  02BF               	subwf	_minute_alarm^(0+128),f
  5370                           
  5371                           ;main.c: 584: }
  5372                           
  5373                           ;main.c: 583: break;
  5374  01D1  29DC               	goto	i1l3722
  5375  01D2                     i1l3720:	
  5376  01D2  1683               	bsf	3,5	;RP0=1, select bank1
  5377  01D3  1303               	bcf	3,6	;RP1=0, select bank1
  5378  01D4  083B               	movf	_set^(0+128),w
  5379                           
  5380                           ; Switch size 1, requested type "space"
  5381                           ; Number of cases is 2, Range of values is 1 to 2
  5382                           ; switch strategies available:
  5383                           ; Name         Instructions Cycles
  5384                           ; simple_byte            7     4 (average)
  5385                           ; direct_byte           17    11 (fixed)
  5386                           ; jumptable            263     9 (fixed)
  5387                           ;	Chosen strategy is simple_byte
  5388  01D5  3A01               	xorlw	1	; case 1
  5389  01D6  1903               	skipnz
  5390  01D7  29C9               	goto	i1l3714
  5391  01D8  3A03               	xorlw	3	; case 2
  5392  01D9  1903               	skipnz
  5393  01DA  29CD               	goto	i1l3716
  5394  01DB  29DC               	goto	i1l3722
  5395  01DC                     i1l3722:	
  5396                           
  5397                           ;main.c: 585: Fix_Alarm();
  5398  01DC  120A  158A  23F2  120A  118A  	fcall	_Fix_Alarm
  5399  01E1                     i1l3724:	
  5400                           
  5401                           ;main.c: 586: }
  5402                           ;main.c: 587: }
  5403                           ;main.c: 588: INTCONbits.RBIF = 0;
  5404  01E1  100B               	bcf	11,0	;volatile
  5405  01E2                     i1l3726:	
  5406                           
  5407                           ;main.c: 589: }
  5408                           ;main.c: 590: if (INTCONbits.T0IF) {
  5409  01E2  1D0B               	btfss	11,2	;volatile
  5410  01E3  2A01               	goto	i1l408
  5411                           
  5412                           ;main.c: 591: count++;
  5413  01E4  3001               	movlw	1
  5414  01E5  1283               	bcf	3,5	;RP0=0, select bank0
  5415  01E6  1303               	bcf	3,6	;RP1=0, select bank0
  5416  01E7  00CC               	movwf	??_ISR
  5417  01E8  084C               	movf	??_ISR,w
  5418  01E9  07D7               	addwf	_count,f
  5419                           
  5420                           ;main.c: 592: if (count > 120 && mode == 0) {
  5421  01EA  3079               	movlw	121
  5422  01EB  0257               	subwf	_count,w
  5423  01EC  1C03               	skipc
  5424  01ED  29FE               	goto	i1l3740
  5425  01EE  0859               	movf	_mode,w
  5426  01EF  1D03               	btfss	3,2
  5427  01F0  29FE               	goto	i1l3740
  5428                           
  5429                           ;main.c: 593: Read_Time();
  5430  01F1  120A  158A  22B1  120A  118A  	fcall	_Read_Time
  5431                           
  5432                           ;main.c: 594: Read_Tem();
  5433  01F6  120A  158A  237C  120A  118A  	fcall	_Read_Tem
  5434                           
  5435                           ;main.c: 595: count = 0;
  5436  01FB  1283               	bcf	3,5	;RP0=0, select bank0
  5437  01FC  1303               	bcf	3,6	;RP1=0, select bank0
  5438  01FD  01D7               	clrf	_count
  5439  01FE                     i1l3740:	
  5440                           
  5441                           ;main.c: 596: }
  5442                           ;main.c: 597: INTCONbits.T0IF = 0;
  5443  01FE  110B               	bcf	11,2	;volatile
  5444                           
  5445                           ;main.c: 598: TMR0 = 6;
  5446  01FF  3006               	movlw	6
  5447  0200  0081               	movwf	1	;volatile
  5448  0201                     i1l408:	
  5449  0201  1283               	bcf	3,5	;RP0=0, select bank0
  5450  0202  1303               	bcf	3,6	;RP1=0, select bank0
  5451  0203  0850               	movf	??_ISR+4,w
  5452  0204  00FF               	movwf	127
  5453  0205  084F               	movf	??_ISR+3,w
  5454  0206  008A               	movwf	10
  5455  0207  084E               	movf	??_ISR+2,w
  5456  0208  0084               	movwf	4
  5457  0209  0E4D               	swapf	(??_ISR+1)^0,w
  5458  020A  0083               	movwf	3
  5459  020B  0EFE               	swapf	126,f
  5460  020C  0E7E               	swapf	126,w
  5461  020D  0009               	retfie
  5462  020E                     __end_of_ISR:	
  5463                           
  5464                           	psect	intentry
  5465  0004                     __pintentry:	
  5466                           ;incstack = 0
  5467                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5468                           
  5469  0004                     interrupt_function:	
  5470  007E                     saved_w	set	btemp
  5471  0004  00FE               	movwf	btemp
  5472  0005  0E03               	swapf	3,w
  5473  0006  1283               	bcf	3,5	;RP0=0, select bank0
  5474  0007  1303               	bcf	3,6	;RP1=0, select bank0
  5475  0008  00CD               	movwf	??_ISR+1
  5476  0009  0804               	movf	4,w
  5477  000A  00CE               	movwf	??_ISR+2
  5478  000B  080A               	movf	10,w
  5479  000C  00CF               	movwf	??_ISR+3
  5480  000D  087F               	movf	btemp+1,w
  5481  000E  00D0               	movwf	??_ISR+4
  5482  000F  120A  118A  282B   	ljmp	_ISR
  5483                           
  5484                           	psect	text26
  5485  081D                     __ptext26:	
  5486 ;; *************** function i1_Read_FullTime *****************
  5487 ;; Defined at:
  5488 ;;		line 108 in file "main.c"
  5489 ;; Parameters:    Size  Location     Type
  5490 ;;		None
  5491 ;; Auto vars:     Size  Location     Type
  5492 ;;		None
  5493 ;; Return value:  Size  Location     Type
  5494 ;;		None               void
  5495 ;; Registers used:
  5496 ;;		wreg, status,2, status,0, pclath, cstack
  5497 ;; Tracked objects:
  5498 ;;		On entry : 0/0
  5499 ;;		On exit  : 0/0
  5500 ;;		Unchanged: 0/0
  5501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5502 ;;      Params:         0       0       0       0       0
  5503 ;;      Locals:         0       0       0       0       0
  5504 ;;      Temps:          1       0       0       0       0
  5505 ;;      Totals:         1       0       0       0       0
  5506 ;;Total ram usage:        1 bytes
  5507 ;; Hardware stack levels used:    1
  5508 ;; Hardware stack levels required when called:    2
  5509 ;; This function calls:
  5510 ;;		i1_DS1307_Read
  5511 ;; This function is called by:
  5512 ;;		_ISR
  5513 ;; This function uses a non-reentrant model
  5514 ;;
  5515                           
  5516                           
  5517                           ;psect for function i1_Read_FullTime
  5518  081D                     i1_Read_FullTime:	
  5519                           
  5520                           ;main.c: 109: second = DS1307_Read(0x00);
  5521                           
  5522                           ;incstack = 0
  5523                           ; Regs used in i1_Read_FullTime: [wreg+status,2+status,0+pclath+cstack]
  5524  081D  3000               	movlw	0
  5525  081E  160A  118A  276D  120A  158A  	fcall	i1_DS1307_Read
  5526  0823  00FB               	movwf	??i1_Read_FullTime
  5527  0824  087B               	movf	??i1_Read_FullTime,w
  5528  0825  1683               	bsf	3,5	;RP0=1, select bank1
  5529  0826  1303               	bcf	3,6	;RP1=0, select bank1
  5530  0827  00BA               	movwf	_second^(0+128)
  5531                           
  5532                           ;main.c: 110: minute = DS1307_Read(0x01);
  5533  0828  3001               	movlw	1
  5534  0829  160A  118A  276D  120A  158A  	fcall	i1_DS1307_Read
  5535  082E  00FB               	movwf	??i1_Read_FullTime
  5536  082F  087B               	movf	??i1_Read_FullTime,w
  5537  0830  1683               	bsf	3,5	;RP0=1, select bank1
  5538  0831  1303               	bcf	3,6	;RP1=0, select bank1
  5539  0832  00B7               	movwf	_minute^(0+128)
  5540                           
  5541                           ;main.c: 111: hour = DS1307_Read(0x02);
  5542  0833  3002               	movlw	2
  5543  0834  160A  118A  276D  120A  158A  	fcall	i1_DS1307_Read
  5544  0839  00FB               	movwf	??i1_Read_FullTime
  5545  083A  087B               	movf	??i1_Read_FullTime,w
  5546  083B  1683               	bsf	3,5	;RP0=1, select bank1
  5547  083C  1303               	bcf	3,6	;RP1=0, select bank1
  5548  083D  00B4               	movwf	_hour^(0+128)
  5549                           
  5550                           ;main.c: 112: day = DS1307_Read(0x03);
  5551  083E  3003               	movlw	3
  5552  083F  160A  118A  276D  120A  158A  	fcall	i1_DS1307_Read
  5553  0844  00FB               	movwf	??i1_Read_FullTime
  5554  0845  087B               	movf	??i1_Read_FullTime,w
  5555  0846  1683               	bsf	3,5	;RP0=1, select bank1
  5556  0847  1303               	bcf	3,6	;RP1=0, select bank1
  5557  0848  00B3               	movwf	_day^(0+128)
  5558                           
  5559                           ;main.c: 113: date = DS1307_Read(0x04);
  5560  0849  3004               	movlw	4
  5561  084A  160A  118A  276D  120A  158A  	fcall	i1_DS1307_Read
  5562  084F  00FB               	movwf	??i1_Read_FullTime
  5563  0850  087B               	movf	??i1_Read_FullTime,w
  5564  0851  1683               	bsf	3,5	;RP0=1, select bank1
  5565  0852  1303               	bcf	3,6	;RP1=0, select bank1
  5566  0853  00B2               	movwf	_date^(0+128)
  5567                           
  5568                           ;main.c: 114: month = DS1307_Read(0x05);
  5569  0854  3005               	movlw	5
  5570  0855  160A  118A  276D  120A  158A  	fcall	i1_DS1307_Read
  5571  085A  00FB               	movwf	??i1_Read_FullTime
  5572  085B  087B               	movf	??i1_Read_FullTime,w
  5573  085C  1683               	bsf	3,5	;RP0=1, select bank1
  5574  085D  1303               	bcf	3,6	;RP1=0, select bank1
  5575  085E  00B8               	movwf	_month^(0+128)
  5576                           
  5577                           ;main.c: 115: year = DS1307_Read(0x06);
  5578  085F  3006               	movlw	6
  5579  0860  160A  118A  276D   	fcall	i1_DS1307_Read
  5580  0863  00FB               	movwf	??i1_Read_FullTime
  5581  0864  087B               	movf	??i1_Read_FullTime,w
  5582  0865  1683               	bsf	3,5	;RP0=1, select bank1
  5583  0866  1303               	bcf	3,6	;RP1=0, select bank1
  5584  0867  00BD               	movwf	_year^(0+128)
  5585  0868  0008               	return
  5586  0869                     __end_ofi1_Read_FullTime:	
  5587                           
  5588                           	psect	text27
  5589  16C2                     __ptext27:	
  5590 ;; *************** function _Write_Time *****************
  5591 ;; Defined at:
  5592 ;;		line 167 in file "main.c"
  5593 ;; Parameters:    Size  Location     Type
  5594 ;;		None
  5595 ;; Auto vars:     Size  Location     Type
  5596 ;;		None
  5597 ;; Return value:  Size  Location     Type
  5598 ;;		None               void
  5599 ;; Registers used:
  5600 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5601 ;; Tracked objects:
  5602 ;;		On entry : 0/0
  5603 ;;		On exit  : 0/0
  5604 ;;		Unchanged: 0/0
  5605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5606 ;;      Params:         0       0       0       0       0
  5607 ;;      Locals:         0       0       0       0       0
  5608 ;;      Temps:          1       0       0       0       0
  5609 ;;      Totals:         1       0       0       0       0
  5610 ;;Total ram usage:        1 bytes
  5611 ;; Hardware stack levels used:    1
  5612 ;; Hardware stack levels required when called:    2
  5613 ;; This function calls:
  5614 ;;		_DS1307_Write
  5615 ;;		_Fix_Time
  5616 ;; This function is called by:
  5617 ;;		_ISR
  5618 ;; This function uses a non-reentrant model
  5619 ;;
  5620                           
  5621                           
  5622                           ;psect for function _Write_Time
  5623  16C2                     _Write_Time:	
  5624                           
  5625                           ;main.c: 168: Fix_Time();
  5626                           
  5627                           ;incstack = 0
  5628                           ; Regs used in _Write_Time: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5629  16C2  120A  158A  255F  160A  118A  	fcall	_Fix_Time
  5630                           
  5631                           ;main.c: 169: DS1307_Write(0x03, day);
  5632  16C7  1683               	bsf	3,5	;RP0=1, select bank1
  5633  16C8  1303               	bcf	3,6	;RP1=0, select bank1
  5634  16C9  0833               	movf	_day^(0+128),w
  5635  16CA  00FC               	movwf	??_Write_Time
  5636  16CB  087C               	movf	??_Write_Time,w
  5637  16CC  00F9               	movwf	DS1307_Write@dat
  5638  16CD  3003               	movlw	3
  5639  16CE  120A  158A  21A6  160A  118A  	fcall	_DS1307_Write
  5640                           
  5641                           ;main.c: 170: DS1307_Write(0x04, date);
  5642  16D3  1683               	bsf	3,5	;RP0=1, select bank1
  5643  16D4  1303               	bcf	3,6	;RP1=0, select bank1
  5644  16D5  0832               	movf	_date^(0+128),w
  5645  16D6  00FC               	movwf	??_Write_Time
  5646  16D7  087C               	movf	??_Write_Time,w
  5647  16D8  00F9               	movwf	DS1307_Write@dat
  5648  16D9  3004               	movlw	4
  5649  16DA  120A  158A  21A6  160A  118A  	fcall	_DS1307_Write
  5650                           
  5651                           ;main.c: 171: DS1307_Write(0x05, month);
  5652  16DF  1683               	bsf	3,5	;RP0=1, select bank1
  5653  16E0  1303               	bcf	3,6	;RP1=0, select bank1
  5654  16E1  0838               	movf	_month^(0+128),w
  5655  16E2  00FC               	movwf	??_Write_Time
  5656  16E3  087C               	movf	??_Write_Time,w
  5657  16E4  00F9               	movwf	DS1307_Write@dat
  5658  16E5  3005               	movlw	5
  5659  16E6  120A  158A  21A6  160A  118A  	fcall	_DS1307_Write
  5660                           
  5661                           ;main.c: 172: DS1307_Write(0x06, year);
  5662  16EB  1683               	bsf	3,5	;RP0=1, select bank1
  5663  16EC  1303               	bcf	3,6	;RP1=0, select bank1
  5664  16ED  083D               	movf	_year^(0+128),w
  5665  16EE  00FC               	movwf	??_Write_Time
  5666  16EF  087C               	movf	??_Write_Time,w
  5667  16F0  00F9               	movwf	DS1307_Write@dat
  5668  16F1  3006               	movlw	6
  5669  16F2  120A  158A  21A6   	fcall	_DS1307_Write
  5670  16F5  0008               	return
  5671  16F6                     __end_of_Write_Time:	
  5672                           
  5673                           	psect	text28
  5674  0D5F                     __ptext28:	
  5675 ;; *************** function _Fix_Time *****************
  5676 ;; Defined at:
  5677 ;;		line 50 in file "main.c"
  5678 ;; Parameters:    Size  Location     Type
  5679 ;;		None
  5680 ;; Auto vars:     Size  Location     Type
  5681 ;;		None
  5682 ;; Return value:  Size  Location     Type
  5683 ;;		None               void
  5684 ;; Registers used:
  5685 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5686 ;; Tracked objects:
  5687 ;;		On entry : 0/0
  5688 ;;		On exit  : 0/0
  5689 ;;		Unchanged: 0/0
  5690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5691 ;;      Params:         0       0       0       0       0
  5692 ;;      Locals:         0       0       0       0       0
  5693 ;;      Temps:          1       0       0       0       0
  5694 ;;      Totals:         1       0       0       0       0
  5695 ;;Total ram usage:        1 bytes
  5696 ;; Hardware stack levels used:    1
  5697 ;; This function calls:
  5698 ;;		Nothing
  5699 ;; This function is called by:
  5700 ;;		_Write_Time
  5701 ;; This function uses a non-reentrant model
  5702 ;;
  5703                           
  5704                           
  5705                           ;psect for function _Fix_Time
  5706  0D5F                     _Fix_Time:	
  5707                           
  5708                           ;main.c: 52: if (day == 0) day = 7;
  5709                           
  5710                           ;incstack = 0
  5711                           ; Regs used in _Fix_Time: [wreg-fsr0h+status,2+status,0]
  5712  0D5F  1683               	bsf	3,5	;RP0=1, select bank1
  5713  0D60  1303               	bcf	3,6	;RP1=0, select bank1
  5714  0D61  0833               	movf	_day^(0+128),w
  5715  0D62  1D03               	btfss	3,2
  5716  0D63  2D69               	goto	i1l2746
  5717  0D64  3007               	movlw	7
  5718  0D65  00F0               	movwf	??_Fix_Time
  5719  0D66  0870               	movf	??_Fix_Time,w
  5720  0D67  00B3               	movwf	_day^(0+128)
  5721  0D68  2D6F               	goto	i1l2750
  5722  0D69                     i1l2746:	
  5723                           
  5724                           ;main.c: 53: else if (day == 8) day = 1;
  5725  0D69  3008               	movlw	8
  5726  0D6A  0633               	xorwf	_day^(0+128),w
  5727  0D6B  1D03               	btfss	3,2
  5728  0D6C  2D6F               	goto	i1l2750
  5729  0D6D  01B3               	clrf	_day^(0+128)
  5730  0D6E  0AB3               	incf	_day^(0+128),f
  5731  0D6F                     i1l2750:	
  5732                           
  5733                           ;main.c: 55: if (month == 0) month = 12;
  5734  0D6F  0838               	movf	_month^(0+128),w
  5735  0D70  1D03               	btfss	3,2
  5736  0D71  2D77               	goto	i1l2754
  5737  0D72  300C               	movlw	12
  5738  0D73  00F0               	movwf	??_Fix_Time
  5739  0D74  0870               	movf	??_Fix_Time,w
  5740  0D75  00B8               	movwf	_month^(0+128)
  5741  0D76  2D7D               	goto	i1l2758
  5742  0D77                     i1l2754:	
  5743                           
  5744                           ;main.c: 56: else if (month == 13) month = 1;
  5745  0D77  300D               	movlw	13
  5746  0D78  0638               	xorwf	_month^(0+128),w
  5747  0D79  1D03               	btfss	3,2
  5748  0D7A  2D7D               	goto	i1l2758
  5749  0D7B  01B8               	clrf	_month^(0+128)
  5750  0D7C  0AB8               	incf	_month^(0+128),f
  5751  0D7D                     i1l2758:	
  5752                           
  5753                           ;main.c: 58: if (year == 255) year = 99;
  5754  0D7D  0A3D               	incf	_year^(0+128),w
  5755  0D7E  1D03               	btfss	3,2
  5756  0D7F  2D85               	goto	i1l2762
  5757  0D80  3063               	movlw	99
  5758  0D81  00F0               	movwf	??_Fix_Time
  5759  0D82  0870               	movf	??_Fix_Time,w
  5760  0D83  00BD               	movwf	_year^(0+128)
  5761  0D84  2DD7               	goto	i1l2804
  5762  0D85                     i1l2762:	
  5763                           
  5764                           ;main.c: 59: else if (year == 100) year = 0;
  5765  0D85  3064               	movlw	100
  5766  0D86  063D               	xorwf	_year^(0+128),w
  5767  0D87  1D03               	btfss	3,2
  5768  0D88  2DD7               	goto	i1l2804
  5769  0D89  01BD               	clrf	_year^(0+128)
  5770                           
  5771                           ;main.c: 61: switch (month) {
  5772  0D8A  2DD7               	goto	i1l2804
  5773  0D8B                     i1l2766:	
  5774                           ;main.c: 62: case 2:
  5775                           
  5776                           
  5777                           ;main.c: 63: {
  5778                           ;main.c: 64: if (year & 3) {
  5779  0D8B  083D               	movf	_year^(0+128),w
  5780  0D8C  3903               	andlw	3
  5781  0D8D  1903               	btfsc	3,2
  5782  0D8E  2DA6               	goto	i1l2778
  5783                           
  5784                           ;main.c: 65: if (date == 0) date = 28;
  5785  0D8F  0832               	movf	_date^(0+128),w
  5786  0D90  1D03               	btfss	3,2
  5787  0D91  2D97               	goto	i1l2772
  5788  0D92  301C               	movlw	28
  5789  0D93  00F0               	movwf	??_Fix_Time
  5790  0D94  0870               	movf	??_Fix_Time,w
  5791  0D95  00B2               	movwf	_date^(0+128)
  5792  0D96  0008               	return
  5793  0D97                     i1l2772:	
  5794                           
  5795                           ;main.c: 66: else if (date == 29 || date == 30 || date == 31) date = 1;
  5796  0D97  301D               	movlw	29
  5797  0D98  0632               	xorwf	_date^(0+128),w
  5798  0D99  1903               	btfsc	3,2
  5799  0D9A  2DA3               	goto	i1l125
  5800  0D9B  301E               	movlw	30
  5801  0D9C  0632               	xorwf	_date^(0+128),w
  5802  0D9D  1903               	btfsc	3,2
  5803  0D9E  2DA3               	goto	i1l125
  5804  0D9F  301F               	movlw	31
  5805  0DA0  0632               	xorwf	_date^(0+128),w
  5806  0DA1  1D03               	btfss	3,2
  5807  0DA2  0008               	return
  5808  0DA3                     i1l125:	
  5809  0DA3  01B2               	clrf	_date^(0+128)
  5810  0DA4  0AB2               	incf	_date^(0+128),f
  5811                           
  5812                           ;main.c: 67: } else {
  5813  0DA5  0008               	return
  5814  0DA6                     i1l2778:	
  5815                           
  5816                           ;main.c: 68: if (date == 0) date = 29;
  5817  0DA6  0832               	movf	_date^(0+128),w
  5818  0DA7  1D03               	btfss	3,2
  5819  0DA8  2DAE               	goto	i1l2782
  5820  0DA9  301D               	movlw	29
  5821  0DAA  00F0               	movwf	??_Fix_Time
  5822  0DAB  0870               	movf	??_Fix_Time,w
  5823  0DAC  00B2               	movwf	_date^(0+128)
  5824  0DAD  0008               	return
  5825  0DAE                     i1l2782:	
  5826                           
  5827                           ;main.c: 69: else if (date == 30 || date == 31) date = 1;
  5828  0DAE  301E               	movlw	30
  5829  0DAF  0632               	xorwf	_date^(0+128),w
  5830  0DB0  1903               	btfsc	3,2
  5831  0DB1  2DB6               	goto	i1l131
  5832  0DB2  301F               	movlw	31
  5833  0DB3  0632               	xorwf	_date^(0+128),w
  5834  0DB4  1D03               	btfss	3,2
  5835  0DB5  0008               	return
  5836  0DB6                     i1l131:	
  5837  0DB6  01B2               	clrf	_date^(0+128)
  5838  0DB7  0AB2               	incf	_date^(0+128),f
  5839                           
  5840                           ;main.c: 70: }
  5841                           ;main.c: 71: break;
  5842  0DB8  0008               	return
  5843  0DB9                     i1l2786:	
  5844                           ;main.c: 72: }
  5845                           ;main.c: 73: case 4: case 6: case 9: case 11:
  5846                           
  5847                           
  5848                           ;main.c: 74: {
  5849                           ;main.c: 75: if (date == 0) date = 30;
  5850  0DB9  0832               	movf	_date^(0+128),w
  5851  0DBA  1D03               	btfss	3,2
  5852  0DBB  2DC1               	goto	i1l2790
  5853  0DBC  301E               	movlw	30
  5854  0DBD  00F0               	movwf	??_Fix_Time
  5855  0DBE  0870               	movf	??_Fix_Time,w
  5856  0DBF  00B2               	movwf	_date^(0+128)
  5857  0DC0  0008               	return
  5858  0DC1                     i1l2790:	
  5859                           
  5860                           ;main.c: 76: else if (date == 31) date = 1;
  5861  0DC1  301F               	movlw	31
  5862  0DC2  0632               	xorwf	_date^(0+128),w
  5863  0DC3  1D03               	btfss	3,2
  5864  0DC4  0008               	return
  5865  0DC5  01B2               	clrf	_date^(0+128)
  5866  0DC6  0AB2               	incf	_date^(0+128),f
  5867                           
  5868                           ;main.c: 77: break;
  5869  0DC7  0008               	return
  5870  0DC8                     i1l2794:	
  5871                           ;main.c: 78: }
  5872                           ;main.c: 79: default:
  5873                           
  5874                           
  5875                           ;main.c: 80: {
  5876                           ;main.c: 81: if (date == 0) date = 31;
  5877  0DC8  0832               	movf	_date^(0+128),w
  5878  0DC9  1D03               	btfss	3,2
  5879  0DCA  2DD0               	goto	i1l2798
  5880  0DCB  301F               	movlw	31
  5881  0DCC  00F0               	movwf	??_Fix_Time
  5882  0DCD  0870               	movf	??_Fix_Time,w
  5883  0DCE  00B2               	movwf	_date^(0+128)
  5884  0DCF  0008               	return
  5885  0DD0                     i1l2798:	
  5886                           
  5887                           ;main.c: 82: else if (date == 32) date = 1;
  5888  0DD0  3020               	movlw	32
  5889  0DD1  0632               	xorwf	_date^(0+128),w
  5890  0DD2  1D03               	btfss	3,2
  5891  0DD3  0008               	return
  5892  0DD4  01B2               	clrf	_date^(0+128)
  5893  0DD5  0AB2               	incf	_date^(0+128),f
  5894                           
  5895                           ;main.c: 84: }
  5896                           ;main.c: 85: }
  5897                           
  5898                           ;main.c: 83: break;
  5899  0DD6  0008               	return
  5900  0DD7                     i1l2804:	
  5901  0DD7  0838               	movf	_month^(0+128),w
  5902                           
  5903                           ; Switch size 1, requested type "space"
  5904                           ; Number of cases is 5, Range of values is 2 to 11
  5905                           ; switch strategies available:
  5906                           ; Name         Instructions Cycles
  5907                           ; simple_byte           16     9 (average)
  5908                           ; direct_byte           41    11 (fixed)
  5909                           ; jumptable            263     9 (fixed)
  5910                           ;	Chosen strategy is simple_byte
  5911  0DD8  3A02               	xorlw	2	; case 2
  5912  0DD9  1903               	skipnz
  5913  0DDA  2D8B               	goto	i1l2766
  5914  0DDB  3A06               	xorlw	6	; case 4
  5915  0DDC  1903               	skipnz
  5916  0DDD  2DB9               	goto	i1l2786
  5917  0DDE  3A02               	xorlw	2	; case 6
  5918  0DDF  1903               	skipnz
  5919  0DE0  2DB9               	goto	i1l2786
  5920  0DE1  3A0F               	xorlw	15	; case 9
  5921  0DE2  1903               	skipnz
  5922  0DE3  2DB9               	goto	i1l2786
  5923  0DE4  3A02               	xorlw	2	; case 11
  5924  0DE5  1903               	skipnz
  5925  0DE6  2DB9               	goto	i1l2786
  5926  0DE7  2DC8               	goto	i1l2794
  5927  0DE8  0008               	return
  5928  0DE9                     __end_of_Fix_Time:	
  5929                           
  5930                           	psect	text29
  5931  1668                     __ptext29:	
  5932 ;; *************** function _Write_Min *****************
  5933 ;; Defined at:
  5934 ;;		line 138 in file "main.c"
  5935 ;; Parameters:    Size  Location     Type
  5936 ;;		None
  5937 ;; Auto vars:     Size  Location     Type
  5938 ;;		None
  5939 ;; Return value:  Size  Location     Type
  5940 ;;		None               void
  5941 ;; Registers used:
  5942 ;;		wreg, status,2, status,0, pclath, cstack
  5943 ;; Tracked objects:
  5944 ;;		On entry : 0/0
  5945 ;;		On exit  : 0/0
  5946 ;;		Unchanged: 0/0
  5947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5948 ;;      Params:         0       0       0       0       0
  5949 ;;      Locals:         0       0       0       0       0
  5950 ;;      Temps:          1       0       0       0       0
  5951 ;;      Totals:         1       0       0       0       0
  5952 ;;Total ram usage:        1 bytes
  5953 ;; Hardware stack levels used:    1
  5954 ;; Hardware stack levels required when called:    2
  5955 ;; This function calls:
  5956 ;;		_DS1307_Write
  5957 ;; This function is called by:
  5958 ;;		_ISR
  5959 ;; This function uses a non-reentrant model
  5960 ;;
  5961                           
  5962                           
  5963                           ;psect for function _Write_Min
  5964  1668                     _Write_Min:	
  5965                           
  5966                           ;main.c: 139: if (second == 255) second = 59;
  5967                           
  5968                           ;incstack = 0
  5969                           ; Regs used in _Write_Min: [wreg+status,2+status,0+pclath+cstack]
  5970  1668  1683               	bsf	3,5	;RP0=1, select bank1
  5971  1669  1303               	bcf	3,6	;RP1=0, select bank1
  5972  166A  0A3A               	incf	_second^(0+128),w
  5973  166B  1D03               	btfss	3,2
  5974  166C  2E72               	goto	i1l3160
  5975  166D  303B               	movlw	59
  5976  166E  00FC               	movwf	??_Write_Min
  5977  166F  087C               	movf	??_Write_Min,w
  5978  1670  00BA               	movwf	_second^(0+128)
  5979  1671  2E76               	goto	i1l3164
  5980  1672                     i1l3160:	
  5981                           
  5982                           ;main.c: 140: else if (second == 60) second = 0;
  5983  1672  303C               	movlw	60
  5984  1673  063A               	xorwf	_second^(0+128),w
  5985  1674  1903               	btfsc	3,2
  5986  1675  01BA               	clrf	_second^(0+128)
  5987  1676                     i1l3164:	
  5988                           
  5989                           ;main.c: 142: if (minute == 255) minute = 59;
  5990  1676  0A37               	incf	_minute^(0+128),w
  5991  1677  1D03               	btfss	3,2
  5992  1678  2E7E               	goto	i1l3168
  5993  1679  303B               	movlw	59
  5994  167A  00FC               	movwf	??_Write_Min
  5995  167B  087C               	movf	??_Write_Min,w
  5996  167C  00B7               	movwf	_minute^(0+128)
  5997  167D  2E82               	goto	i1l3172
  5998  167E                     i1l3168:	
  5999                           
  6000                           ;main.c: 143: else if (minute == 60) minute = 0;
  6001  167E  303C               	movlw	60
  6002  167F  0637               	xorwf	_minute^(0+128),w
  6003  1680  1903               	btfsc	3,2
  6004  1681  01B7               	clrf	_minute^(0+128)
  6005  1682                     i1l3172:	
  6006                           
  6007                           ;main.c: 144: DS1307_Write(0x00, 0);
  6008  1682  01F9               	clrf	DS1307_Write@dat
  6009  1683  3000               	movlw	0
  6010  1684  120A  158A  21A6  160A  118A  	fcall	_DS1307_Write
  6011                           
  6012                           ;main.c: 145: DS1307_Write(0x01, minute);
  6013  1689  1683               	bsf	3,5	;RP0=1, select bank1
  6014  168A  1303               	bcf	3,6	;RP1=0, select bank1
  6015  168B  0837               	movf	_minute^(0+128),w
  6016  168C  00FC               	movwf	??_Write_Min
  6017  168D  087C               	movf	??_Write_Min,w
  6018  168E  00F9               	movwf	DS1307_Write@dat
  6019  168F  3001               	movlw	1
  6020  1690  120A  158A  21A6   	fcall	_DS1307_Write
  6021  1693  0008               	return
  6022  1694                     __end_of_Write_Min:	
  6023                           
  6024                           	psect	text30
  6025  0C6B                     __ptext30:	
  6026 ;; *************** function _Write_Hour *****************
  6027 ;; Defined at:
  6028 ;;		line 148 in file "main.c"
  6029 ;; Parameters:    Size  Location     Type
  6030 ;;		None
  6031 ;; Auto vars:     Size  Location     Type
  6032 ;;		None
  6033 ;; Return value:  Size  Location     Type
  6034 ;;		None               void
  6035 ;; Registers used:
  6036 ;;		wreg, status,2, status,0, pclath, cstack
  6037 ;; Tracked objects:
  6038 ;;		On entry : 0/0
  6039 ;;		On exit  : 0/0
  6040 ;;		Unchanged: 0/0
  6041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6042 ;;      Params:         0       0       0       0       0
  6043 ;;      Locals:         0       0       0       0       0
  6044 ;;      Temps:          1       0       0       0       0
  6045 ;;      Totals:         1       0       0       0       0
  6046 ;;Total ram usage:        1 bytes
  6047 ;; Hardware stack levels used:    1
  6048 ;; Hardware stack levels required when called:    2
  6049 ;; This function calls:
  6050 ;;		_DS1307_Write
  6051 ;; This function is called by:
  6052 ;;		_ISR
  6053 ;; This function uses a non-reentrant model
  6054 ;;
  6055                           
  6056                           
  6057                           ;psect for function _Write_Hour
  6058  0C6B                     _Write_Hour:	
  6059                           
  6060                           ;main.c: 150: if (hour < 40 || hour == 255) {
  6061                           
  6062                           ;incstack = 0
  6063                           ; Regs used in _Write_Hour: [wreg+status,2+status,0+pclath+cstack]
  6064  0C6B  3028               	movlw	40
  6065  0C6C  1683               	bsf	3,5	;RP0=1, select bank1
  6066  0C6D  1303               	bcf	3,6	;RP1=0, select bank1
  6067  0C6E  0234               	subwf	_hour^(0+128),w
  6068  0C6F  1C03               	skipc
  6069  0C70  2C74               	goto	i1l3180
  6070  0C71  0A34               	incf	_hour^(0+128),w
  6071  0C72  1D03               	btfss	3,2
  6072  0C73  2C7F               	goto	i1l3188
  6073  0C74                     i1l3180:	
  6074                           
  6075                           ;main.c: 151: if (hour == 255) hour = 23;
  6076  0C74  0A34               	incf	_hour^(0+128),w
  6077  0C75  1D03               	btfss	3,2
  6078  0C76  2C79               	goto	i1l3184
  6079  0C77  3017               	movlw	23
  6080  0C78  2CB0               	goto	L13
  6081  0C79                     i1l3184:	
  6082                           
  6083                           ;main.c: 152: else if (hour == 24) hour = 0;
  6084  0C79  3018               	movlw	24
  6085  0C7A  0634               	xorwf	_hour^(0+128),w
  6086  0C7B  1D03               	btfss	3,2
  6087  0C7C  2CD9               	goto	i1l3234
  6088  0C7D  01B4               	clrf	_hour^(0+128)
  6089                           
  6090                           ;main.c: 153: } else if (hour < 60) {
  6091  0C7E  2CD9               	goto	i1l3234
  6092  0C7F                     i1l3188:	
  6093  0C7F  303C               	movlw	60
  6094  0C80  0234               	subwf	_hour^(0+128),w
  6095  0C81  1803               	skipnc
  6096  0C82  2CAB               	goto	i1l3212
  6097                           
  6098                           ;main.c: 154: if (hour == 40) hour = 52;
  6099  0C83  3028               	movlw	40
  6100  0C84  0634               	xorwf	_hour^(0+128),w
  6101  0C85  1D03               	btfss	3,2
  6102  0C86  2C89               	goto	i1l3194
  6103  0C87  3034               	movlw	52
  6104  0C88  2CB0               	goto	L13
  6105  0C89                     i1l3194:	
  6106                           
  6107                           ;main.c: 155: else if (hour == 51 && RB3 == 0) hour = 71;
  6108  0C89  3033               	movlw	51
  6109  0C8A  0634               	xorwf	_hour^(0+128),w
  6110  0C8B  1D03               	btfss	3,2
  6111  0C8C  2C93               	goto	i1l3200
  6112  0C8D  1283               	bcf	3,5	;RP0=0, select bank0
  6113  0C8E  1303               	bcf	3,6	;RP1=0, select bank0
  6114  0C8F  1986               	btfsc	6,3	;volatile
  6115  0C90  2C93               	goto	i1l3200
  6116  0C91  3047               	movlw	71
  6117  0C92  2CD4               	goto	L12
  6118  0C93                     i1l3200:	
  6119                           
  6120                           ;main.c: 156: else if (hour == 52 && RB2 == 0) hour = 72;
  6121  0C93  3034               	movlw	52
  6122  0C94  1683               	bsf	3,5	;RP0=1, select bank1
  6123  0C95  1303               	bcf	3,6	;RP1=0, select bank1
  6124  0C96  0634               	xorwf	_hour^(0+128),w
  6125  0C97  1D03               	btfss	3,2
  6126  0C98  2C9F               	goto	i1l3206
  6127  0C99  1283               	bcf	3,5	;RP0=0, select bank0
  6128  0C9A  1303               	bcf	3,6	;RP1=0, select bank0
  6129  0C9B  1906               	btfsc	6,2	;volatile
  6130  0C9C  2C9F               	goto	i1l3206
  6131  0C9D  3048               	movlw	72
  6132  0C9E  2CD4               	goto	L12
  6133  0C9F                     i1l3206:	
  6134                           
  6135                           ;main.c: 157: else if (hour == 53 && RB2 == 0) hour = 41;
  6136  0C9F  3035               	movlw	53
  6137  0CA0  1683               	bsf	3,5	;RP0=1, select bank1
  6138  0CA1  1303               	bcf	3,6	;RP1=0, select bank1
  6139  0CA2  0634               	xorwf	_hour^(0+128),w
  6140  0CA3  1D03               	btfss	3,2
  6141  0CA4  2CD9               	goto	i1l3234
  6142  0CA5  1283               	bcf	3,5	;RP0=0, select bank0
  6143  0CA6  1303               	bcf	3,6	;RP1=0, select bank0
  6144  0CA7  1906               	btfsc	6,2	;volatile
  6145  0CA8  2CD9               	goto	i1l3234
  6146  0CA9  3029               	movlw	41
  6147  0CAA  2CD4               	goto	L12
  6148  0CAB                     i1l3212:	
  6149                           ;main.c: 158: } else {
  6150                           
  6151                           
  6152                           ;main.c: 159: if (hour == 60) hour = 72;
  6153  0CAB  303C               	movlw	60
  6154  0CAC  0634               	xorwf	_hour^(0+128),w
  6155  0CAD  1D03               	btfss	3,2
  6156  0CAE  2CB3               	goto	i1l3216
  6157  0CAF  3048               	movlw	72
  6158  0CB0                     L13:	
  6159  0CB0  00FC               	movwf	??_Write_Hour
  6160  0CB1  087C               	movf	??_Write_Hour,w
  6161  0CB2  2CD8               	goto	L11
  6162  0CB3                     i1l3216:	
  6163                           
  6164                           ;main.c: 160: else if (hour == 71 && RB3 == 0) hour = 51;
  6165  0CB3  3047               	movlw	71
  6166  0CB4  0634               	xorwf	_hour^(0+128),w
  6167  0CB5  1D03               	btfss	3,2
  6168  0CB6  2CBD               	goto	i1l3222
  6169  0CB7  1283               	bcf	3,5	;RP0=0, select bank0
  6170  0CB8  1303               	bcf	3,6	;RP1=0, select bank0
  6171  0CB9  1986               	btfsc	6,3	;volatile
  6172  0CBA  2CBD               	goto	i1l3222
  6173  0CBB  3033               	movlw	51
  6174  0CBC  2CD4               	goto	L12
  6175  0CBD                     i1l3222:	
  6176                           
  6177                           ;main.c: 161: else if (hour == 72 && RB2 == 0) hour = 52;
  6178  0CBD  3048               	movlw	72
  6179  0CBE  1683               	bsf	3,5	;RP0=1, select bank1
  6180  0CBF  1303               	bcf	3,6	;RP1=0, select bank1
  6181  0CC0  0634               	xorwf	_hour^(0+128),w
  6182  0CC1  1D03               	btfss	3,2
  6183  0CC2  2CC9               	goto	i1l3228
  6184  0CC3  1283               	bcf	3,5	;RP0=0, select bank0
  6185  0CC4  1303               	bcf	3,6	;RP1=0, select bank0
  6186  0CC5  1906               	btfsc	6,2	;volatile
  6187  0CC6  2CC9               	goto	i1l3228
  6188  0CC7  3034               	movlw	52
  6189  0CC8  2CD4               	goto	L12
  6190  0CC9                     i1l3228:	
  6191                           
  6192                           ;main.c: 162: else if (hour == 73 && RB2 == 0) hour = 61;
  6193  0CC9  3049               	movlw	73
  6194  0CCA  1683               	bsf	3,5	;RP0=1, select bank1
  6195  0CCB  1303               	bcf	3,6	;RP1=0, select bank1
  6196  0CCC  0634               	xorwf	_hour^(0+128),w
  6197  0CCD  1D03               	btfss	3,2
  6198  0CCE  2CD9               	goto	i1l3234
  6199  0CCF  1283               	bcf	3,5	;RP0=0, select bank0
  6200  0CD0  1303               	bcf	3,6	;RP1=0, select bank0
  6201  0CD1  1906               	btfsc	6,2	;volatile
  6202  0CD2  2CD9               	goto	i1l3234
  6203  0CD3  303D               	movlw	61
  6204  0CD4                     L12:	
  6205  0CD4  00FC               	movwf	??_Write_Hour
  6206  0CD5  087C               	movf	??_Write_Hour,w
  6207  0CD6  1683               	bsf	3,5	;RP0=1, select bank1
  6208  0CD7  1303               	bcf	3,6	;RP1=0, select bank1
  6209  0CD8                     L11:	
  6210  0CD8  00B4               	movwf	_hour^(0+128)
  6211  0CD9                     i1l3234:	
  6212                           
  6213                           ;main.c: 163: }
  6214                           ;main.c: 164: DS1307_Write(0x02, hour);
  6215  0CD9  1683               	bsf	3,5	;RP0=1, select bank1
  6216  0CDA  1303               	bcf	3,6	;RP1=0, select bank1
  6217  0CDB  0834               	movf	_hour^(0+128),w
  6218  0CDC  00FC               	movwf	??_Write_Hour
  6219  0CDD  087C               	movf	??_Write_Hour,w
  6220  0CDE  00F9               	movwf	DS1307_Write@dat
  6221  0CDF  3002               	movlw	2
  6222  0CE0  120A  158A  21A6   	fcall	_DS1307_Write
  6223  0CE3  0008               	return
  6224  0CE4                     __end_of_Write_Hour:	
  6225                           
  6226                           	psect	text31
  6227  09A6                     __ptext31:	
  6228 ;; *************** function _DS1307_Write *****************
  6229 ;; Defined at:
  6230 ;;		line 60 in file "i2c.c"
  6231 ;; Parameters:    Size  Location     Type
  6232 ;;  add             1    wreg     unsigned char 
  6233 ;;  dat             1    9[COMMON] unsigned char 
  6234 ;; Auto vars:     Size  Location     Type
  6235 ;;  add             1   10[COMMON] unsigned char 
  6236 ;;  tmp             1   11[COMMON] unsigned char 
  6237 ;; Return value:  Size  Location     Type
  6238 ;;		None               void
  6239 ;; Registers used:
  6240 ;;		wreg, status,2, status,0, pclath, cstack
  6241 ;; Tracked objects:
  6242 ;;		On entry : 0/0
  6243 ;;		On exit  : 0/0
  6244 ;;		Unchanged: 0/0
  6245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6246 ;;      Params:         1       0       0       0       0
  6247 ;;      Locals:         2       0       0       0       0
  6248 ;;      Temps:          0       8       0       0       0
  6249 ;;      Totals:         3       8       0       0       0
  6250 ;;Total ram usage:       11 bytes
  6251 ;; Hardware stack levels used:    1
  6252 ;; Hardware stack levels required when called:    1
  6253 ;; This function calls:
  6254 ;;		i1___awdiv
  6255 ;;		i1___awmod
  6256 ;;		i1_i2c_Start
  6257 ;;		i1_i2c_Stop
  6258 ;;		i1_i2c_Write
  6259 ;; This function is called by:
  6260 ;;		_Write_Min
  6261 ;;		_Write_Hour
  6262 ;;		_Write_Time
  6263 ;;		_ISR
  6264 ;; This function uses a non-reentrant model
  6265 ;;
  6266                           
  6267                           
  6268                           ;psect for function _DS1307_Write
  6269  09A6                     _DS1307_Write:	
  6270                           
  6271                           ;incstack = 0
  6272                           ; Regs used in _DS1307_Write: [wreg+status,2+status,0+pclath+cstack]
  6273                           ;DS1307_Write@add stored from wreg
  6274  09A6  00FA               	movwf	DS1307_Write@add
  6275                           
  6276                           ;i2c.c: 61: unsigned char tmp;
  6277                           ;i2c.c: 62: tmp = ((dat / 10) << 4) | (dat % 10);
  6278  09A7  300A               	movlw	10
  6279  09A8  00F0               	movwf	i1___awmod@divisor
  6280  09A9  3000               	movlw	0
  6281  09AA  00F1               	movwf	i1___awmod@divisor+1
  6282  09AB  0879               	movf	DS1307_Write@dat,w
  6283  09AC  1283               	bcf	3,5	;RP0=0, select bank0
  6284  09AD  1303               	bcf	3,6	;RP1=0, select bank0
  6285  09AE  00A0               	movwf	??_DS1307_Write
  6286  09AF  01A1               	clrf	??_DS1307_Write+1
  6287  09B0  0820               	movf	??_DS1307_Write,w
  6288  09B1  00F2               	movwf	i1___awmod@dividend
  6289  09B2  0821               	movf	??_DS1307_Write+1,w
  6290  09B3  00F3               	movwf	i1___awmod@dividend+1
  6291  09B4  160A  118A  27B5  120A  158A  	fcall	i1___awmod
  6292  09B9  0870               	movf	?i1___awmod,w
  6293  09BA  1283               	bcf	3,5	;RP0=0, select bank0
  6294  09BB  1303               	bcf	3,6	;RP1=0, select bank0
  6295  09BC  00A2               	movwf	??_DS1307_Write+2
  6296  09BD  0871               	movf	?i1___awmod+1,w
  6297  09BE  00A3               	movwf	??_DS1307_Write+3
  6298  09BF  300A               	movlw	10
  6299  09C0  00F0               	movwf	i1___awdiv@divisor
  6300  09C1  3000               	movlw	0
  6301  09C2  00F1               	movwf	i1___awdiv@divisor+1
  6302  09C3  0879               	movf	DS1307_Write@dat,w
  6303  09C4  00A4               	movwf	??_DS1307_Write+4
  6304  09C5  01A5               	clrf	??_DS1307_Write+5
  6305  09C6  0824               	movf	??_DS1307_Write+4,w
  6306  09C7  00F2               	movwf	i1___awdiv@dividend
  6307  09C8  0825               	movf	??_DS1307_Write+5,w
  6308  09C9  00F3               	movwf	i1___awdiv@dividend+1
  6309  09CA  120A  158A  21FA  120A  158A  	fcall	i1___awdiv
  6310  09CF  0870               	movf	?i1___awdiv,w
  6311  09D0  1283               	bcf	3,5	;RP0=0, select bank0
  6312  09D1  1303               	bcf	3,6	;RP1=0, select bank0
  6313  09D2  00A6               	movwf	??_DS1307_Write+6
  6314  09D3  3003               	movlw	3
  6315  09D4                     u346_25:	
  6316  09D4  1003               	clrc
  6317  09D5  0DA6               	rlf	??_DS1307_Write+6,f
  6318  09D6  3EFF               	addlw	-1
  6319  09D7  1D03               	skipz
  6320  09D8  29D4               	goto	u346_25
  6321  09D9  1003               	clrc
  6322  09DA  0D26               	rlf	??_DS1307_Write+6,w
  6323  09DB  0422               	iorwf	??_DS1307_Write+2,w
  6324  09DC  00A7               	movwf	??_DS1307_Write+7
  6325  09DD  0827               	movf	??_DS1307_Write+7,w
  6326  09DE  00FB               	movwf	DS1307_Write@tmp
  6327                           
  6328                           ;i2c.c: 63: i2c_Start();
  6329  09DF  160A  118A  254C  120A  158A  	fcall	i1_i2c_Start
  6330                           
  6331                           ;i2c.c: 64: i2c_Write(0xD0);
  6332  09E4  30D0               	movlw	208
  6333  09E5  160A  118A  2586  120A  158A  	fcall	i1_i2c_Write
  6334                           
  6335                           ;i2c.c: 65: i2c_Write(add);
  6336  09EA  087A               	movf	DS1307_Write@add,w
  6337  09EB  160A  118A  2586  120A  158A  	fcall	i1_i2c_Write
  6338                           
  6339                           ;i2c.c: 66: i2c_Write(tmp);
  6340  09F0  087B               	movf	DS1307_Write@tmp,w
  6341  09F1  160A  118A  2586  120A  158A  	fcall	i1_i2c_Write
  6342                           
  6343                           ;i2c.c: 67: i2c_Stop();
  6344  09F6  160A  118A  2554   	fcall	i1_i2c_Stop
  6345  09F9  0008               	return
  6346  09FA                     __end_of_DS1307_Write:	
  6347                           
  6348                           	psect	text32
  6349  17B5                     __ptext32:	
  6350 ;; *************** function i1___awmod *****************
  6351 ;; Defined at:
  6352 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\awmod.c"
  6353 ;; Parameters:    Size  Location     Type
  6354 ;;  divisor         2    0[COMMON] int 
  6355 ;;  dividend        2    2[COMMON] int 
  6356 ;; Auto vars:     Size  Location     Type
  6357 ;;  __awmod         1    6[COMMON] unsigned char 
  6358 ;;  __awmod         1    5[COMMON] unsigned char 
  6359 ;; Return value:  Size  Location     Type
  6360 ;;                  2    0[COMMON] int 
  6361 ;; Registers used:
  6362 ;;		wreg, status,2, status,0
  6363 ;; Tracked objects:
  6364 ;;		On entry : 0/0
  6365 ;;		On exit  : 0/0
  6366 ;;		Unchanged: 0/0
  6367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6368 ;;      Params:         4       0       0       0       0
  6369 ;;      Locals:         2       0       0       0       0
  6370 ;;      Temps:          1       0       0       0       0
  6371 ;;      Totals:         7       0       0       0       0
  6372 ;;Total ram usage:        7 bytes
  6373 ;; Hardware stack levels used:    1
  6374 ;; This function calls:
  6375 ;;		Nothing
  6376 ;; This function is called by:
  6377 ;;		_DS1307_Write
  6378 ;; This function uses a non-reentrant model
  6379 ;;
  6380                           
  6381                           
  6382                           ;psect for function i1___awmod
  6383  17B5                     i1___awmod:	
  6384                           
  6385                           ;incstack = 0
  6386                           ; Regs used in i1___awmod: [wreg+status,2+status,0]
  6387  17B5  01F6               	clrf	i1___awmod@sign
  6388  17B6  1FF3               	btfss	i1___awmod@dividend+1,7
  6389  17B7  2FBF               	goto	i1l2712
  6390  17B8  09F2               	comf	i1___awmod@dividend,f
  6391  17B9  09F3               	comf	i1___awmod@dividend+1,f
  6392  17BA  0AF2               	incf	i1___awmod@dividend,f
  6393  17BB  1903               	skipnz
  6394  17BC  0AF3               	incf	i1___awmod@dividend+1,f
  6395  17BD  01F6               	clrf	i1___awmod@sign
  6396  17BE  0AF6               	incf	i1___awmod@sign,f
  6397  17BF                     i1l2712:	
  6398  17BF  1FF1               	btfss	i1___awmod@divisor+1,7
  6399  17C0  2FC6               	goto	i1l2716
  6400  17C1  09F0               	comf	i1___awmod@divisor,f
  6401  17C2  09F1               	comf	i1___awmod@divisor+1,f
  6402  17C3  0AF0               	incf	i1___awmod@divisor,f
  6403  17C4  1903               	skipnz
  6404  17C5  0AF1               	incf	i1___awmod@divisor+1,f
  6405  17C6                     i1l2716:	
  6406  17C6  0870               	movf	i1___awmod@divisor,w
  6407  17C7  0471               	iorwf	i1___awmod@divisor+1,w
  6408  17C8  1903               	btfsc	3,2
  6409  17C9  2FF3               	goto	i1l2734
  6410  17CA  01F5               	clrf	i1___awmod@counter
  6411  17CB  0AF5               	incf	i1___awmod@counter,f
  6412  17CC                     i1l2724:	
  6413  17CC  1BF1               	btfsc	i1___awmod@divisor+1,7
  6414  17CD  2FDA               	goto	i1l2726
  6415  17CE  3001               	movlw	1
  6416  17CF                     u321_25:	
  6417  17CF  1003               	clrc
  6418  17D0  0DF0               	rlf	i1___awmod@divisor,f
  6419  17D1  0DF1               	rlf	i1___awmod@divisor+1,f
  6420  17D2  3EFF               	addlw	-1
  6421  17D3  1D03               	skipz
  6422  17D4  2FCF               	goto	u321_25
  6423  17D5  3001               	movlw	1
  6424  17D6  00F4               	movwf	??i1___awmod
  6425  17D7  0874               	movf	??i1___awmod,w
  6426  17D8  07F5               	addwf	i1___awmod@counter,f
  6427  17D9  2FCC               	goto	i1l2724
  6428  17DA                     i1l2726:	
  6429  17DA  0871               	movf	i1___awmod@divisor+1,w
  6430  17DB  0273               	subwf	i1___awmod@dividend+1,w
  6431  17DC  1D03               	skipz
  6432  17DD  2FE0               	goto	u323_25
  6433  17DE  0870               	movf	i1___awmod@divisor,w
  6434  17DF  0272               	subwf	i1___awmod@dividend,w
  6435  17E0                     u323_25:	
  6436  17E0  1C03               	skipc
  6437  17E1  2FE8               	goto	i1l2730
  6438  17E2  0870               	movf	i1___awmod@divisor,w
  6439  17E3  02F2               	subwf	i1___awmod@dividend,f
  6440  17E4  0871               	movf	i1___awmod@divisor+1,w
  6441  17E5  1C03               	skipc
  6442  17E6  03F3               	decf	i1___awmod@dividend+1,f
  6443  17E7  02F3               	subwf	i1___awmod@dividend+1,f
  6444  17E8                     i1l2730:	
  6445  17E8  3001               	movlw	1
  6446  17E9                     u324_25:	
  6447  17E9  1003               	clrc
  6448  17EA  0CF1               	rrf	i1___awmod@divisor+1,f
  6449  17EB  0CF0               	rrf	i1___awmod@divisor,f
  6450  17EC  3EFF               	addlw	-1
  6451  17ED  1D03               	skipz
  6452  17EE  2FE9               	goto	u324_25
  6453  17EF  3001               	movlw	1
  6454  17F0  02F5               	subwf	i1___awmod@counter,f
  6455  17F1  1D03               	btfss	3,2
  6456  17F2  2FDA               	goto	i1l2726
  6457  17F3                     i1l2734:	
  6458  17F3  0876               	movf	i1___awmod@sign,w
  6459  17F4  1903               	btfsc	3,2
  6460  17F5  2FFB               	goto	i1l2738
  6461  17F6  09F2               	comf	i1___awmod@dividend,f
  6462  17F7  09F3               	comf	i1___awmod@dividend+1,f
  6463  17F8  0AF2               	incf	i1___awmod@dividend,f
  6464  17F9  1903               	skipnz
  6465  17FA  0AF3               	incf	i1___awmod@dividend+1,f
  6466  17FB                     i1l2738:	
  6467  17FB  0873               	movf	i1___awmod@dividend+1,w
  6468  17FC  00F1               	movwf	?i1___awmod+1
  6469  17FD  0872               	movf	i1___awmod@dividend,w
  6470  17FE  00F0               	movwf	?i1___awmod
  6471  17FF  0008               	return
  6472  1800                     __end_ofi1___awmod:	
  6473                           
  6474                           	psect	text33
  6475  09FA                     __ptext33:	
  6476 ;; *************** function i1___awdiv *****************
  6477 ;; Defined at:
  6478 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\awdiv.c"
  6479 ;; Parameters:    Size  Location     Type
  6480 ;;  divisor         2    0[COMMON] int 
  6481 ;;  dividend        2    2[COMMON] int 
  6482 ;; Auto vars:     Size  Location     Type
  6483 ;;  __awdiv         2    7[COMMON] int 
  6484 ;;  __awdiv         1    6[COMMON] unsigned char 
  6485 ;;  __awdiv         1    5[COMMON] unsigned char 
  6486 ;; Return value:  Size  Location     Type
  6487 ;;                  2    0[COMMON] int 
  6488 ;; Registers used:
  6489 ;;		wreg, status,2, status,0
  6490 ;; Tracked objects:
  6491 ;;		On entry : 0/0
  6492 ;;		On exit  : 0/0
  6493 ;;		Unchanged: 0/0
  6494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6495 ;;      Params:         4       0       0       0       0
  6496 ;;      Locals:         4       0       0       0       0
  6497 ;;      Temps:          1       0       0       0       0
  6498 ;;      Totals:         9       0       0       0       0
  6499 ;;Total ram usage:        9 bytes
  6500 ;; Hardware stack levels used:    1
  6501 ;; This function calls:
  6502 ;;		Nothing
  6503 ;; This function is called by:
  6504 ;;		_DS1307_Write
  6505 ;; This function uses a non-reentrant model
  6506 ;;
  6507                           
  6508                           
  6509                           ;psect for function i1___awdiv
  6510  09FA                     i1___awdiv:	
  6511                           
  6512                           ;incstack = 0
  6513                           ; Regs used in i1___awdiv: [wreg+status,2+status,0]
  6514  09FA  01F6               	clrf	i1___awdiv@sign
  6515  09FB  1FF1               	btfss	i1___awdiv@divisor+1,7
  6516  09FC  2A04               	goto	i1l2668
  6517  09FD  09F0               	comf	i1___awdiv@divisor,f
  6518  09FE  09F1               	comf	i1___awdiv@divisor+1,f
  6519  09FF  0AF0               	incf	i1___awdiv@divisor,f
  6520  0A00  1903               	skipnz
  6521  0A01  0AF1               	incf	i1___awdiv@divisor+1,f
  6522  0A02  01F6               	clrf	i1___awdiv@sign
  6523  0A03  0AF6               	incf	i1___awdiv@sign,f
  6524  0A04                     i1l2668:	
  6525  0A04  1FF3               	btfss	i1___awdiv@dividend+1,7
  6526  0A05  2A0F               	goto	i1l2674
  6527  0A06  09F2               	comf	i1___awdiv@dividend,f
  6528  0A07  09F3               	comf	i1___awdiv@dividend+1,f
  6529  0A08  0AF2               	incf	i1___awdiv@dividend,f
  6530  0A09  1903               	skipnz
  6531  0A0A  0AF3               	incf	i1___awdiv@dividend+1,f
  6532  0A0B  3001               	movlw	1
  6533  0A0C  00F4               	movwf	??i1___awdiv
  6534  0A0D  0874               	movf	??i1___awdiv,w
  6535  0A0E  06F6               	xorwf	i1___awdiv@sign,f
  6536  0A0F                     i1l2674:	
  6537  0A0F  01F7               	clrf	i1___awdiv@quotient
  6538  0A10  01F8               	clrf	i1___awdiv@quotient+1
  6539  0A11  0870               	movf	i1___awdiv@divisor,w
  6540  0A12  0471               	iorwf	i1___awdiv@divisor+1,w
  6541  0A13  1903               	btfsc	3,2
  6542  0A14  2A46               	goto	i1l2696
  6543  0A15  01F5               	clrf	i1___awdiv@counter
  6544  0A16  0AF5               	incf	i1___awdiv@counter,f
  6545  0A17                     i1l2684:	
  6546  0A17  1BF1               	btfsc	i1___awdiv@divisor+1,7
  6547  0A18  2A25               	goto	i1l2686
  6548  0A19  3001               	movlw	1
  6549  0A1A                     u311_25:	
  6550  0A1A  1003               	clrc
  6551  0A1B  0DF0               	rlf	i1___awdiv@divisor,f
  6552  0A1C  0DF1               	rlf	i1___awdiv@divisor+1,f
  6553  0A1D  3EFF               	addlw	-1
  6554  0A1E  1D03               	skipz
  6555  0A1F  2A1A               	goto	u311_25
  6556  0A20  3001               	movlw	1
  6557  0A21  00F4               	movwf	??i1___awdiv
  6558  0A22  0874               	movf	??i1___awdiv,w
  6559  0A23  07F5               	addwf	i1___awdiv@counter,f
  6560  0A24  2A17               	goto	i1l2684
  6561  0A25                     i1l2686:	
  6562  0A25  3001               	movlw	1
  6563  0A26                     u313_25:	
  6564  0A26  1003               	clrc
  6565  0A27  0DF7               	rlf	i1___awdiv@quotient,f
  6566  0A28  0DF8               	rlf	i1___awdiv@quotient+1,f
  6567  0A29  3EFF               	addlw	-1
  6568  0A2A  1D03               	skipz
  6569  0A2B  2A26               	goto	u313_25
  6570  0A2C  0871               	movf	i1___awdiv@divisor+1,w
  6571  0A2D  0273               	subwf	i1___awdiv@dividend+1,w
  6572  0A2E  1D03               	skipz
  6573  0A2F  2A32               	goto	u314_25
  6574  0A30  0870               	movf	i1___awdiv@divisor,w
  6575  0A31  0272               	subwf	i1___awdiv@dividend,w
  6576  0A32                     u314_25:	
  6577  0A32  1C03               	skipc
  6578  0A33  2A3B               	goto	i1l2692
  6579  0A34  0870               	movf	i1___awdiv@divisor,w
  6580  0A35  02F2               	subwf	i1___awdiv@dividend,f
  6581  0A36  0871               	movf	i1___awdiv@divisor+1,w
  6582  0A37  1C03               	skipc
  6583  0A38  03F3               	decf	i1___awdiv@dividend+1,f
  6584  0A39  02F3               	subwf	i1___awdiv@dividend+1,f
  6585  0A3A  1477               	bsf	i1___awdiv@quotient,0
  6586  0A3B                     i1l2692:	
  6587  0A3B  3001               	movlw	1
  6588  0A3C                     u315_25:	
  6589  0A3C  1003               	clrc
  6590  0A3D  0CF1               	rrf	i1___awdiv@divisor+1,f
  6591  0A3E  0CF0               	rrf	i1___awdiv@divisor,f
  6592  0A3F  3EFF               	addlw	-1
  6593  0A40  1D03               	skipz
  6594  0A41  2A3C               	goto	u315_25
  6595  0A42  3001               	movlw	1
  6596  0A43  02F5               	subwf	i1___awdiv@counter,f
  6597  0A44  1D03               	btfss	3,2
  6598  0A45  2A25               	goto	i1l2686
  6599  0A46                     i1l2696:	
  6600  0A46  0876               	movf	i1___awdiv@sign,w
  6601  0A47  1903               	btfsc	3,2
  6602  0A48  2A4E               	goto	i1l2700
  6603  0A49  09F7               	comf	i1___awdiv@quotient,f
  6604  0A4A  09F8               	comf	i1___awdiv@quotient+1,f
  6605  0A4B  0AF7               	incf	i1___awdiv@quotient,f
  6606  0A4C  1903               	skipnz
  6607  0A4D  0AF8               	incf	i1___awdiv@quotient+1,f
  6608  0A4E                     i1l2700:	
  6609  0A4E  0878               	movf	i1___awdiv@quotient+1,w
  6610  0A4F  00F1               	movwf	?i1___awdiv+1
  6611  0A50  0877               	movf	i1___awdiv@quotient,w
  6612  0A51  00F0               	movwf	?i1___awdiv
  6613  0A52  0008               	return
  6614  0A53                     __end_ofi1___awdiv:	
  6615                           
  6616                           	psect	text34
  6617  0AB1                     __ptext34:	
  6618 ;; *************** function _Read_Time *****************
  6619 ;; Defined at:
  6620 ;;		line 118 in file "main.c"
  6621 ;; Parameters:    Size  Location     Type
  6622 ;;		None
  6623 ;; Auto vars:     Size  Location     Type
  6624 ;;		None
  6625 ;; Return value:  Size  Location     Type
  6626 ;;		None               void
  6627 ;; Registers used:
  6628 ;;		wreg, status,2, status,0, pclath, cstack
  6629 ;; Tracked objects:
  6630 ;;		On entry : 0/0
  6631 ;;		On exit  : 0/0
  6632 ;;		Unchanged: 0/0
  6633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6634 ;;      Params:         0       0       0       0       0
  6635 ;;      Locals:         0       0       0       0       0
  6636 ;;      Temps:          1       0       0       0       0
  6637 ;;      Totals:         1       0       0       0       0
  6638 ;;Total ram usage:        1 bytes
  6639 ;; Hardware stack levels used:    1
  6640 ;; Hardware stack levels required when called:    2
  6641 ;; This function calls:
  6642 ;;		i1_DS1307_Read
  6643 ;; This function is called by:
  6644 ;;		_ISR
  6645 ;; This function uses a non-reentrant model
  6646 ;;
  6647                           
  6648                           
  6649                           ;psect for function _Read_Time
  6650  0AB1                     _Read_Time:	
  6651                           
  6652                           ;main.c: 119: second = DS1307_Read(0x00);
  6653                           
  6654                           ;incstack = 0
  6655                           ; Regs used in _Read_Time: [wreg+status,2+status,0+pclath+cstack]
  6656  0AB1  3000               	movlw	0
  6657  0AB2  160A  118A  276D  120A  158A  	fcall	i1_DS1307_Read
  6658  0AB7  00FB               	movwf	??_Read_Time
  6659  0AB8  087B               	movf	??_Read_Time,w
  6660  0AB9  1683               	bsf	3,5	;RP0=1, select bank1
  6661  0ABA  1303               	bcf	3,6	;RP1=0, select bank1
  6662  0ABB  00BA               	movwf	_second^(0+128)
  6663                           
  6664                           ;main.c: 120: if (second == 0) minute = DS1307_Read(0x01);
  6665  0ABC  083A               	movf	_second^(0+128),w
  6666  0ABD  1D03               	btfss	3,2
  6667  0ABE  2ACA               	goto	i1l3130
  6668  0ABF  3001               	movlw	1
  6669  0AC0  160A  118A  276D  120A  158A  	fcall	i1_DS1307_Read
  6670  0AC5  00FB               	movwf	??_Read_Time
  6671  0AC6  087B               	movf	??_Read_Time,w
  6672  0AC7  1683               	bsf	3,5	;RP0=1, select bank1
  6673  0AC8  1303               	bcf	3,6	;RP1=0, select bank1
  6674  0AC9  00B7               	movwf	_minute^(0+128)
  6675  0ACA                     i1l3130:	
  6676                           
  6677                           ;main.c: 121: if (minute == 0) hour = DS1307_Read(0x02);
  6678  0ACA  0837               	movf	_minute^(0+128),w
  6679  0ACB  1D03               	btfss	3,2
  6680  0ACC  2AD8               	goto	i1l3134
  6681  0ACD  3002               	movlw	2
  6682  0ACE  160A  118A  276D  120A  158A  	fcall	i1_DS1307_Read
  6683  0AD3  00FB               	movwf	??_Read_Time
  6684  0AD4  087B               	movf	??_Read_Time,w
  6685  0AD5  1683               	bsf	3,5	;RP0=1, select bank1
  6686  0AD6  1303               	bcf	3,6	;RP1=0, select bank1
  6687  0AD7  00B4               	movwf	_hour^(0+128)
  6688  0AD8                     i1l3134:	
  6689                           
  6690                           ;main.c: 122: if (hour == 0 || hour == 52) {
  6691  0AD8  0834               	movf	_hour^(0+128),w
  6692  0AD9  1903               	btfsc	3,2
  6693  0ADA  2ADF               	goto	i1l3138
  6694  0ADB  3034               	movlw	52
  6695  0ADC  0634               	xorwf	_hour^(0+128),w
  6696  0ADD  1D03               	btfss	3,2
  6697  0ADE  2AF5               	goto	i1l3140
  6698  0ADF                     i1l3138:	
  6699                           
  6700                           ;main.c: 123: day = DS1307_Read(0x03);
  6701  0ADF  3003               	movlw	3
  6702  0AE0  160A  118A  276D  120A  158A  	fcall	i1_DS1307_Read
  6703  0AE5  00FB               	movwf	??_Read_Time
  6704  0AE6  087B               	movf	??_Read_Time,w
  6705  0AE7  1683               	bsf	3,5	;RP0=1, select bank1
  6706  0AE8  1303               	bcf	3,6	;RP1=0, select bank1
  6707  0AE9  00B3               	movwf	_day^(0+128)
  6708                           
  6709                           ;main.c: 124: date = DS1307_Read(0x04);
  6710  0AEA  3004               	movlw	4
  6711  0AEB  160A  118A  276D  120A  158A  	fcall	i1_DS1307_Read
  6712  0AF0  00FB               	movwf	??_Read_Time
  6713  0AF1  087B               	movf	??_Read_Time,w
  6714  0AF2  1683               	bsf	3,5	;RP0=1, select bank1
  6715  0AF3  1303               	bcf	3,6	;RP1=0, select bank1
  6716  0AF4  00B2               	movwf	_date^(0+128)
  6717  0AF5                     i1l3140:	
  6718                           
  6719                           ;main.c: 125: }
  6720                           ;main.c: 126: if (date == 1) month = DS1307_Read(0x05);
  6721  0AF5  0332               	decf	_date^(0+128),w
  6722  0AF6  1D03               	btfss	3,2
  6723  0AF7  2B03               	goto	i1l3144
  6724  0AF8  3005               	movlw	5
  6725  0AF9  160A  118A  276D  120A  158A  	fcall	i1_DS1307_Read
  6726  0AFE  00FB               	movwf	??_Read_Time
  6727  0AFF  087B               	movf	??_Read_Time,w
  6728  0B00  1683               	bsf	3,5	;RP0=1, select bank1
  6729  0B01  1303               	bcf	3,6	;RP1=0, select bank1
  6730  0B02  00B8               	movwf	_month^(0+128)
  6731  0B03                     i1l3144:	
  6732                           
  6733                           ;main.c: 127: if (month == 1) year = DS1307_Read(0x06);
  6734  0B03  0338               	decf	_month^(0+128),w
  6735  0B04  1D03               	btfss	3,2
  6736  0B05  0008               	return
  6737  0B06  3006               	movlw	6
  6738  0B07  160A  118A  276D   	fcall	i1_DS1307_Read
  6739  0B0A  00FB               	movwf	??_Read_Time
  6740  0B0B  087B               	movf	??_Read_Time,w
  6741  0B0C  1683               	bsf	3,5	;RP0=1, select bank1
  6742  0B0D  1303               	bcf	3,6	;RP1=0, select bank1
  6743  0B0E  00BD               	movwf	_year^(0+128)
  6744  0B0F  0008               	return
  6745  0B10                     __end_of_Read_Time:	
  6746                           
  6747                           	psect	text35
  6748  176D                     __ptext35:	
  6749 ;; *************** function i1_DS1307_Read *****************
  6750 ;; Defined at:
  6751 ;;		line 70 in file "i2c.c"
  6752 ;; Parameters:    Size  Location     Type
  6753 ;;  add             1    wreg     unsigned char 
  6754 ;; Auto vars:     Size  Location     Type
  6755 ;;  add             1    8[COMMON] unsigned char 
  6756 ;;  DS1307_Read     1   10[COMMON] unsigned char 
  6757 ;;  DS1307_Read     1    9[COMMON] unsigned char 
  6758 ;; Return value:  Size  Location     Type
  6759 ;;                  1    wreg      unsigned char 
  6760 ;; Registers used:
  6761 ;;		wreg, status,2, status,0, pclath, cstack
  6762 ;; Tracked objects:
  6763 ;;		On entry : 0/0
  6764 ;;		On exit  : 0/0
  6765 ;;		Unchanged: 0/0
  6766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6767 ;;      Params:         0       0       0       0       0
  6768 ;;      Locals:         3       0       0       0       0
  6769 ;;      Temps:          4       0       0       0       0
  6770 ;;      Totals:         7       0       0       0       0
  6771 ;;Total ram usage:        7 bytes
  6772 ;; Hardware stack levels used:    1
  6773 ;; Hardware stack levels required when called:    1
  6774 ;; This function calls:
  6775 ;;		i1___bmul
  6776 ;;		i1_i2c_Nack
  6777 ;;		i1_i2c_Read
  6778 ;;		i1_i2c_Restart
  6779 ;;		i1_i2c_Start
  6780 ;;		i1_i2c_Stop
  6781 ;;		i1_i2c_Write
  6782 ;; This function is called by:
  6783 ;;		_Read_Time
  6784 ;;		i1_Read_FullTime
  6785 ;; This function uses a non-reentrant model
  6786 ;;
  6787                           
  6788                           
  6789                           ;psect for function i1_DS1307_Read
  6790  176D                     i1_DS1307_Read:	
  6791                           
  6792                           ;incstack = 0
  6793                           ; Regs used in i1_DS1307_Read: [wreg+status,2+status,0+pclath+cstack]
  6794                           ;i1DS1307_Read@add stored from wreg
  6795  176D  00F8               	movwf	i1DS1307_Read@add
  6796                           
  6797                           ;i2c.c: 71: unsigned char data;
  6798                           ;i2c.c: 72: i2c_Start();
  6799  176E  160A  118A  254C  160A  118A  	fcall	i1_i2c_Start
  6800                           
  6801                           ;i2c.c: 73: i2c_Write(0xD0);
  6802  1773  30D0               	movlw	208
  6803  1774  160A  118A  2586  160A  118A  	fcall	i1_i2c_Write
  6804                           
  6805                           ;i2c.c: 74: i2c_Write(add);
  6806  1779  0878               	movf	i1DS1307_Read@add,w
  6807  177A  160A  118A  2586  160A  118A  	fcall	i1_i2c_Write
  6808                           
  6809                           ;i2c.c: 76: i2c_Restart();
  6810  177F  160A  118A  2544  160A  118A  	fcall	i1_i2c_Restart
  6811                           
  6812                           ;i2c.c: 77: i2c_Write(0xD1);
  6813  1784  30D1               	movlw	209
  6814  1785  160A  118A  2586  160A  118A  	fcall	i1_i2c_Write
  6815                           
  6816                           ;i2c.c: 78: data = i2c_Read();
  6817  178A  160A  118A  257D  160A  118A  	fcall	i1_i2c_Read
  6818  178F  00F4               	movwf	??i1_DS1307_Read
  6819  1790  0874               	movf	??i1_DS1307_Read,w
  6820  1791  00FA               	movwf	i1DS1307_Read@data
  6821                           
  6822                           ;i2c.c: 79: i2c_Nack();
  6823  1792  160A  118A  2574  160A  118A  	fcall	i1_i2c_Nack
  6824                           
  6825                           ;i2c.c: 80: i2c_Stop();
  6826  1797  160A  118A  2554  160A  118A  	fcall	i1_i2c_Stop
  6827                           
  6828                           ;i2c.c: 81: unsigned char temp = (data >> 4) * 10 + (data & 0x0f);
  6829  179C  300F               	movlw	15
  6830  179D  057A               	andwf	i1DS1307_Read@data,w
  6831  179E  00F4               	movwf	??i1_DS1307_Read
  6832  179F  300A               	movlw	10
  6833  17A0  00F5               	movwf	??i1_DS1307_Read+1
  6834  17A1  0875               	movf	??i1_DS1307_Read+1,w
  6835  17A2  00F0               	movwf	i1___bmul@multiplicand
  6836  17A3  087A               	movf	i1DS1307_Read@data,w
  6837  17A4  00F6               	movwf	??i1_DS1307_Read+2
  6838  17A5  3004               	movlw	4
  6839  17A6                     u391_25:	
  6840  17A6  1003               	clrc
  6841  17A7  0CF6               	rrf	??i1_DS1307_Read+2,f
  6842  17A8  3EFF               	addlw	-1
  6843  17A9  1D03               	skipz
  6844  17AA  2FA6               	goto	u391_25
  6845  17AB  0876               	movf	??i1_DS1307_Read+2,w
  6846  17AC  160A  118A  25AC   	fcall	i1___bmul
  6847  17AF  0774               	addwf	??i1_DS1307_Read,w
  6848  17B0  00F7               	movwf	??i1_DS1307_Read+3
  6849  17B1  0877               	movf	??i1_DS1307_Read+3,w
  6850  17B2  00F9               	movwf	i1DS1307_Read@temp
  6851                           
  6852                           ;i2c.c: 82: return temp;
  6853  17B3  0879               	movf	i1DS1307_Read@temp,w
  6854  17B4  0008               	return
  6855  17B5                     __end_ofi1_DS1307_Read:	
  6856                           
  6857                           	psect	text36
  6858  1586                     __ptext36:	
  6859 ;; *************** function i1_i2c_Write *****************
  6860 ;; Defined at:
  6861 ;;		line 43 in file "i2c.c"
  6862 ;; Parameters:    Size  Location     Type
  6863 ;;  data            1    wreg     unsigned char 
  6864 ;; Auto vars:     Size  Location     Type
  6865 ;;  data            1    0[COMMON] unsigned char 
  6866 ;; Return value:  Size  Location     Type
  6867 ;;		None               void
  6868 ;; Registers used:
  6869 ;;		wreg
  6870 ;; Tracked objects:
  6871 ;;		On entry : 0/0
  6872 ;;		On exit  : 0/0
  6873 ;;		Unchanged: 0/0
  6874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6875 ;;      Params:         0       0       0       0       0
  6876 ;;      Locals:         1       0       0       0       0
  6877 ;;      Temps:          0       0       0       0       0
  6878 ;;      Totals:         1       0       0       0       0
  6879 ;;Total ram usage:        1 bytes
  6880 ;; Hardware stack levels used:    1
  6881 ;; This function calls:
  6882 ;;		Nothing
  6883 ;; This function is called by:
  6884 ;;		_DS1307_Write
  6885 ;;		i1_DS1307_Read
  6886 ;; This function uses a non-reentrant model
  6887 ;;
  6888                           
  6889                           
  6890                           ;psect for function i1_i2c_Write
  6891  1586                     i1_i2c_Write:	
  6892                           
  6893                           ;incstack = 0
  6894                           ; Regs used in i1_i2c_Write: [wreg]
  6895                           ;i1i2c_Write@data stored from wreg
  6896  1586  00F0               	movwf	i1i2c_Write@data
  6897                           
  6898                           ;i2c.c: 44: SSPBUF = data;
  6899  1587  0870               	movf	i1i2c_Write@data,w
  6900  1588  1283               	bcf	3,5	;RP0=0, select bank0
  6901  1589  1303               	bcf	3,6	;RP1=0, select bank0
  6902  158A  0093               	movwf	19	;volatile
  6903  158B                     i1l533:	
  6904                           ;i2c.c: 45: while(SSPIF == 0);
  6905                           
  6906  158B  1D8C               	btfss	12,3	;volatile
  6907  158C  2D8B               	goto	i1l533
  6908                           
  6909                           ;i2c.c: 46: SSPIF = 0;
  6910  158D  118C               	bcf	12,3	;volatile
  6911  158E  0008               	return
  6912  158F                     __end_ofi1_i2c_Write:	
  6913                           
  6914                           	psect	text37
  6915  1554                     __ptext37:	
  6916 ;; *************** function i1_i2c_Stop *****************
  6917 ;; Defined at:
  6918 ;;		line 23 in file "i2c.c"
  6919 ;; Parameters:    Size  Location     Type
  6920 ;;		None
  6921 ;; Auto vars:     Size  Location     Type
  6922 ;;		None
  6923 ;; Return value:  Size  Location     Type
  6924 ;;		None               void
  6925 ;; Registers used:
  6926 ;;		None
  6927 ;; Tracked objects:
  6928 ;;		On entry : 0/0
  6929 ;;		On exit  : 0/0
  6930 ;;		Unchanged: 0/0
  6931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6932 ;;      Params:         0       0       0       0       0
  6933 ;;      Locals:         0       0       0       0       0
  6934 ;;      Temps:          0       0       0       0       0
  6935 ;;      Totals:         0       0       0       0       0
  6936 ;;Total ram usage:        0 bytes
  6937 ;; Hardware stack levels used:    1
  6938 ;; This function calls:
  6939 ;;		Nothing
  6940 ;; This function is called by:
  6941 ;;		_DS1307_Write
  6942 ;;		i1_DS1307_Read
  6943 ;; This function uses a non-reentrant model
  6944 ;;
  6945                           
  6946                           
  6947                           ;psect for function i1_i2c_Stop
  6948  1554                     i1_i2c_Stop:	
  6949                           
  6950                           ;i2c.c: 24: PEN = 1;
  6951                           
  6952                           ;incstack = 0
  6953                           ; Regs used in i1_i2c_Stop: []
  6954  1554  1683               	bsf	3,5	;RP0=1, select bank1
  6955  1555  1303               	bcf	3,6	;RP1=0, select bank1
  6956  1556  1511               	bsf	17,2	;volatile
  6957  1557                     i1l515:	
  6958                           ;i2c.c: 25: while(SSPIF == 0);
  6959                           
  6960  1557  1283               	bcf	3,5	;RP0=0, select bank0
  6961  1558  1D8C               	btfss	12,3	;volatile
  6962  1559  2D57               	goto	i1l515
  6963                           
  6964                           ;i2c.c: 26: SSPIF = 0;
  6965  155A  118C               	bcf	12,3	;volatile
  6966  155B  0008               	return
  6967  155C                     __end_ofi1_i2c_Stop:	
  6968                           
  6969                           	psect	text38
  6970  154C                     __ptext38:	
  6971 ;; *************** function i1_i2c_Start *****************
  6972 ;; Defined at:
  6973 ;;		line 11 in file "i2c.c"
  6974 ;; Parameters:    Size  Location     Type
  6975 ;;		None
  6976 ;; Auto vars:     Size  Location     Type
  6977 ;;		None
  6978 ;; Return value:  Size  Location     Type
  6979 ;;		None               void
  6980 ;; Registers used:
  6981 ;;		None
  6982 ;; Tracked objects:
  6983 ;;		On entry : 0/0
  6984 ;;		On exit  : 0/0
  6985 ;;		Unchanged: 0/0
  6986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6987 ;;      Params:         0       0       0       0       0
  6988 ;;      Locals:         0       0       0       0       0
  6989 ;;      Temps:          0       0       0       0       0
  6990 ;;      Totals:         0       0       0       0       0
  6991 ;;Total ram usage:        0 bytes
  6992 ;; Hardware stack levels used:    1
  6993 ;; This function calls:
  6994 ;;		Nothing
  6995 ;; This function is called by:
  6996 ;;		_DS1307_Write
  6997 ;;		i1_DS1307_Read
  6998 ;; This function uses a non-reentrant model
  6999 ;;
  7000                           
  7001                           
  7002                           ;psect for function i1_i2c_Start
  7003  154C                     i1_i2c_Start:	
  7004                           
  7005                           ;i2c.c: 12: SEN = 1;
  7006                           
  7007                           ;incstack = 0
  7008                           ; Regs used in i1_i2c_Start: []
  7009  154C  1683               	bsf	3,5	;RP0=1, select bank1
  7010  154D  1303               	bcf	3,6	;RP1=0, select bank1
  7011  154E  1411               	bsf	17,0	;volatile
  7012  154F                     i1l503:	
  7013                           ;i2c.c: 13: while(SSPIF == 0);
  7014                           
  7015  154F  1283               	bcf	3,5	;RP0=0, select bank0
  7016  1550  1D8C               	btfss	12,3	;volatile
  7017  1551  2D4F               	goto	i1l503
  7018                           
  7019                           ;i2c.c: 14: SSPIF = 0;
  7020  1552  118C               	bcf	12,3	;volatile
  7021  1553  0008               	return
  7022  1554                     __end_ofi1_i2c_Start:	
  7023                           
  7024                           	psect	text39
  7025  1544                     __ptext39:	
  7026 ;; *************** function i1_i2c_Restart *****************
  7027 ;; Defined at:
  7028 ;;		line 17 in file "i2c.c"
  7029 ;; Parameters:    Size  Location     Type
  7030 ;;		None
  7031 ;; Auto vars:     Size  Location     Type
  7032 ;;		None
  7033 ;; Return value:  Size  Location     Type
  7034 ;;		None               void
  7035 ;; Registers used:
  7036 ;;		None
  7037 ;; Tracked objects:
  7038 ;;		On entry : 0/0
  7039 ;;		On exit  : 0/0
  7040 ;;		Unchanged: 0/0
  7041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7042 ;;      Params:         0       0       0       0       0
  7043 ;;      Locals:         0       0       0       0       0
  7044 ;;      Temps:          0       0       0       0       0
  7045 ;;      Totals:         0       0       0       0       0
  7046 ;;Total ram usage:        0 bytes
  7047 ;; Hardware stack levels used:    1
  7048 ;; This function calls:
  7049 ;;		Nothing
  7050 ;; This function is called by:
  7051 ;;		i1_DS1307_Read
  7052 ;; This function uses a non-reentrant model
  7053 ;;
  7054                           
  7055                           
  7056                           ;psect for function i1_i2c_Restart
  7057  1544                     i1_i2c_Restart:	
  7058                           
  7059                           ;i2c.c: 18: RSEN = 1;
  7060                           
  7061                           ;incstack = 0
  7062                           ; Regs used in i1_i2c_Restart: []
  7063  1544  1683               	bsf	3,5	;RP0=1, select bank1
  7064  1545  1303               	bcf	3,6	;RP1=0, select bank1
  7065  1546  1491               	bsf	17,1	;volatile
  7066  1547                     i1l509:	
  7067                           ;i2c.c: 19: while(SSPIF == 0);
  7068                           
  7069  1547  1283               	bcf	3,5	;RP0=0, select bank0
  7070  1548  1D8C               	btfss	12,3	;volatile
  7071  1549  2D47               	goto	i1l509
  7072                           
  7073                           ;i2c.c: 20: SSPIF = 0;
  7074  154A  118C               	bcf	12,3	;volatile
  7075  154B  0008               	return
  7076  154C                     __end_ofi1_i2c_Restart:	
  7077                           
  7078                           	psect	text40
  7079  157D                     __ptext40:	
  7080 ;; *************** function i1_i2c_Read *****************
  7081 ;; Defined at:
  7082 ;;		line 49 in file "i2c.c"
  7083 ;; Parameters:    Size  Location     Type
  7084 ;;		None
  7085 ;; Auto vars:     Size  Location     Type
  7086 ;;		None
  7087 ;; Return value:  Size  Location     Type
  7088 ;;                  1    wreg      unsigned char 
  7089 ;; Registers used:
  7090 ;;		wreg
  7091 ;; Tracked objects:
  7092 ;;		On entry : 0/0
  7093 ;;		On exit  : 0/0
  7094 ;;		Unchanged: 0/0
  7095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7096 ;;      Params:         0       0       0       0       0
  7097 ;;      Locals:         0       0       0       0       0
  7098 ;;      Temps:          0       0       0       0       0
  7099 ;;      Totals:         0       0       0       0       0
  7100 ;;Total ram usage:        0 bytes
  7101 ;; Hardware stack levels used:    1
  7102 ;; This function calls:
  7103 ;;		Nothing
  7104 ;; This function is called by:
  7105 ;;		i1_DS1307_Read
  7106 ;; This function uses a non-reentrant model
  7107 ;;
  7108                           
  7109                           
  7110                           ;psect for function i1_i2c_Read
  7111  157D                     i1_i2c_Read:	
  7112                           
  7113                           ;i2c.c: 50: RCEN = 1;
  7114                           
  7115                           ;incstack = 0
  7116                           ; Regs used in i1_i2c_Read: [wreg]
  7117  157D  1683               	bsf	3,5	;RP0=1, select bank1
  7118  157E  1303               	bcf	3,6	;RP1=0, select bank1
  7119  157F  1591               	bsf	17,3	;volatile
  7120  1580                     i1l539:	
  7121                           ;i2c.c: 51: while(SSPIF == 0);
  7122                           
  7123  1580  1283               	bcf	3,5	;RP0=0, select bank0
  7124  1581  1D8C               	btfss	12,3	;volatile
  7125  1582  2D80               	goto	i1l539
  7126                           
  7127                           ;i2c.c: 52: SSPIF = 0;
  7128  1583  118C               	bcf	12,3	;volatile
  7129                           
  7130                           ;i2c.c: 53: return SSPBUF;
  7131  1584  0813               	movf	19,w	;volatile
  7132  1585  0008               	return
  7133  1586                     __end_ofi1_i2c_Read:	
  7134                           
  7135                           	psect	text41
  7136  1574                     __ptext41:	
  7137 ;; *************** function i1_i2c_Nack *****************
  7138 ;; Defined at:
  7139 ;;		line 36 in file "i2c.c"
  7140 ;; Parameters:    Size  Location     Type
  7141 ;;		None
  7142 ;; Auto vars:     Size  Location     Type
  7143 ;;		None
  7144 ;; Return value:  Size  Location     Type
  7145 ;;		None               void
  7146 ;; Registers used:
  7147 ;;		None
  7148 ;; Tracked objects:
  7149 ;;		On entry : 0/0
  7150 ;;		On exit  : 0/0
  7151 ;;		Unchanged: 0/0
  7152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7153 ;;      Params:         0       0       0       0       0
  7154 ;;      Locals:         0       0       0       0       0
  7155 ;;      Temps:          0       0       0       0       0
  7156 ;;      Totals:         0       0       0       0       0
  7157 ;;Total ram usage:        0 bytes
  7158 ;; Hardware stack levels used:    1
  7159 ;; This function calls:
  7160 ;;		Nothing
  7161 ;; This function is called by:
  7162 ;;		i1_DS1307_Read
  7163 ;; This function uses a non-reentrant model
  7164 ;;
  7165                           
  7166                           
  7167                           ;psect for function i1_i2c_Nack
  7168  1574                     i1_i2c_Nack:	
  7169                           
  7170                           ;i2c.c: 37: ACKDT = 1;
  7171                           
  7172                           ;incstack = 0
  7173                           ; Regs used in i1_i2c_Nack: []
  7174  1574  1683               	bsf	3,5	;RP0=1, select bank1
  7175  1575  1303               	bcf	3,6	;RP1=0, select bank1
  7176  1576  1691               	bsf	17,5	;volatile
  7177                           
  7178                           ;i2c.c: 38: ACKEN = 1;
  7179  1577  1611               	bsf	17,4	;volatile
  7180  1578                     i1l527:	
  7181                           ;i2c.c: 39: while(SSPIF == 0);
  7182                           
  7183  1578  1283               	bcf	3,5	;RP0=0, select bank0
  7184  1579  1D8C               	btfss	12,3	;volatile
  7185  157A  2D78               	goto	i1l527
  7186                           
  7187                           ;i2c.c: 40: SSPIF = 0;
  7188  157B  118C               	bcf	12,3	;volatile
  7189  157C  0008               	return
  7190  157D                     __end_ofi1_i2c_Nack:	
  7191                           
  7192                           	psect	text42
  7193  15AC                     __ptext42:	
  7194 ;; *************** function i1___bmul *****************
  7195 ;; Defined at:
  7196 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\Umul8.c"
  7197 ;; Parameters:    Size  Location     Type
  7198 ;;  multiplier      1    wreg     unsigned char 
  7199 ;;  multiplicand    1    0[COMMON] unsigned char 
  7200 ;; Auto vars:     Size  Location     Type
  7201 ;;  multiplier      1    3[COMMON] unsigned char 
  7202 ;;  __bmul          1    2[COMMON] unsigned char 
  7203 ;; Return value:  Size  Location     Type
  7204 ;;                  1    wreg      unsigned char 
  7205 ;; Registers used:
  7206 ;;		wreg, status,2, status,0
  7207 ;; Tracked objects:
  7208 ;;		On entry : 0/0
  7209 ;;		On exit  : 0/0
  7210 ;;		Unchanged: 0/0
  7211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7212 ;;      Params:         1       0       0       0       0
  7213 ;;      Locals:         2       0       0       0       0
  7214 ;;      Temps:          1       0       0       0       0
  7215 ;;      Totals:         4       0       0       0       0
  7216 ;;Total ram usage:        4 bytes
  7217 ;; Hardware stack levels used:    1
  7218 ;; This function calls:
  7219 ;;		Nothing
  7220 ;; This function is called by:
  7221 ;;		i1_DS1307_Read
  7222 ;; This function uses a non-reentrant model
  7223 ;;
  7224                           
  7225                           
  7226                           ;psect for function i1___bmul
  7227  15AC                     i1___bmul:	
  7228                           
  7229                           ;incstack = 0
  7230                           ; Regs used in i1___bmul: [wreg+status,2+status,0]
  7231                           ;i1___bmul@multiplier stored from wreg
  7232  15AC  00F3               	movwf	i1___bmul@multiplier
  7233  15AD  01F2               	clrf	i1___bmul@product
  7234  15AE                     i1l2648:	
  7235  15AE  1C73               	btfss	i1___bmul@multiplier,0
  7236  15AF  2DB4               	goto	i1l2652
  7237  15B0  0870               	movf	i1___bmul@multiplicand,w
  7238  15B1  00F1               	movwf	??i1___bmul
  7239  15B2  0871               	movf	??i1___bmul,w
  7240  15B3  07F2               	addwf	i1___bmul@product,f
  7241  15B4                     i1l2652:	
  7242  15B4  1003               	clrc
  7243  15B5  0DF0               	rlf	i1___bmul@multiplicand,f
  7244  15B6  1003               	clrc
  7245  15B7  0CF3               	rrf	i1___bmul@multiplier,f
  7246  15B8  0873               	movf	i1___bmul@multiplier,w
  7247  15B9  1D03               	btfss	3,2
  7248  15BA  2DAE               	goto	i1l2648
  7249  15BB  0872               	movf	i1___bmul@product,w
  7250  15BC  0008               	return
  7251  15BD                     __end_ofi1___bmul:	
  7252                           
  7253                           	psect	text43
  7254  0B7C                     __ptext43:	
  7255 ;; *************** function _Read_Tem *****************
  7256 ;; Defined at:
  7257 ;;		line 130 in file "main.c"
  7258 ;; Parameters:    Size  Location     Type
  7259 ;;		None
  7260 ;; Auto vars:     Size  Location     Type
  7261 ;;		None
  7262 ;; Return value:  Size  Location     Type
  7263 ;;		None               void
  7264 ;; Registers used:
  7265 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7266 ;; Tracked objects:
  7267 ;;		On entry : 0/0
  7268 ;;		On exit  : 0/0
  7269 ;;		Unchanged: 0/0
  7270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7271 ;;      Params:         0       0       0       0       0
  7272 ;;      Locals:         0       0       0       0       0
  7273 ;;      Temps:          0       4       0       0       0
  7274 ;;      Totals:         0       4       0       0       0
  7275 ;;Total ram usage:        4 bytes
  7276 ;; Hardware stack levels used:    1
  7277 ;; Hardware stack levels required when called:    2
  7278 ;; This function calls:
  7279 ;;		___awtoft
  7280 ;;		___ftdiv
  7281 ;;		___ftmul
  7282 ;;		___fttol
  7283 ;; This function is called by:
  7284 ;;		_ISR
  7285 ;; This function uses a non-reentrant model
  7286 ;;
  7287                           
  7288                           
  7289                           ;psect for function _Read_Tem
  7290  0B7C                     _Read_Tem:	
  7291                           
  7292                           ;main.c: 131: ADCON0bits.GO_nDONE = 1;
  7293                           
  7294                           ;incstack = 0
  7295                           ; Regs used in _Read_Tem: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7296  0B7C  1283               	bcf	3,5	;RP0=0, select bank0
  7297  0B7D  1303               	bcf	3,6	;RP1=0, select bank0
  7298  0B7E  149F               	bsf	31,1	;volatile
  7299  0B7F                     i1l189:	
  7300                           ;main.c: 132: while (ADCON0bits.GO_nDONE);
  7301                           
  7302  0B7F  189F               	btfsc	31,1	;volatile
  7303  0B80  2B7F               	goto	i1l189
  7304                           
  7305                           ;main.c: 133: ADCvalue = (ADRESH << 8) | ADRESL;
  7306  0B81  1683               	bsf	3,5	;RP0=1, select bank1
  7307  0B82  1303               	bcf	3,6	;RP1=0, select bank1
  7308  0B83  081E               	movf	30,w	;volatile
  7309  0B84  1283               	bcf	3,5	;RP0=0, select bank0
  7310  0B85  1303               	bcf	3,6	;RP1=0, select bank0
  7311  0B86  00C8               	movwf	??_Read_Tem
  7312  0B87  01C9               	clrf	??_Read_Tem+1
  7313  0B88  081E               	movf	30,w	;volatile
  7314  0B89  00CA               	movwf	??_Read_Tem+2
  7315  0B8A  01CB               	clrf	??_Read_Tem+3
  7316  0B8B  084A               	movf	??_Read_Tem+2,w
  7317  0B8C  00CB               	movwf	??_Read_Tem+3
  7318  0B8D  01CA               	clrf	??_Read_Tem+2
  7319  0B8E  0848               	movf	??_Read_Tem,w
  7320  0B8F  044A               	iorwf	??_Read_Tem+2,w
  7321  0B90  00F8               	movwf	___awtoft@c
  7322  0B91  0849               	movf	??_Read_Tem+1,w
  7323  0B92  044B               	iorwf	??_Read_Tem+3,w
  7324  0B93  00F9               	movwf	___awtoft@c+1
  7325  0B94  160A  118A  25FA  120A  158A  	fcall	___awtoft
  7326  0B99  0878               	movf	?___awtoft,w
  7327  0B9A  1283               	bcf	3,5	;RP0=0, select bank0
  7328  0B9B  1303               	bcf	3,6	;RP1=0, select bank0
  7329  0B9C  00D1               	movwf	_ADCvalue
  7330  0B9D  0879               	movf	?___awtoft+1,w
  7331  0B9E  00D2               	movwf	_ADCvalue+1
  7332  0B9F  087A               	movf	?___awtoft+2,w
  7333  0BA0  00D3               	movwf	_ADCvalue+2
  7334                           
  7335                           ;main.c: 134: voltage = ADCvalue * 5000.0f / 1023;
  7336  0BA1  30C0               	movlw	192
  7337  0BA2  00AA               	movwf	___ftdiv@f2
  7338  0BA3  307F               	movlw	127
  7339  0BA4  00AB               	movwf	___ftdiv@f2+1
  7340  0BA5  3044               	movlw	68
  7341  0BA6  00AC               	movwf	___ftdiv@f2+2
  7342  0BA7  3040               	movlw	64
  7343  0BA8  00F8               	movwf	___ftmul@f1
  7344  0BA9  309C               	movlw	156
  7345  0BAA  00F9               	movwf	___ftmul@f1+1
  7346  0BAB  3045               	movlw	69
  7347  0BAC  00FA               	movwf	___ftmul@f1+2
  7348  0BAD  0851               	movf	_ADCvalue,w
  7349  0BAE  00FB               	movwf	___ftmul@f2
  7350  0BAF  0852               	movf	_ADCvalue+1,w
  7351  0BB0  00FC               	movwf	___ftmul@f2+1
  7352  0BB1  0853               	movf	_ADCvalue+2,w
  7353  0BB2  00FD               	movwf	___ftmul@f2+2
  7354  0BB3  120A  158A  272F  120A  158A  	fcall	___ftmul
  7355  0BB8  0878               	movf	?___ftmul,w
  7356  0BB9  1283               	bcf	3,5	;RP0=0, select bank0
  7357  0BBA  1303               	bcf	3,6	;RP1=0, select bank0
  7358  0BBB  00AD               	movwf	___ftdiv@f1
  7359  0BBC  0879               	movf	?___ftmul+1,w
  7360  0BBD  00AE               	movwf	___ftdiv@f1+1
  7361  0BBE  087A               	movf	?___ftmul+2,w
  7362  0BBF  00AF               	movwf	___ftdiv@f1+2
  7363  0BC0  120A  158A  2677  120A  158A  	fcall	___ftdiv
  7364  0BC5  1283               	bcf	3,5	;RP0=0, select bank0
  7365  0BC6  1303               	bcf	3,6	;RP1=0, select bank0
  7366  0BC7  082A               	movf	?___ftdiv,w
  7367  0BC8  00D4               	movwf	_voltage
  7368  0BC9  082B               	movf	?___ftdiv+1,w
  7369  0BCA  00D5               	movwf	_voltage+1
  7370  0BCB  082C               	movf	?___ftdiv+2,w
  7371  0BCC  00D6               	movwf	_voltage+2
  7372                           
  7373                           ;main.c: 135: temperature = voltage / 10;
  7374  0BCD  0854               	movf	_voltage,w
  7375  0BCE  00AD               	movwf	___ftdiv@f1
  7376  0BCF  0855               	movf	_voltage+1,w
  7377  0BD0  00AE               	movwf	___ftdiv@f1+1
  7378  0BD1  0856               	movf	_voltage+2,w
  7379  0BD2  00AF               	movwf	___ftdiv@f1+2
  7380  0BD3  3000               	movlw	0
  7381  0BD4  00AA               	movwf	___ftdiv@f2
  7382  0BD5  3020               	movlw	32
  7383  0BD6  00AB               	movwf	___ftdiv@f2+1
  7384  0BD7  3041               	movlw	65
  7385  0BD8  00AC               	movwf	___ftdiv@f2+2
  7386  0BD9  120A  158A  2677  120A  158A  	fcall	___ftdiv
  7387  0BDE  1283               	bcf	3,5	;RP0=0, select bank0
  7388  0BDF  1303               	bcf	3,6	;RP1=0, select bank0
  7389  0BE0  082A               	movf	?___ftdiv,w
  7390  0BE1  00BA               	movwf	___fttol@f1
  7391  0BE2  082B               	movf	?___ftdiv+1,w
  7392  0BE3  00BB               	movwf	___fttol@f1+1
  7393  0BE4  082C               	movf	?___ftdiv+2,w
  7394  0BE5  00BC               	movwf	___fttol@f1+2
  7395  0BE6  120A  158A  25E9   	fcall	___fttol
  7396  0BE9  1283               	bcf	3,5	;RP0=0, select bank0
  7397  0BEA  1303               	bcf	3,6	;RP1=0, select bank0
  7398  0BEB  083A               	movf	?___fttol,w
  7399  0BEC  00C8               	movwf	??_Read_Tem
  7400  0BED  0848               	movf	??_Read_Tem,w
  7401  0BEE  1683               	bsf	3,5	;RP0=1, select bank1
  7402  0BEF  1303               	bcf	3,6	;RP1=0, select bank1
  7403  0BF0  00BC               	movwf	_temperature^(0+128)
  7404  0BF1  0008               	return
  7405  0BF2                     __end_of_Read_Tem:	
  7406                           
  7407                           	psect	text44
  7408  0DE9                     __ptext44:	
  7409 ;; *************** function ___fttol *****************
  7410 ;; Defined at:
  7411 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\fttol.c"
  7412 ;; Parameters:    Size  Location     Type
  7413 ;;  f1              3   26[BANK0 ] float 
  7414 ;; Auto vars:     Size  Location     Type
  7415 ;;  lval            4   35[BANK0 ] unsigned long 
  7416 ;;  exp1            1   39[BANK0 ] unsigned char 
  7417 ;;  sign1           1   34[BANK0 ] unsigned char 
  7418 ;; Return value:  Size  Location     Type
  7419 ;;                  4   26[BANK0 ] long 
  7420 ;; Registers used:
  7421 ;;		wreg, status,2, status,0
  7422 ;; Tracked objects:
  7423 ;;		On entry : 0/0
  7424 ;;		On exit  : 0/0
  7425 ;;		Unchanged: 0/0
  7426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7427 ;;      Params:         0       4       0       0       0
  7428 ;;      Locals:         0       6       0       0       0
  7429 ;;      Temps:          0       4       0       0       0
  7430 ;;      Totals:         0      14       0       0       0
  7431 ;;Total ram usage:       14 bytes
  7432 ;; Hardware stack levels used:    1
  7433 ;; This function calls:
  7434 ;;		Nothing
  7435 ;; This function is called by:
  7436 ;;		_Read_Tem
  7437 ;; This function uses a non-reentrant model
  7438 ;;
  7439                           
  7440                           
  7441                           ;psect for function ___fttol
  7442  0DE9                     ___fttol:	
  7443                           
  7444                           ;incstack = 0
  7445                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  7446  0DE9  1283               	bcf	3,5	;RP0=0, select bank0
  7447  0DEA  1303               	bcf	3,6	;RP1=0, select bank0
  7448  0DEB  083A               	movf	___fttol@f1,w
  7449  0DEC  00BE               	movwf	??___fttol
  7450  0DED  083B               	movf	___fttol@f1+1,w
  7451  0DEE  00BF               	movwf	??___fttol+1
  7452  0DEF  083C               	movf	___fttol@f1+2,w
  7453  0DF0  00C0               	movwf	??___fttol+2
  7454  0DF1  1003               	clrc
  7455  0DF2  0D3F               	rlf	??___fttol+1,w
  7456  0DF3  0D40               	rlf	??___fttol+2,w
  7457  0DF4  00C1               	movwf	??___fttol+3
  7458  0DF5  0841               	movf	??___fttol+3,w
  7459  0DF6  00C7               	movwf	___fttol@exp1
  7460  0DF7  0847               	movf	___fttol@exp1,w
  7461  0DF8  1D03               	btfss	3,2
  7462  0DF9  2E03               	goto	i1l3000
  7463  0DFA  3000               	movlw	0
  7464  0DFB  00BD               	movwf	?___fttol+3
  7465  0DFC  3000               	movlw	0
  7466  0DFD  00BC               	movwf	?___fttol+2
  7467  0DFE  3000               	movlw	0
  7468  0DFF  00BB               	movwf	?___fttol+1
  7469  0E00  3000               	movlw	0
  7470  0E01  00BA               	movwf	?___fttol
  7471  0E02  0008               	return
  7472  0E03                     i1l3000:	
  7473  0E03  083A               	movf	___fttol@f1,w
  7474  0E04  00BE               	movwf	??___fttol
  7475  0E05  083B               	movf	___fttol@f1+1,w
  7476  0E06  00BF               	movwf	??___fttol+1
  7477  0E07  083C               	movf	___fttol@f1+2,w
  7478  0E08  00C0               	movwf	??___fttol+2
  7479  0E09  3017               	movlw	23
  7480  0E0A                     u382_25:	
  7481  0E0A  1003               	clrc
  7482  0E0B  0CC0               	rrf	??___fttol+2,f
  7483  0E0C  0CBF               	rrf	??___fttol+1,f
  7484  0E0D  0CBE               	rrf	??___fttol,f
  7485  0E0E  3EFF               	addlw	-1
  7486  0E0F  1D03               	skipz
  7487  0E10  2E0A               	goto	u382_25
  7488  0E11  083E               	movf	??___fttol,w
  7489  0E12  00C1               	movwf	??___fttol+3
  7490  0E13  0841               	movf	??___fttol+3,w
  7491  0E14  00C2               	movwf	___fttol@sign1
  7492  0E15  17BB               	bsf	___fttol@f1+1,7
  7493  0E16  30FF               	movlw	255
  7494  0E17  05BA               	andwf	___fttol@f1,f
  7495  0E18  30FF               	movlw	255
  7496  0E19  05BB               	andwf	___fttol@f1+1,f
  7497  0E1A  3000               	movlw	0
  7498  0E1B  05BC               	andwf	___fttol@f1+2,f
  7499  0E1C  083A               	movf	___fttol@f1,w
  7500  0E1D  00C3               	movwf	___fttol@lval
  7501  0E1E  083B               	movf	___fttol@f1+1,w
  7502  0E1F  00C4               	movwf	___fttol@lval+1
  7503  0E20  083C               	movf	___fttol@f1+2,w
  7504  0E21  00C5               	movwf	___fttol@lval+2
  7505  0E22  01C6               	clrf	___fttol@lval+3
  7506  0E23  308E               	movlw	142
  7507  0E24  02C7               	subwf	___fttol@exp1,f
  7508  0E25  1FC7               	btfss	___fttol@exp1,7
  7509  0E26  2E45               	goto	i1l3020
  7510  0E27  0847               	movf	___fttol@exp1,w
  7511  0E28  3A80               	xorlw	128
  7512  0E29  3E8F               	addlw	143
  7513  0E2A  1803               	skipnc
  7514  0E2B  2E35               	goto	i1l3018
  7515  0E2C  3000               	movlw	0
  7516  0E2D  00BD               	movwf	?___fttol+3
  7517  0E2E  3000               	movlw	0
  7518  0E2F  00BC               	movwf	?___fttol+2
  7519  0E30  3000               	movlw	0
  7520  0E31  00BB               	movwf	?___fttol+1
  7521  0E32  3000               	movlw	0
  7522  0E33  00BA               	movwf	?___fttol
  7523  0E34  0008               	return
  7524  0E35                     i1l3018:	
  7525  0E35  3001               	movlw	1
  7526  0E36                     u385_25:	
  7527  0E36  1003               	clrc
  7528  0E37  0CC6               	rrf	___fttol@lval+3,f
  7529  0E38  0CC5               	rrf	___fttol@lval+2,f
  7530  0E39  0CC4               	rrf	___fttol@lval+1,f
  7531  0E3A  0CC3               	rrf	___fttol@lval,f
  7532  0E3B  3EFF               	addlw	-1
  7533  0E3C  1D03               	skipz
  7534  0E3D  2E36               	goto	u385_25
  7535  0E3E  3001               	movlw	1
  7536  0E3F  00BE               	movwf	??___fttol
  7537  0E40  083E               	movf	??___fttol,w
  7538  0E41  07C7               	addwf	___fttol@exp1,f
  7539  0E42  1903               	btfsc	3,2
  7540  0E43  2E60               	goto	i1l3028
  7541  0E44  2E35               	goto	i1l3018
  7542  0E45                     i1l3020:	
  7543  0E45  3018               	movlw	24
  7544  0E46  0247               	subwf	___fttol@exp1,w
  7545  0E47  1C03               	skipc
  7546  0E48  2E5D               	goto	i1l884
  7547  0E49  3000               	movlw	0
  7548  0E4A  00BD               	movwf	?___fttol+3
  7549  0E4B  3000               	movlw	0
  7550  0E4C  00BC               	movwf	?___fttol+2
  7551  0E4D  3000               	movlw	0
  7552  0E4E  00BB               	movwf	?___fttol+1
  7553  0E4F  3000               	movlw	0
  7554  0E50  00BA               	movwf	?___fttol
  7555  0E51  0008               	return
  7556  0E52                     i1l3026:	
  7557  0E52  3001               	movlw	1
  7558  0E53  00BE               	movwf	??___fttol
  7559  0E54                     u388_25:	
  7560  0E54  1003               	clrc
  7561  0E55  0DC3               	rlf	___fttol@lval,f
  7562  0E56  0DC4               	rlf	___fttol@lval+1,f
  7563  0E57  0DC5               	rlf	___fttol@lval+2,f
  7564  0E58  0DC6               	rlf	___fttol@lval+3,f
  7565  0E59  0BBE               	decfsz	??___fttol,f
  7566  0E5A  2E54               	goto	u388_25
  7567  0E5B  3001               	movlw	1
  7568  0E5C  02C7               	subwf	___fttol@exp1,f
  7569  0E5D                     i1l884:	
  7570  0E5D  0847               	movf	___fttol@exp1,w
  7571  0E5E  1D03               	btfss	3,2
  7572  0E5F  2E52               	goto	i1l3026
  7573  0E60                     i1l3028:	
  7574  0E60  0842               	movf	___fttol@sign1,w
  7575  0E61  1903               	btfsc	3,2
  7576  0E62  2E6E               	goto	i1l3032
  7577  0E63  09C3               	comf	___fttol@lval,f
  7578  0E64  09C4               	comf	___fttol@lval+1,f
  7579  0E65  09C5               	comf	___fttol@lval+2,f
  7580  0E66  09C6               	comf	___fttol@lval+3,f
  7581  0E67  0AC3               	incf	___fttol@lval,f
  7582  0E68  1903               	skipnz
  7583  0E69  0AC4               	incf	___fttol@lval+1,f
  7584  0E6A  1903               	skipnz
  7585  0E6B  0AC5               	incf	___fttol@lval+2,f
  7586  0E6C  1903               	skipnz
  7587  0E6D  0AC6               	incf	___fttol@lval+3,f
  7588  0E6E                     i1l3032:	
  7589  0E6E  0846               	movf	___fttol@lval+3,w
  7590  0E6F  00BD               	movwf	?___fttol+3
  7591  0E70  0845               	movf	___fttol@lval+2,w
  7592  0E71  00BC               	movwf	?___fttol+2
  7593  0E72  0844               	movf	___fttol@lval+1,w
  7594  0E73  00BB               	movwf	?___fttol+1
  7595  0E74  0843               	movf	___fttol@lval,w
  7596  0E75  00BA               	movwf	?___fttol
  7597  0E76  0008               	return
  7598  0E77                     __end_of___fttol:	
  7599                           
  7600                           	psect	text45
  7601  0F2F                     __ptext45:	
  7602 ;; *************** function ___ftmul *****************
  7603 ;; Defined at:
  7604 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\ftmul.c"
  7605 ;; Parameters:    Size  Location     Type
  7606 ;;  f1              3    8[COMMON] float 
  7607 ;;  f2              3   11[COMMON] float 
  7608 ;; Auto vars:     Size  Location     Type
  7609 ;;  f3_as_produc    3    5[BANK0 ] unsigned um
  7610 ;;  sign            1    9[BANK0 ] unsigned char 
  7611 ;;  cntr            1    8[BANK0 ] unsigned char 
  7612 ;;  exp             1    4[BANK0 ] unsigned char 
  7613 ;; Return value:  Size  Location     Type
  7614 ;;                  3    8[COMMON] float 
  7615 ;; Registers used:
  7616 ;;		wreg, status,2, status,0, pclath, cstack
  7617 ;; Tracked objects:
  7618 ;;		On entry : 0/0
  7619 ;;		On exit  : 0/0
  7620 ;;		Unchanged: 0/0
  7621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7622 ;;      Params:         6       0       0       0       0
  7623 ;;      Locals:         0       6       0       0       0
  7624 ;;      Temps:          0       4       0       0       0
  7625 ;;      Totals:         6      10       0       0       0
  7626 ;;Total ram usage:       16 bytes
  7627 ;; Hardware stack levels used:    1
  7628 ;; Hardware stack levels required when called:    1
  7629 ;; This function calls:
  7630 ;;		___ftpack
  7631 ;; This function is called by:
  7632 ;;		_Read_Tem
  7633 ;; This function uses a non-reentrant model
  7634 ;;
  7635                           
  7636                           
  7637                           ;psect for function ___ftmul
  7638  0F2F                     ___ftmul:	
  7639                           
  7640                           ;incstack = 0
  7641                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7642  0F2F  0878               	movf	___ftmul@f1,w
  7643  0F30  1283               	bcf	3,5	;RP0=0, select bank0
  7644  0F31  1303               	bcf	3,6	;RP1=0, select bank0
  7645  0F32  00A0               	movwf	??___ftmul
  7646  0F33  0879               	movf	___ftmul@f1+1,w
  7647  0F34  00A1               	movwf	??___ftmul+1
  7648  0F35  087A               	movf	___ftmul@f1+2,w
  7649  0F36  00A2               	movwf	??___ftmul+2
  7650  0F37  1003               	clrc
  7651  0F38  0D21               	rlf	??___ftmul+1,w
  7652  0F39  0D22               	rlf	??___ftmul+2,w
  7653  0F3A  00A3               	movwf	??___ftmul+3
  7654  0F3B  0823               	movf	??___ftmul+3,w
  7655  0F3C  00A4               	movwf	___ftmul@exp
  7656  0F3D  0824               	movf	___ftmul@exp,w
  7657  0F3E  1D03               	btfss	3,2
  7658  0F3F  2F47               	goto	i1l2950
  7659  0F40  3000               	movlw	0
  7660  0F41  00F8               	movwf	?___ftmul
  7661  0F42  3000               	movlw	0
  7662  0F43  00F9               	movwf	?___ftmul+1
  7663  0F44  3000               	movlw	0
  7664  0F45  00FA               	movwf	?___ftmul+2
  7665  0F46  0008               	return
  7666  0F47                     i1l2950:	
  7667  0F47  087B               	movf	___ftmul@f2,w
  7668  0F48  00A0               	movwf	??___ftmul
  7669  0F49  087C               	movf	___ftmul@f2+1,w
  7670  0F4A  00A1               	movwf	??___ftmul+1
  7671  0F4B  087D               	movf	___ftmul@f2+2,w
  7672  0F4C  00A2               	movwf	??___ftmul+2
  7673  0F4D  1003               	clrc
  7674  0F4E  0D21               	rlf	??___ftmul+1,w
  7675  0F4F  0D22               	rlf	??___ftmul+2,w
  7676  0F50  00A3               	movwf	??___ftmul+3
  7677  0F51  0823               	movf	??___ftmul+3,w
  7678  0F52  00A9               	movwf	___ftmul@sign
  7679  0F53  0829               	movf	___ftmul@sign,w
  7680  0F54  1D03               	btfss	3,2
  7681  0F55  2F5D               	goto	i1l2956
  7682  0F56  3000               	movlw	0
  7683  0F57  00F8               	movwf	?___ftmul
  7684  0F58  3000               	movlw	0
  7685  0F59  00F9               	movwf	?___ftmul+1
  7686  0F5A  3000               	movlw	0
  7687  0F5B  00FA               	movwf	?___ftmul+2
  7688  0F5C  0008               	return
  7689  0F5D                     i1l2956:	
  7690  0F5D  0829               	movf	___ftmul@sign,w
  7691  0F5E  3E7B               	addlw	123
  7692  0F5F  00A0               	movwf	??___ftmul
  7693  0F60  0820               	movf	??___ftmul,w
  7694  0F61  07A4               	addwf	___ftmul@exp,f
  7695  0F62  0878               	movf	___ftmul@f1,w
  7696  0F63  00A0               	movwf	??___ftmul
  7697  0F64  0879               	movf	___ftmul@f1+1,w
  7698  0F65  00A1               	movwf	??___ftmul+1
  7699  0F66  087A               	movf	___ftmul@f1+2,w
  7700  0F67  00A2               	movwf	??___ftmul+2
  7701  0F68  3010               	movlw	16
  7702  0F69                     u369_25:	
  7703  0F69  1003               	clrc
  7704  0F6A  0CA2               	rrf	??___ftmul+2,f
  7705  0F6B  0CA1               	rrf	??___ftmul+1,f
  7706  0F6C  0CA0               	rrf	??___ftmul,f
  7707  0F6D  3EFF               	addlw	-1
  7708  0F6E  1D03               	skipz
  7709  0F6F  2F69               	goto	u369_25
  7710  0F70  0820               	movf	??___ftmul,w
  7711  0F71  00A3               	movwf	??___ftmul+3
  7712  0F72  0823               	movf	??___ftmul+3,w
  7713  0F73  00A9               	movwf	___ftmul@sign
  7714  0F74  087B               	movf	___ftmul@f2,w
  7715  0F75  00A0               	movwf	??___ftmul
  7716  0F76  087C               	movf	___ftmul@f2+1,w
  7717  0F77  00A1               	movwf	??___ftmul+1
  7718  0F78  087D               	movf	___ftmul@f2+2,w
  7719  0F79  00A2               	movwf	??___ftmul+2
  7720  0F7A  3010               	movlw	16
  7721  0F7B                     u370_25:	
  7722  0F7B  1003               	clrc
  7723  0F7C  0CA2               	rrf	??___ftmul+2,f
  7724  0F7D  0CA1               	rrf	??___ftmul+1,f
  7725  0F7E  0CA0               	rrf	??___ftmul,f
  7726  0F7F  3EFF               	addlw	-1
  7727  0F80  1D03               	skipz
  7728  0F81  2F7B               	goto	u370_25
  7729  0F82  0820               	movf	??___ftmul,w
  7730  0F83  00A3               	movwf	??___ftmul+3
  7731  0F84  0823               	movf	??___ftmul+3,w
  7732  0F85  06A9               	xorwf	___ftmul@sign,f
  7733  0F86  3080               	movlw	128
  7734  0F87  00A0               	movwf	??___ftmul
  7735  0F88  0820               	movf	??___ftmul,w
  7736  0F89  05A9               	andwf	___ftmul@sign,f
  7737  0F8A  17F9               	bsf	___ftmul@f1+1,7
  7738  0F8B  17FC               	bsf	___ftmul@f2+1,7
  7739  0F8C  30FF               	movlw	255
  7740  0F8D  05FB               	andwf	___ftmul@f2,f
  7741  0F8E  30FF               	movlw	255
  7742  0F8F  05FC               	andwf	___ftmul@f2+1,f
  7743  0F90  3000               	movlw	0
  7744  0F91  05FD               	andwf	___ftmul@f2+2,f
  7745  0F92  3000               	movlw	0
  7746  0F93  00A5               	movwf	___ftmul@f3_as_product
  7747  0F94  3000               	movlw	0
  7748  0F95  00A6               	movwf	___ftmul@f3_as_product+1
  7749  0F96  3000               	movlw	0
  7750  0F97  00A7               	movwf	___ftmul@f3_as_product+2
  7751  0F98  3007               	movlw	7
  7752  0F99  00A0               	movwf	??___ftmul
  7753  0F9A  0820               	movf	??___ftmul,w
  7754  0F9B  00A8               	movwf	___ftmul@cntr
  7755  0F9C                     i1l2968:	
  7756  0F9C  1C78               	btfss	___ftmul@f1,0
  7757  0F9D  2FAC               	goto	i1l2972
  7758  0F9E  087B               	movf	___ftmul@f2,w
  7759  0F9F  07A5               	addwf	___ftmul@f3_as_product,f
  7760  0FA0  087C               	movf	___ftmul@f2+1,w
  7761  0FA1  1103               	clrz
  7762  0FA2  1803               	skipnc
  7763  0FA3  0A7C               	incf	___ftmul@f2+1,w
  7764  0FA4  1D03               	btfss	3,2
  7765  0FA5  07A6               	addwf	___ftmul@f3_as_product+1,f
  7766  0FA6  087D               	movf	___ftmul@f2+2,w
  7767  0FA7  1103               	clrz
  7768  0FA8  1803               	skipnc
  7769  0FA9  0A7D               	incf	___ftmul@f2+2,w
  7770  0FAA  1D03               	btfss	3,2
  7771  0FAB  07A7               	addwf	___ftmul@f3_as_product+2,f
  7772  0FAC                     i1l2972:	
  7773  0FAC  3001               	movlw	1
  7774  0FAD                     u373_25:	
  7775  0FAD  1003               	clrc
  7776  0FAE  0CFA               	rrf	___ftmul@f1+2,f
  7777  0FAF  0CF9               	rrf	___ftmul@f1+1,f
  7778  0FB0  0CF8               	rrf	___ftmul@f1,f
  7779  0FB1  3EFF               	addlw	-1
  7780  0FB2  1D03               	skipz
  7781  0FB3  2FAD               	goto	u373_25
  7782  0FB4  3001               	movlw	1
  7783  0FB5                     u374_25:	
  7784  0FB5  1003               	clrc
  7785  0FB6  0DFB               	rlf	___ftmul@f2,f
  7786  0FB7  0DFC               	rlf	___ftmul@f2+1,f
  7787  0FB8  0DFD               	rlf	___ftmul@f2+2,f
  7788  0FB9  3EFF               	addlw	-1
  7789  0FBA  1D03               	skipz
  7790  0FBB  2FB5               	goto	u374_25
  7791  0FBC  3001               	movlw	1
  7792  0FBD  02A8               	subwf	___ftmul@cntr,f
  7793  0FBE  1D03               	btfss	3,2
  7794  0FBF  2F9C               	goto	i1l2968
  7795  0FC0  3009               	movlw	9
  7796  0FC1  00A0               	movwf	??___ftmul
  7797  0FC2  0820               	movf	??___ftmul,w
  7798  0FC3  00A8               	movwf	___ftmul@cntr
  7799  0FC4                     i1l2980:	
  7800  0FC4  1C78               	btfss	___ftmul@f1,0
  7801  0FC5  2FD4               	goto	i1l2984
  7802  0FC6  087B               	movf	___ftmul@f2,w
  7803  0FC7  07A5               	addwf	___ftmul@f3_as_product,f
  7804  0FC8  087C               	movf	___ftmul@f2+1,w
  7805  0FC9  1103               	clrz
  7806  0FCA  1803               	skipnc
  7807  0FCB  0A7C               	incf	___ftmul@f2+1,w
  7808  0FCC  1D03               	btfss	3,2
  7809  0FCD  07A6               	addwf	___ftmul@f3_as_product+1,f
  7810  0FCE  087D               	movf	___ftmul@f2+2,w
  7811  0FCF  1103               	clrz
  7812  0FD0  1803               	skipnc
  7813  0FD1  0A7D               	incf	___ftmul@f2+2,w
  7814  0FD2  1D03               	btfss	3,2
  7815  0FD3  07A7               	addwf	___ftmul@f3_as_product+2,f
  7816  0FD4                     i1l2984:	
  7817  0FD4  3001               	movlw	1
  7818  0FD5                     u378_25:	
  7819  0FD5  1003               	clrc
  7820  0FD6  0CFA               	rrf	___ftmul@f1+2,f
  7821  0FD7  0CF9               	rrf	___ftmul@f1+1,f
  7822  0FD8  0CF8               	rrf	___ftmul@f1,f
  7823  0FD9  3EFF               	addlw	-1
  7824  0FDA  1D03               	skipz
  7825  0FDB  2FD5               	goto	u378_25
  7826  0FDC  3001               	movlw	1
  7827  0FDD                     u379_25:	
  7828  0FDD  1003               	clrc
  7829  0FDE  0CA7               	rrf	___ftmul@f3_as_product+2,f
  7830  0FDF  0CA6               	rrf	___ftmul@f3_as_product+1,f
  7831  0FE0  0CA5               	rrf	___ftmul@f3_as_product,f
  7832  0FE1  3EFF               	addlw	-1
  7833  0FE2  1D03               	skipz
  7834  0FE3  2FDD               	goto	u379_25
  7835  0FE4  3001               	movlw	1
  7836  0FE5  02A8               	subwf	___ftmul@cntr,f
  7837  0FE6  1D03               	btfss	3,2
  7838  0FE7  2FC4               	goto	i1l2980
  7839  0FE8  0825               	movf	___ftmul@f3_as_product,w
  7840  0FE9  00F0               	movwf	___ftpack@arg
  7841  0FEA  0826               	movf	___ftmul@f3_as_product+1,w
  7842  0FEB  00F1               	movwf	___ftpack@arg+1
  7843  0FEC  0827               	movf	___ftmul@f3_as_product+2,w
  7844  0FED  00F2               	movwf	___ftpack@arg+2
  7845  0FEE  0824               	movf	___ftmul@exp,w
  7846  0FEF  00A0               	movwf	??___ftmul
  7847  0FF0  0820               	movf	??___ftmul,w
  7848  0FF1  00F3               	movwf	___ftpack@exp
  7849  0FF2  0829               	movf	___ftmul@sign,w
  7850  0FF3  00A1               	movwf	??___ftmul+1
  7851  0FF4  0821               	movf	??___ftmul+1,w
  7852  0FF5  00F4               	movwf	___ftpack@sign
  7853  0FF6  120A  158A  2310   	fcall	___ftpack
  7854  0FF9  0870               	movf	?___ftpack,w
  7855  0FFA  00F8               	movwf	?___ftmul
  7856  0FFB  0871               	movf	?___ftpack+1,w
  7857  0FFC  00F9               	movwf	?___ftmul+1
  7858  0FFD  0872               	movf	?___ftpack+2,w
  7859  0FFE  00FA               	movwf	?___ftmul+2
  7860  0FFF  0008               	return
  7861  1000                     __end_of___ftmul:	
  7862                           
  7863                           	psect	text46
  7864  0E77                     __ptext46:	
  7865 ;; *************** function ___ftdiv *****************
  7866 ;; Defined at:
  7867 ;;		line 56 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\ftdiv.c"
  7868 ;; Parameters:    Size  Location     Type
  7869 ;;  f2              3   10[BANK0 ] float 
  7870 ;;  f1              3   13[BANK0 ] float 
  7871 ;; Auto vars:     Size  Location     Type
  7872 ;;  f3              3   21[BANK0 ] float 
  7873 ;;  sign            1   25[BANK0 ] unsigned char 
  7874 ;;  exp             1   24[BANK0 ] unsigned char 
  7875 ;;  cntr            1   20[BANK0 ] unsigned char 
  7876 ;; Return value:  Size  Location     Type
  7877 ;;                  3   10[BANK0 ] float 
  7878 ;; Registers used:
  7879 ;;		wreg, status,2, status,0, pclath, cstack
  7880 ;; Tracked objects:
  7881 ;;		On entry : 0/0
  7882 ;;		On exit  : 0/0
  7883 ;;		Unchanged: 0/0
  7884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7885 ;;      Params:         0       6       0       0       0
  7886 ;;      Locals:         0       6       0       0       0
  7887 ;;      Temps:          0       4       0       0       0
  7888 ;;      Totals:         0      16       0       0       0
  7889 ;;Total ram usage:       16 bytes
  7890 ;; Hardware stack levels used:    1
  7891 ;; Hardware stack levels required when called:    1
  7892 ;; This function calls:
  7893 ;;		___ftpack
  7894 ;; This function is called by:
  7895 ;;		_Read_Tem
  7896 ;; This function uses a non-reentrant model
  7897 ;;
  7898                           
  7899                           
  7900                           ;psect for function ___ftdiv
  7901  0E77                     ___ftdiv:	
  7902                           
  7903                           ;incstack = 0
  7904                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  7905  0E77  1283               	bcf	3,5	;RP0=0, select bank0
  7906  0E78  1303               	bcf	3,6	;RP1=0, select bank0
  7907  0E79  082D               	movf	___ftdiv@f1,w
  7908  0E7A  00B0               	movwf	??___ftdiv
  7909  0E7B  082E               	movf	___ftdiv@f1+1,w
  7910  0E7C  00B1               	movwf	??___ftdiv+1
  7911  0E7D  082F               	movf	___ftdiv@f1+2,w
  7912  0E7E  00B2               	movwf	??___ftdiv+2
  7913  0E7F  1003               	clrc
  7914  0E80  0D31               	rlf	??___ftdiv+1,w
  7915  0E81  0D32               	rlf	??___ftdiv+2,w
  7916  0E82  00B3               	movwf	??___ftdiv+3
  7917  0E83  0833               	movf	??___ftdiv+3,w
  7918  0E84  00B8               	movwf	___ftdiv@exp
  7919  0E85  0838               	movf	___ftdiv@exp,w
  7920  0E86  1D03               	btfss	3,2
  7921  0E87  2E8F               	goto	i1l2908
  7922  0E88  3000               	movlw	0
  7923  0E89  00AA               	movwf	?___ftdiv
  7924  0E8A  3000               	movlw	0
  7925  0E8B  00AB               	movwf	?___ftdiv+1
  7926  0E8C  3000               	movlw	0
  7927  0E8D  00AC               	movwf	?___ftdiv+2
  7928  0E8E  0008               	return
  7929  0E8F                     i1l2908:	
  7930  0E8F  082A               	movf	___ftdiv@f2,w
  7931  0E90  00B0               	movwf	??___ftdiv
  7932  0E91  082B               	movf	___ftdiv@f2+1,w
  7933  0E92  00B1               	movwf	??___ftdiv+1
  7934  0E93  082C               	movf	___ftdiv@f2+2,w
  7935  0E94  00B2               	movwf	??___ftdiv+2
  7936  0E95  1003               	clrc
  7937  0E96  0D31               	rlf	??___ftdiv+1,w
  7938  0E97  0D32               	rlf	??___ftdiv+2,w
  7939  0E98  00B3               	movwf	??___ftdiv+3
  7940  0E99  0833               	movf	??___ftdiv+3,w
  7941  0E9A  00B9               	movwf	___ftdiv@sign
  7942  0E9B  0839               	movf	___ftdiv@sign,w
  7943  0E9C  1D03               	btfss	3,2
  7944  0E9D  2EA5               	goto	i1l2914
  7945  0E9E  3000               	movlw	0
  7946  0E9F  00AA               	movwf	?___ftdiv
  7947  0EA0  3000               	movlw	0
  7948  0EA1  00AB               	movwf	?___ftdiv+1
  7949  0EA2  3000               	movlw	0
  7950  0EA3  00AC               	movwf	?___ftdiv+2
  7951  0EA4  0008               	return
  7952  0EA5                     i1l2914:	
  7953  0EA5  3000               	movlw	0
  7954  0EA6  00B5               	movwf	___ftdiv@f3
  7955  0EA7  3000               	movlw	0
  7956  0EA8  00B6               	movwf	___ftdiv@f3+1
  7957  0EA9  3000               	movlw	0
  7958  0EAA  00B7               	movwf	___ftdiv@f3+2
  7959  0EAB  3089               	movlw	137
  7960  0EAC  0739               	addwf	___ftdiv@sign,w
  7961  0EAD  00B0               	movwf	??___ftdiv
  7962  0EAE  0830               	movf	??___ftdiv,w
  7963  0EAF  02B8               	subwf	___ftdiv@exp,f
  7964  0EB0  082D               	movf	___ftdiv@f1,w
  7965  0EB1  00B0               	movwf	??___ftdiv
  7966  0EB2  082E               	movf	___ftdiv@f1+1,w
  7967  0EB3  00B1               	movwf	??___ftdiv+1
  7968  0EB4  082F               	movf	___ftdiv@f1+2,w
  7969  0EB5  00B2               	movwf	??___ftdiv+2
  7970  0EB6  3010               	movlw	16
  7971  0EB7                     u361_25:	
  7972  0EB7  1003               	clrc
  7973  0EB8  0CB2               	rrf	??___ftdiv+2,f
  7974  0EB9  0CB1               	rrf	??___ftdiv+1,f
  7975  0EBA  0CB0               	rrf	??___ftdiv,f
  7976  0EBB  3EFF               	addlw	-1
  7977  0EBC  1D03               	skipz
  7978  0EBD  2EB7               	goto	u361_25
  7979  0EBE  0830               	movf	??___ftdiv,w
  7980  0EBF  00B3               	movwf	??___ftdiv+3
  7981  0EC0  0833               	movf	??___ftdiv+3,w
  7982  0EC1  00B9               	movwf	___ftdiv@sign
  7983  0EC2  082A               	movf	___ftdiv@f2,w
  7984  0EC3  00B0               	movwf	??___ftdiv
  7985  0EC4  082B               	movf	___ftdiv@f2+1,w
  7986  0EC5  00B1               	movwf	??___ftdiv+1
  7987  0EC6  082C               	movf	___ftdiv@f2+2,w
  7988  0EC7  00B2               	movwf	??___ftdiv+2
  7989  0EC8  3010               	movlw	16
  7990  0EC9                     u362_25:	
  7991  0EC9  1003               	clrc
  7992  0ECA  0CB2               	rrf	??___ftdiv+2,f
  7993  0ECB  0CB1               	rrf	??___ftdiv+1,f
  7994  0ECC  0CB0               	rrf	??___ftdiv,f
  7995  0ECD  3EFF               	addlw	-1
  7996  0ECE  1D03               	skipz
  7997  0ECF  2EC9               	goto	u362_25
  7998  0ED0  0830               	movf	??___ftdiv,w
  7999  0ED1  00B3               	movwf	??___ftdiv+3
  8000  0ED2  0833               	movf	??___ftdiv+3,w
  8001  0ED3  06B9               	xorwf	___ftdiv@sign,f
  8002  0ED4  3080               	movlw	128
  8003  0ED5  00B0               	movwf	??___ftdiv
  8004  0ED6  0830               	movf	??___ftdiv,w
  8005  0ED7  05B9               	andwf	___ftdiv@sign,f
  8006  0ED8  17AE               	bsf	___ftdiv@f1+1,7
  8007  0ED9  30FF               	movlw	255
  8008  0EDA  05AD               	andwf	___ftdiv@f1,f
  8009  0EDB  30FF               	movlw	255
  8010  0EDC  05AE               	andwf	___ftdiv@f1+1,f
  8011  0EDD  3000               	movlw	0
  8012  0EDE  05AF               	andwf	___ftdiv@f1+2,f
  8013  0EDF  17AB               	bsf	___ftdiv@f2+1,7
  8014  0EE0  30FF               	movlw	255
  8015  0EE1  05AA               	andwf	___ftdiv@f2,f
  8016  0EE2  30FF               	movlw	255
  8017  0EE3  05AB               	andwf	___ftdiv@f2+1,f
  8018  0EE4  3000               	movlw	0
  8019  0EE5  05AC               	andwf	___ftdiv@f2+2,f
  8020  0EE6  3018               	movlw	24
  8021  0EE7  00B0               	movwf	??___ftdiv
  8022  0EE8  0830               	movf	??___ftdiv,w
  8023  0EE9  00B4               	movwf	___ftdiv@cntr
  8024  0EEA                     i1l2928:	
  8025  0EEA  3001               	movlw	1
  8026  0EEB                     u363_25:	
  8027  0EEB  1003               	clrc
  8028  0EEC  0DB5               	rlf	___ftdiv@f3,f
  8029  0EED  0DB6               	rlf	___ftdiv@f3+1,f
  8030  0EEE  0DB7               	rlf	___ftdiv@f3+2,f
  8031  0EEF  3EFF               	addlw	-1
  8032  0EF0  1D03               	skipz
  8033  0EF1  2EEB               	goto	u363_25
  8034  0EF2  082C               	movf	___ftdiv@f2+2,w
  8035  0EF3  022F               	subwf	___ftdiv@f1+2,w
  8036  0EF4  1D03               	skipz
  8037  0EF5  2EFC               	goto	u364_25
  8038  0EF6  082B               	movf	___ftdiv@f2+1,w
  8039  0EF7  022E               	subwf	___ftdiv@f1+1,w
  8040  0EF8  1D03               	skipz
  8041  0EF9  2EFC               	goto	u364_25
  8042  0EFA  082A               	movf	___ftdiv@f2,w
  8043  0EFB  022D               	subwf	___ftdiv@f1,w
  8044  0EFC                     u364_25:	
  8045  0EFC  1C03               	skipc
  8046  0EFD  2F09               	goto	i1l2936
  8047  0EFE  082A               	movf	___ftdiv@f2,w
  8048  0EFF  02AD               	subwf	___ftdiv@f1,f
  8049  0F00  082B               	movf	___ftdiv@f2+1,w
  8050  0F01  1C03               	skipc
  8051  0F02  0F2B               	incfsz	___ftdiv@f2+1,w
  8052  0F03  02AE               	subwf	___ftdiv@f1+1,f
  8053  0F04  082C               	movf	___ftdiv@f2+2,w
  8054  0F05  1C03               	skipc
  8055  0F06  0A2C               	incf	___ftdiv@f2+2,w
  8056  0F07  02AF               	subwf	___ftdiv@f1+2,f
  8057  0F08  1435               	bsf	___ftdiv@f3,0
  8058  0F09                     i1l2936:	
  8059  0F09  3001               	movlw	1
  8060  0F0A                     u365_25:	
  8061  0F0A  1003               	clrc
  8062  0F0B  0DAD               	rlf	___ftdiv@f1,f
  8063  0F0C  0DAE               	rlf	___ftdiv@f1+1,f
  8064  0F0D  0DAF               	rlf	___ftdiv@f1+2,f
  8065  0F0E  3EFF               	addlw	-1
  8066  0F0F  1D03               	skipz
  8067  0F10  2F0A               	goto	u365_25
  8068  0F11  3001               	movlw	1
  8069  0F12  02B4               	subwf	___ftdiv@cntr,f
  8070  0F13  1D03               	btfss	3,2
  8071  0F14  2EEA               	goto	i1l2928
  8072  0F15  0835               	movf	___ftdiv@f3,w
  8073  0F16  00F0               	movwf	___ftpack@arg
  8074  0F17  0836               	movf	___ftdiv@f3+1,w
  8075  0F18  00F1               	movwf	___ftpack@arg+1
  8076  0F19  0837               	movf	___ftdiv@f3+2,w
  8077  0F1A  00F2               	movwf	___ftpack@arg+2
  8078  0F1B  0838               	movf	___ftdiv@exp,w
  8079  0F1C  00B0               	movwf	??___ftdiv
  8080  0F1D  0830               	movf	??___ftdiv,w
  8081  0F1E  00F3               	movwf	___ftpack@exp
  8082  0F1F  0839               	movf	___ftdiv@sign,w
  8083  0F20  00B1               	movwf	??___ftdiv+1
  8084  0F21  0831               	movf	??___ftdiv+1,w
  8085  0F22  00F4               	movwf	___ftpack@sign
  8086  0F23  120A  158A  2310   	fcall	___ftpack
  8087  0F26  0870               	movf	?___ftpack,w
  8088  0F27  1283               	bcf	3,5	;RP0=0, select bank0
  8089  0F28  1303               	bcf	3,6	;RP1=0, select bank0
  8090  0F29  00AA               	movwf	?___ftdiv
  8091  0F2A  0871               	movf	?___ftpack+1,w
  8092  0F2B  00AB               	movwf	?___ftdiv+1
  8093  0F2C  0872               	movf	?___ftpack+2,w
  8094  0F2D  00AC               	movwf	?___ftdiv+2
  8095  0F2E  0008               	return
  8096  0F2F                     __end_of___ftdiv:	
  8097                           
  8098                           	psect	text47
  8099  15FA                     __ptext47:	
  8100 ;; *************** function ___awtoft *****************
  8101 ;; Defined at:
  8102 ;;		line 32 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\awtoft.c"
  8103 ;; Parameters:    Size  Location     Type
  8104 ;;  c               2    8[COMMON] int 
  8105 ;; Auto vars:     Size  Location     Type
  8106 ;;  sign            1   13[COMMON] unsigned char 
  8107 ;; Return value:  Size  Location     Type
  8108 ;;                  3    8[COMMON] float 
  8109 ;; Registers used:
  8110 ;;		wreg, status,2, status,0, pclath, cstack
  8111 ;; Tracked objects:
  8112 ;;		On entry : 0/0
  8113 ;;		On exit  : 0/0
  8114 ;;		Unchanged: 0/0
  8115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8116 ;;      Params:         3       0       0       0       0
  8117 ;;      Locals:         1       0       0       0       0
  8118 ;;      Temps:          2       0       0       0       0
  8119 ;;      Totals:         6       0       0       0       0
  8120 ;;Total ram usage:        6 bytes
  8121 ;; Hardware stack levels used:    1
  8122 ;; Hardware stack levels required when called:    1
  8123 ;; This function calls:
  8124 ;;		___ftpack
  8125 ;; This function is called by:
  8126 ;;		_Read_Tem
  8127 ;; This function uses a non-reentrant model
  8128 ;;
  8129                           
  8130                           
  8131                           ;psect for function ___awtoft
  8132  15FA                     ___awtoft:	
  8133                           
  8134                           ;incstack = 0
  8135                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  8136  15FA  01FD               	clrf	___awtoft@sign
  8137  15FB  1FF9               	btfss	___awtoft@c+1,7
  8138  15FC  2E04               	goto	i1l2898
  8139  15FD  09F8               	comf	___awtoft@c,f
  8140  15FE  09F9               	comf	___awtoft@c+1,f
  8141  15FF  0AF8               	incf	___awtoft@c,f
  8142  1600  1903               	skipnz
  8143  1601  0AF9               	incf	___awtoft@c+1,f
  8144  1602  01FD               	clrf	___awtoft@sign
  8145  1603  0AFD               	incf	___awtoft@sign,f
  8146  1604                     i1l2898:	
  8147  1604  0878               	movf	___awtoft@c,w
  8148  1605  00F0               	movwf	___ftpack@arg
  8149  1606  0879               	movf	___awtoft@c+1,w
  8150  1607  00F1               	movwf	___ftpack@arg+1
  8151  1608  01F2               	clrf	___ftpack@arg+2
  8152  1609  308E               	movlw	142
  8153  160A  00FB               	movwf	??___awtoft
  8154  160B  087B               	movf	??___awtoft,w
  8155  160C  00F3               	movwf	___ftpack@exp
  8156  160D  087D               	movf	___awtoft@sign,w
  8157  160E  00FC               	movwf	??___awtoft+1
  8158  160F  087C               	movf	??___awtoft+1,w
  8159  1610  00F4               	movwf	___ftpack@sign
  8160  1611  120A  158A  2310   	fcall	___ftpack
  8161  1614  0870               	movf	?___ftpack,w
  8162  1615  00F8               	movwf	?___awtoft
  8163  1616  0871               	movf	?___ftpack+1,w
  8164  1617  00F9               	movwf	?___awtoft+1
  8165  1618  0872               	movf	?___ftpack+2,w
  8166  1619  00FA               	movwf	?___awtoft+2
  8167  161A  0008               	return
  8168  161B                     __end_of___awtoft:	
  8169                           
  8170                           	psect	text48
  8171  0B10                     __ptext48:	
  8172 ;; *************** function ___ftpack *****************
  8173 ;; Defined at:
  8174 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\float.c"
  8175 ;; Parameters:    Size  Location     Type
  8176 ;;  arg             3    0[COMMON] unsigned um
  8177 ;;  exp             1    3[COMMON] unsigned char 
  8178 ;;  sign            1    4[COMMON] unsigned char 
  8179 ;; Auto vars:     Size  Location     Type
  8180 ;;		None
  8181 ;; Return value:  Size  Location     Type
  8182 ;;                  3    0[COMMON] float 
  8183 ;; Registers used:
  8184 ;;		wreg, status,2, status,0
  8185 ;; Tracked objects:
  8186 ;;		On entry : 0/0
  8187 ;;		On exit  : 0/0
  8188 ;;		Unchanged: 0/0
  8189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8190 ;;      Params:         5       0       0       0       0
  8191 ;;      Locals:         0       0       0       0       0
  8192 ;;      Temps:          3       0       0       0       0
  8193 ;;      Totals:         8       0       0       0       0
  8194 ;;Total ram usage:        8 bytes
  8195 ;; Hardware stack levels used:    1
  8196 ;; This function calls:
  8197 ;;		Nothing
  8198 ;; This function is called by:
  8199 ;;		___awtoft
  8200 ;;		___ftdiv
  8201 ;;		___ftmul
  8202 ;; This function uses a non-reentrant model
  8203 ;;
  8204                           
  8205                           
  8206                           ;psect for function ___ftpack
  8207  0B10                     ___ftpack:	
  8208                           
  8209                           ;incstack = 0
  8210                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  8211  0B10  0873               	movf	___ftpack@exp,w
  8212  0B11  1903               	btfsc	3,2
  8213  0B12  2B18               	goto	i1l2520
  8214  0B13  0872               	movf	___ftpack@arg+2,w
  8215  0B14  0471               	iorwf	___ftpack@arg+1,w
  8216  0B15  0470               	iorwf	___ftpack@arg,w
  8217  0B16  1D03               	skipz
  8218  0B17  2B2B               	goto	i1l2526
  8219  0B18                     i1l2520:	
  8220  0B18  3000               	movlw	0
  8221  0B19  00F0               	movwf	?___ftpack
  8222  0B1A  3000               	movlw	0
  8223  0B1B  00F1               	movwf	?___ftpack+1
  8224  0B1C  3000               	movlw	0
  8225  0B1D  00F2               	movwf	?___ftpack+2
  8226  0B1E  0008               	return
  8227  0B1F                     i1l2524:	
  8228  0B1F  3001               	movlw	1
  8229  0B20  00F5               	movwf	??___ftpack
  8230  0B21  0875               	movf	??___ftpack,w
  8231  0B22  07F3               	addwf	___ftpack@exp,f
  8232  0B23  3001               	movlw	1
  8233  0B24                     u271_25:	
  8234  0B24  1003               	clrc
  8235  0B25  0CF2               	rrf	___ftpack@arg+2,f
  8236  0B26  0CF1               	rrf	___ftpack@arg+1,f
  8237  0B27  0CF0               	rrf	___ftpack@arg,f
  8238  0B28  3EFF               	addlw	-1
  8239  0B29  1D03               	skipz
  8240  0B2A  2B24               	goto	u271_25
  8241  0B2B                     i1l2526:	
  8242  0B2B  30FE               	movlw	254
  8243  0B2C  0572               	andwf	___ftpack@arg+2,w
  8244  0B2D  1903               	btfsc	3,2
  8245  0B2E  2B46               	goto	i1l793
  8246  0B2F  2B1F               	goto	i1l2524
  8247  0B30                     i1l2528:	
  8248  0B30  3001               	movlw	1
  8249  0B31  00F5               	movwf	??___ftpack
  8250  0B32  0875               	movf	??___ftpack,w
  8251  0B33  07F3               	addwf	___ftpack@exp,f
  8252  0B34  3001               	movlw	1
  8253  0B35  07F0               	addwf	___ftpack@arg,f
  8254  0B36  3000               	movlw	0
  8255  0B37  1803               	skipnc
  8256  0B38  3001               	movlw	1
  8257  0B39  07F1               	addwf	___ftpack@arg+1,f
  8258  0B3A  3000               	movlw	0
  8259  0B3B  1803               	skipnc
  8260  0B3C  3001               	movlw	1
  8261  0B3D  07F2               	addwf	___ftpack@arg+2,f
  8262  0B3E  3001               	movlw	1
  8263  0B3F                     u273_25:	
  8264  0B3F  1003               	clrc
  8265  0B40  0CF2               	rrf	___ftpack@arg+2,f
  8266  0B41  0CF1               	rrf	___ftpack@arg+1,f
  8267  0B42  0CF0               	rrf	___ftpack@arg,f
  8268  0B43  3EFF               	addlw	-1
  8269  0B44  1D03               	skipz
  8270  0B45  2B3F               	goto	u273_25
  8271  0B46                     i1l793:	
  8272  0B46  30FF               	movlw	255
  8273  0B47  0572               	andwf	___ftpack@arg+2,w
  8274  0B48  1903               	btfsc	3,2
  8275  0B49  2B55               	goto	i1l2536
  8276  0B4A  2B30               	goto	i1l2528
  8277  0B4B                     i1l2534:	
  8278  0B4B  3001               	movlw	1
  8279  0B4C  02F3               	subwf	___ftpack@exp,f
  8280  0B4D  3001               	movlw	1
  8281  0B4E                     u275_25:	
  8282  0B4E  1003               	clrc
  8283  0B4F  0DF0               	rlf	___ftpack@arg,f
  8284  0B50  0DF1               	rlf	___ftpack@arg+1,f
  8285  0B51  0DF2               	rlf	___ftpack@arg+2,f
  8286  0B52  3EFF               	addlw	-1
  8287  0B53  1D03               	skipz
  8288  0B54  2B4E               	goto	u275_25
  8289  0B55                     i1l2536:	
  8290  0B55  1BF1               	btfsc	___ftpack@arg+1,7
  8291  0B56  2B5B               	goto	i1l800
  8292  0B57  3002               	movlw	2
  8293  0B58  0273               	subwf	___ftpack@exp,w
  8294  0B59  1803               	skipnc
  8295  0B5A  2B4B               	goto	i1l2534
  8296  0B5B                     i1l800:	
  8297  0B5B  1873               	btfsc	___ftpack@exp,0
  8298  0B5C  2B63               	goto	i1l801
  8299  0B5D  30FF               	movlw	255
  8300  0B5E  05F0               	andwf	___ftpack@arg,f
  8301  0B5F  307F               	movlw	127
  8302  0B60  05F1               	andwf	___ftpack@arg+1,f
  8303  0B61  30FF               	movlw	255
  8304  0B62  05F2               	andwf	___ftpack@arg+2,f
  8305  0B63                     i1l801:	
  8306  0B63  1003               	clrc
  8307  0B64  0CF3               	rrf	___ftpack@exp,f
  8308  0B65  0873               	movf	___ftpack@exp,w
  8309  0B66  00F5               	movwf	??___ftpack
  8310  0B67  01F6               	clrf	??___ftpack+1
  8311  0B68  01F7               	clrf	??___ftpack+2
  8312  0B69  3010               	movlw	16
  8313  0B6A                     u279_25:	
  8314  0B6A  1003               	clrc
  8315  0B6B  0DF5               	rlf	??___ftpack,f
  8316  0B6C  0DF6               	rlf	??___ftpack+1,f
  8317  0B6D  0DF7               	rlf	??___ftpack+2,f
  8318  0B6E  3EFF               	addlw	-1
  8319  0B6F  1D03               	skipz
  8320  0B70  2B6A               	goto	u279_25
  8321  0B71  0875               	movf	??___ftpack,w
  8322  0B72  04F0               	iorwf	___ftpack@arg,f
  8323  0B73  0876               	movf	??___ftpack+1,w
  8324  0B74  04F1               	iorwf	___ftpack@arg+1,f
  8325  0B75  0877               	movf	??___ftpack+2,w
  8326  0B76  04F2               	iorwf	___ftpack@arg+2,f
  8327  0B77  0874               	movf	___ftpack@sign,w
  8328  0B78  1903               	btfsc	3,2
  8329  0B79  0008               	return
  8330  0B7A  17F2               	bsf	___ftpack@arg+2,7
  8331  0B7B  0008               	return
  8332  0B7C                     __end_of___ftpack:	
  8333                           
  8334                           	psect	text49
  8335  0BF2                     __ptext49:	
  8336 ;; *************** function _Fix_Alarm *****************
  8337 ;; Defined at:
  8338 ;;		line 88 in file "main.c"
  8339 ;; Parameters:    Size  Location     Type
  8340 ;;		None
  8341 ;; Auto vars:     Size  Location     Type
  8342 ;;		None
  8343 ;; Return value:  Size  Location     Type
  8344 ;;		None               void
  8345 ;; Registers used:
  8346 ;;		wreg, status,2, status,0
  8347 ;; Tracked objects:
  8348 ;;		On entry : 0/0
  8349 ;;		On exit  : 0/0
  8350 ;;		Unchanged: 0/0
  8351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8352 ;;      Params:         0       0       0       0       0
  8353 ;;      Locals:         0       0       0       0       0
  8354 ;;      Temps:          1       0       0       0       0
  8355 ;;      Totals:         1       0       0       0       0
  8356 ;;Total ram usage:        1 bytes
  8357 ;; Hardware stack levels used:    1
  8358 ;; This function calls:
  8359 ;;		Nothing
  8360 ;; This function is called by:
  8361 ;;		_ISR
  8362 ;; This function uses a non-reentrant model
  8363 ;;
  8364                           
  8365                           
  8366                           ;psect for function _Fix_Alarm
  8367  0BF2                     _Fix_Alarm:	
  8368                           
  8369                           ;main.c: 89: if (minute_alarm == 255) minute_alarm = 59;
  8370                           
  8371                           ;incstack = 0
  8372                           ; Regs used in _Fix_Alarm: [wreg+status,2+status,0]
  8373  0BF2  1683               	bsf	3,5	;RP0=1, select bank1
  8374  0BF3  1303               	bcf	3,6	;RP1=0, select bank1
  8375  0BF4  0A3F               	incf	_minute_alarm^(0+128),w
  8376  0BF5  1D03               	btfss	3,2
  8377  0BF6  2BFC               	goto	i1l3060
  8378  0BF7  303B               	movlw	59
  8379  0BF8  00F0               	movwf	??_Fix_Alarm
  8380  0BF9  0870               	movf	??_Fix_Alarm,w
  8381  0BFA  00BF               	movwf	_minute_alarm^(0+128)
  8382  0BFB  2C00               	goto	i1l3064
  8383  0BFC                     i1l3060:	
  8384                           
  8385                           ;main.c: 90: else if (minute_alarm == 60) minute_alarm = 0;
  8386  0BFC  303C               	movlw	60
  8387  0BFD  063F               	xorwf	_minute_alarm^(0+128),w
  8388  0BFE  1903               	btfsc	3,2
  8389  0BFF  01BF               	clrf	_minute_alarm^(0+128)
  8390  0C00                     i1l3064:	
  8391                           
  8392                           ;main.c: 92: if (hour_alarm < 40 || hour_alarm == 255) {
  8393  0C00  3028               	movlw	40
  8394  0C01  1283               	bcf	3,5	;RP0=0, select bank0
  8395  0C02  1303               	bcf	3,6	;RP1=0, select bank0
  8396  0C03  0258               	subwf	_hour_alarm,w
  8397  0C04  1C03               	skipc
  8398  0C05  2C09               	goto	i1l3068
  8399  0C06  0A58               	incf	_hour_alarm,w
  8400  0C07  1D03               	btfss	3,2
  8401  0C08  2C17               	goto	i1l3076
  8402  0C09                     i1l3068:	
  8403                           
  8404                           ;main.c: 93: if (hour_alarm == 255) hour_alarm = 23;
  8405  0C09  0A58               	incf	_hour_alarm,w
  8406  0C0A  1D03               	btfss	3,2
  8407  0C0B  2C11               	goto	i1l3072
  8408  0C0C  3017               	movlw	23
  8409  0C0D  00F0               	movwf	??_Fix_Alarm
  8410  0C0E  0870               	movf	??_Fix_Alarm,w
  8411  0C0F  00D8               	movwf	_hour_alarm
  8412  0C10  0008               	return
  8413  0C11                     i1l3072:	
  8414                           
  8415                           ;main.c: 94: else if (hour_alarm == 24) hour_alarm = 0;
  8416  0C11  3018               	movlw	24
  8417  0C12  0658               	xorwf	_hour_alarm,w
  8418  0C13  1D03               	btfss	3,2
  8419  0C14  0008               	return
  8420  0C15  01D8               	clrf	_hour_alarm
  8421                           
  8422                           ;main.c: 95: } else if (hour_alarm < 60) {
  8423  0C16  0008               	return
  8424  0C17                     i1l3076:	
  8425  0C17  303C               	movlw	60
  8426  0C18  0258               	subwf	_hour_alarm,w
  8427  0C19  1803               	skipnc
  8428  0C1A  2C43               	goto	i1l3100
  8429                           
  8430                           ;main.c: 96: if (hour_alarm == 40) hour_alarm = 52;
  8431  0C1B  3028               	movlw	40
  8432  0C1C  0658               	xorwf	_hour_alarm,w
  8433  0C1D  1D03               	btfss	3,2
  8434  0C1E  2C24               	goto	i1l3082
  8435  0C1F  3034               	movlw	52
  8436  0C20  00F0               	movwf	??_Fix_Alarm
  8437  0C21  0870               	movf	??_Fix_Alarm,w
  8438  0C22  00D8               	movwf	_hour_alarm
  8439  0C23  0008               	return
  8440  0C24                     i1l3082:	
  8441                           
  8442                           ;main.c: 97: else if (hour_alarm == 51 && RB3 == 0) hour_alarm = 71;
  8443  0C24  3033               	movlw	51
  8444  0C25  0658               	xorwf	_hour_alarm,w
  8445  0C26  1903               	btfsc	3,2
  8446  0C27  1986               	btfsc	6,3	;volatile
  8447  0C28  2C2E               	goto	i1l3088
  8448  0C29  3047               	movlw	71
  8449  0C2A  00F0               	movwf	??_Fix_Alarm
  8450  0C2B  0870               	movf	??_Fix_Alarm,w
  8451  0C2C  00D8               	movwf	_hour_alarm
  8452  0C2D  0008               	return
  8453  0C2E                     i1l3088:	
  8454                           
  8455                           ;main.c: 98: else if (hour_alarm == 52 && RB2 == 0) hour_alarm = 72;
  8456  0C2E  3034               	movlw	52
  8457  0C2F  0658               	xorwf	_hour_alarm,w
  8458  0C30  1903               	btfsc	3,2
  8459  0C31  1906               	btfsc	6,2	;volatile
  8460  0C32  2C38               	goto	i1l3094
  8461  0C33  3048               	movlw	72
  8462  0C34  00F0               	movwf	??_Fix_Alarm
  8463  0C35  0870               	movf	??_Fix_Alarm,w
  8464  0C36  00D8               	movwf	_hour_alarm
  8465  0C37  0008               	return
  8466  0C38                     i1l3094:	
  8467                           
  8468                           ;main.c: 99: else if (hour_alarm == 53 && RB2 == 0) hour_alarm = 41;
  8469  0C38  3035               	movlw	53
  8470  0C39  0658               	xorwf	_hour_alarm,w
  8471  0C3A  1D03               	btfss	3,2
  8472  0C3B  0008               	return
  8473  0C3C  1906               	btfsc	6,2	;volatile
  8474  0C3D  0008               	return
  8475  0C3E  3029               	movlw	41
  8476  0C3F  00F0               	movwf	??_Fix_Alarm
  8477  0C40  0870               	movf	??_Fix_Alarm,w
  8478  0C41  00D8               	movwf	_hour_alarm
  8479                           
  8480                           ;main.c: 100: } else {
  8481  0C42  0008               	return
  8482  0C43                     i1l3100:	
  8483                           
  8484                           ;main.c: 101: if (hour_alarm == 60) hour_alarm = 72;
  8485  0C43  303C               	movlw	60
  8486  0C44  0658               	xorwf	_hour_alarm,w
  8487  0C45  1D03               	btfss	3,2
  8488  0C46  2C4C               	goto	i1l3104
  8489  0C47  3048               	movlw	72
  8490  0C48  00F0               	movwf	??_Fix_Alarm
  8491  0C49  0870               	movf	??_Fix_Alarm,w
  8492  0C4A  00D8               	movwf	_hour_alarm
  8493  0C4B  0008               	return
  8494  0C4C                     i1l3104:	
  8495                           
  8496                           ;main.c: 102: else if (hour_alarm == 71 && RB3 == 0) hour_alarm = 51;
  8497  0C4C  3047               	movlw	71
  8498  0C4D  0658               	xorwf	_hour_alarm,w
  8499  0C4E  1903               	btfsc	3,2
  8500  0C4F  1986               	btfsc	6,3	;volatile
  8501  0C50  2C56               	goto	i1l3110
  8502  0C51  3033               	movlw	51
  8503  0C52  00F0               	movwf	??_Fix_Alarm
  8504  0C53  0870               	movf	??_Fix_Alarm,w
  8505  0C54  00D8               	movwf	_hour_alarm
  8506  0C55  0008               	return
  8507  0C56                     i1l3110:	
  8508                           
  8509                           ;main.c: 103: else if (hour_alarm == 72 && RB2 == 0) hour_alarm = 52;
  8510  0C56  3048               	movlw	72
  8511  0C57  0658               	xorwf	_hour_alarm,w
  8512  0C58  1903               	btfsc	3,2
  8513  0C59  1906               	btfsc	6,2	;volatile
  8514  0C5A  2C60               	goto	i1l3116
  8515  0C5B  3034               	movlw	52
  8516  0C5C  00F0               	movwf	??_Fix_Alarm
  8517  0C5D  0870               	movf	??_Fix_Alarm,w
  8518  0C5E  00D8               	movwf	_hour_alarm
  8519  0C5F  0008               	return
  8520  0C60                     i1l3116:	
  8521                           
  8522                           ;main.c: 104: else if (hour_alarm == 73 && RB2 == 0) hour_alarm = 61;
  8523  0C60  3049               	movlw	73
  8524  0C61  0658               	xorwf	_hour_alarm,w
  8525  0C62  1D03               	btfss	3,2
  8526  0C63  0008               	return
  8527  0C64  1906               	btfsc	6,2	;volatile
  8528  0C65  0008               	return
  8529  0C66  303D               	movlw	61
  8530  0C67  00F0               	movwf	??_Fix_Alarm
  8531  0C68  0870               	movf	??_Fix_Alarm,w
  8532  0C69  00D8               	movwf	_hour_alarm
  8533  0C6A  0008               	return
  8534  0C6B                     __end_of_Fix_Alarm:	
  8535                           
  8536                           	psect	text50
  8537  0CE4                     __ptext50:	
  8538 ;; *************** function _Change_Mode12h *****************
  8539 ;; Defined at:
  8540 ;;		line 175 in file "main.c"
  8541 ;; Parameters:    Size  Location     Type
  8542 ;;		None
  8543 ;; Auto vars:     Size  Location     Type
  8544 ;;		None
  8545 ;; Return value:  Size  Location     Type
  8546 ;;		None               void
  8547 ;; Registers used:
  8548 ;;		wreg, status,2, status,0
  8549 ;; Tracked objects:
  8550 ;;		On entry : 0/0
  8551 ;;		On exit  : 0/0
  8552 ;;		Unchanged: 0/0
  8553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8554 ;;      Params:         0       0       0       0       0
  8555 ;;      Locals:         0       0       0       0       0
  8556 ;;      Temps:          1       0       0       0       0
  8557 ;;      Totals:         1       0       0       0       0
  8558 ;;Total ram usage:        1 bytes
  8559 ;; Hardware stack levels used:    1
  8560 ;; This function calls:
  8561 ;;		Nothing
  8562 ;; This function is called by:
  8563 ;;		_ISR
  8564 ;; This function uses a non-reentrant model
  8565 ;;
  8566                           
  8567                           
  8568                           ;psect for function _Change_Mode12h
  8569  0CE4                     _Change_Mode12h:	
  8570                           
  8571                           ;main.c: 176: if (hour < 40) {
  8572                           
  8573                           ;incstack = 0
  8574                           ; Regs used in _Change_Mode12h: [wreg+status,2+status,0]
  8575  0CE4  3028               	movlw	40
  8576  0CE5  1683               	bsf	3,5	;RP0=1, select bank1
  8577  0CE6  1303               	bcf	3,6	;RP1=0, select bank1
  8578  0CE7  0234               	subwf	_hour^(0+128),w
  8579  0CE8  1803               	skipnc
  8580  0CE9  2D24               	goto	i1l3274
  8581                           
  8582                           ;main.c: 178: if (hour == 0) hour = 52;
  8583  0CEA  0834               	movf	_hour^(0+128),w
  8584  0CEB  1D03               	btfss	3,2
  8585  0CEC  2CEF               	goto	i1l3252
  8586  0CED  3034               	movlw	52
  8587  0CEE  2CFE               	goto	L16
  8588  0CEF                     i1l3252:	
  8589                           
  8590                           ;main.c: 179: else if (hour == 12) hour = 72;
  8591  0CEF  300C               	movlw	12
  8592  0CF0  0634               	xorwf	_hour^(0+128),w
  8593  0CF1  1D03               	btfss	3,2
  8594  0CF2  2CF5               	goto	i1l3256
  8595  0CF3  3048               	movlw	72
  8596  0CF4  2CFE               	goto	L16
  8597  0CF5                     i1l3256:	
  8598                           
  8599                           ;main.c: 180: else if (hour > 12) hour = hour + 48;
  8600  0CF5  300D               	movlw	13
  8601  0CF6  0234               	subwf	_hour^(0+128),w
  8602  0CF7  1C03               	skipc
  8603  0CF8  2CFC               	goto	i1l3260
  8604  0CF9  0834               	movf	_hour^(0+128),w
  8605  0CFA  3E30               	addlw	48
  8606  0CFB  2CFE               	goto	L16
  8607  0CFC                     i1l3260:	
  8608                           
  8609                           ;main.c: 181: else hour = hour + 40;
  8610  0CFC  0834               	movf	_hour^(0+128),w
  8611  0CFD  3E28               	addlw	40
  8612  0CFE                     L16:	
  8613  0CFE  00F0               	movwf	??_Change_Mode12h
  8614  0CFF  0870               	movf	??_Change_Mode12h,w
  8615  0D00  00B4               	movwf	_hour^(0+128)
  8616                           
  8617                           ;main.c: 183: if (hour_alarm == 0) hour_alarm = 52;
  8618  0D01  1283               	bcf	3,5	;RP0=0, select bank0
  8619  0D02  1303               	bcf	3,6	;RP1=0, select bank0
  8620  0D03  0858               	movf	_hour_alarm,w
  8621  0D04  1D03               	btfss	3,2
  8622  0D05  2D0B               	goto	i1l3264
  8623  0D06  3034               	movlw	52
  8624  0D07  00F0               	movwf	??_Change_Mode12h
  8625  0D08  0870               	movf	??_Change_Mode12h,w
  8626  0D09  00D8               	movwf	_hour_alarm
  8627  0D0A  0008               	return
  8628  0D0B                     i1l3264:	
  8629                           
  8630                           ;main.c: 184: else if (hour_alarm == 12) hour_alarm = 72;
  8631  0D0B  300C               	movlw	12
  8632  0D0C  0658               	xorwf	_hour_alarm,w
  8633  0D0D  1D03               	btfss	3,2
  8634  0D0E  2D14               	goto	i1l3268
  8635  0D0F  3048               	movlw	72
  8636  0D10  00F0               	movwf	??_Change_Mode12h
  8637  0D11  0870               	movf	??_Change_Mode12h,w
  8638  0D12  00D8               	movwf	_hour_alarm
  8639  0D13  0008               	return
  8640  0D14                     i1l3268:	
  8641                           
  8642                           ;main.c: 185: else if (hour_alarm > 12) hour_alarm = hour_alarm + 48;
  8643  0D14  300D               	movlw	13
  8644  0D15  0258               	subwf	_hour_alarm,w
  8645  0D16  1C03               	skipc
  8646  0D17  2D1E               	goto	i1l3272
  8647  0D18  0858               	movf	_hour_alarm,w
  8648  0D19  3E30               	addlw	48
  8649  0D1A  00F0               	movwf	??_Change_Mode12h
  8650  0D1B  0870               	movf	??_Change_Mode12h,w
  8651  0D1C  00D8               	movwf	_hour_alarm
  8652  0D1D  0008               	return
  8653  0D1E                     i1l3272:	
  8654                           
  8655                           ;main.c: 186: else hour_alarm = hour_alarm + 40;
  8656  0D1E  0858               	movf	_hour_alarm,w
  8657  0D1F  3E28               	addlw	40
  8658  0D20  00F0               	movwf	??_Change_Mode12h
  8659  0D21  0870               	movf	??_Change_Mode12h,w
  8660  0D22  00D8               	movwf	_hour_alarm
  8661                           
  8662                           ;main.c: 187: } else {
  8663  0D23  0008               	return
  8664  0D24                     i1l3274:	
  8665                           
  8666                           ;main.c: 189: if (hour == 52) hour = 0;
  8667  0D24  3034               	movlw	52
  8668  0D25  1683               	bsf	3,5	;RP0=1, select bank1
  8669  0D26  1303               	bcf	3,6	;RP1=0, select bank1
  8670  0D27  0634               	xorwf	_hour^(0+128),w
  8671  0D28  1D03               	btfss	3,2
  8672  0D29  2D2C               	goto	i1l3278
  8673  0D2A  01B4               	clrf	_hour^(0+128)
  8674  0D2B  2D3E               	goto	i1l248
  8675  0D2C                     i1l3278:	
  8676                           
  8677                           ;main.c: 190: else if (hour == 72) hour = 12;
  8678  0D2C  3048               	movlw	72
  8679  0D2D  0634               	xorwf	_hour^(0+128),w
  8680  0D2E  1D03               	btfss	3,2
  8681  0D2F  2D32               	goto	i1l3282
  8682  0D30  300C               	movlw	12
  8683  0D31  2D3B               	goto	L18
  8684  0D32                     i1l3282:	
  8685                           
  8686                           ;main.c: 191: else if (hour < 60) hour = hour - 40;
  8687  0D32  303C               	movlw	60
  8688  0D33  0234               	subwf	_hour^(0+128),w
  8689  0D34  1803               	skipnc
  8690  0D35  2D39               	goto	i1l3286
  8691  0D36  0834               	movf	_hour^(0+128),w
  8692  0D37  3ED8               	addlw	216
  8693  0D38  2D3B               	goto	L18
  8694  0D39                     i1l3286:	
  8695                           
  8696                           ;main.c: 192: else hour = hour - 48;
  8697  0D39  0834               	movf	_hour^(0+128),w
  8698  0D3A  3ED0               	addlw	208
  8699  0D3B                     L18:	
  8700  0D3B  00F0               	movwf	??_Change_Mode12h
  8701  0D3C  0870               	movf	??_Change_Mode12h,w
  8702  0D3D  00B4               	movwf	_hour^(0+128)
  8703  0D3E                     i1l248:	
  8704                           
  8705                           ;main.c: 194: if (hour_alarm == 52) hour_alarm = 0;
  8706  0D3E  3034               	movlw	52
  8707  0D3F  1283               	bcf	3,5	;RP0=0, select bank0
  8708  0D40  1303               	bcf	3,6	;RP1=0, select bank0
  8709  0D41  0658               	xorwf	_hour_alarm,w
  8710  0D42  1D03               	btfss	3,2
  8711  0D43  2D46               	goto	i1l3290
  8712  0D44  01D8               	clrf	_hour_alarm
  8713  0D45  0008               	return
  8714  0D46                     i1l3290:	
  8715                           
  8716                           ;main.c: 195: else if (hour_alarm == 72) hour_alarm = 12;
  8717  0D46  3048               	movlw	72
  8718  0D47  0658               	xorwf	_hour_alarm,w
  8719  0D48  1D03               	btfss	3,2
  8720  0D49  2D4F               	goto	i1l3294
  8721  0D4A  300C               	movlw	12
  8722  0D4B  00F0               	movwf	??_Change_Mode12h
  8723  0D4C  0870               	movf	??_Change_Mode12h,w
  8724  0D4D  00D8               	movwf	_hour_alarm
  8725  0D4E  0008               	return
  8726  0D4F                     i1l3294:	
  8727                           
  8728                           ;main.c: 196: else if (hour_alarm < 60) hour_alarm = hour_alarm - 40;
  8729  0D4F  303C               	movlw	60
  8730  0D50  0258               	subwf	_hour_alarm,w
  8731  0D51  1803               	skipnc
  8732  0D52  2D59               	goto	i1l3298
  8733  0D53  0858               	movf	_hour_alarm,w
  8734  0D54  3ED8               	addlw	216
  8735  0D55  00F0               	movwf	??_Change_Mode12h
  8736  0D56  0870               	movf	??_Change_Mode12h,w
  8737  0D57  00D8               	movwf	_hour_alarm
  8738  0D58  0008               	return
  8739  0D59                     i1l3298:	
  8740                           
  8741                           ;main.c: 197: else hour_alarm = hour_alarm - 48;
  8742  0D59  0858               	movf	_hour_alarm,w
  8743  0D5A  3ED0               	addlw	208
  8744  0D5B  00F0               	movwf	??_Change_Mode12h
  8745  0D5C  0870               	movf	??_Change_Mode12h,w
  8746  0D5D  00D8               	movwf	_hour_alarm
  8747  0D5E  0008               	return
  8748  0D5F                     __end_of_Change_Mode12h:	
  8749  007E                     btemp	set	126	;btemp
  8750  007E                     wtemp	set	126
  8751  007E                     wtemp0	set	126
  8752  0080                     wtemp1	set	128
  8753  0082                     wtemp2	set	130
  8754  0084                     wtemp3	set	132
  8755  0086                     wtemp4	set	134
  8756  0088                     wtemp5	set	136
  8757  007F                     wtemp6	set	127
  8758  007E                     ttemp	set	126
  8759  007E                     ttemp0	set	126
  8760  0081                     ttemp1	set	129
  8761  0084                     ttemp2	set	132
  8762  0087                     ttemp3	set	135
  8763  007F                     ttemp4	set	127
  8764  007E                     ltemp	set	126
  8765  007E                     ltemp0	set	126
  8766  0082                     ltemp1	set	130
  8767  0086                     ltemp2	set	134
  8768  0080                     ltemp3	set	128


Data Sizes:
    Strings     233
    Constant    0
    Data        0
    BSS         16
    Persistent  8
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     49      58
    BANK1            80     17      32
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 17
		 -> STR_61(CODE[17]), STR_60(CODE[17]), STR_59(CODE[6]), STR_58(CODE[16]), 
		 -> STR_57(CODE[8]), STR_56(CODE[16]), STR_55(CODE[7]), STR_54(CODE[16]), 
		 -> STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), STR_50(CODE[4]), 
		 -> STR_49(CODE[4]), STR_48(CODE[4]), STR_47(CODE[4]), STR_46(CODE[4]), 
		 -> STR_45(CODE[4]), STR_44(CODE[6]), STR_43(CODE[16]), STR_42(CODE[4]), 
		 -> STR_41(CODE[4]), STR_40(CODE[4]), STR_39(CODE[6]), STR_38(CODE[16]), 
		 -> STR_37(CODE[7]), STR_36(CODE[16]), STR_35(CODE[17]), STR_34(CODE[17]), 
		 -> STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), STR_30(CODE[17]), 
		 -> STR_29(CODE[4]), STR_28(CODE[4]), STR_27(CODE[4]), STR_26(CODE[4]), 
		 -> STR_25(CODE[4]), STR_24(CODE[4]), STR_23(CODE[4]), STR_22(CODE[4]), 
		 -> STR_21(CODE[4]), STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[5]), 
		 -> STR_17(CODE[5]), STR_16(CODE[7]), STR_15(CODE[3]), STR_14(CODE[7]), 
		 -> STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[6]), 
		 -> STR_9(CODE[17]), STR_8(CODE[12]), STR_7(CODE[4]), STR_6(CODE[4]), 
		 -> STR_5(CODE[4]), STR_4(CODE[17]), STR_3(CODE[4]), STR_2(CODE[4]), 
		 -> STR_1(CODE[4]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    i1_Read_FullTime->i1_DS1307_Read
    _Write_Time->_DS1307_Write
    _Write_Min->_DS1307_Write
    _Write_Hour->_DS1307_Write
    _DS1307_Write->i1___awdiv
    _Read_Time->i1_DS1307_Read
    i1_DS1307_Read->i1___bmul
    _Read_Tem->___awtoft
    _Read_Tem->___ftmul
    ___ftmul->___ftpack
    ___ftdiv->___ftmul
    ___awtoft->___ftpack

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    _ISR->_Read_Tem
    _Write_Time->_DS1307_Write
    _Write_Min->_DS1307_Write
    _Write_Hour->_DS1307_Write
    _Read_Tem->___fttol
    ___fttol->___ftdiv
    ___ftdiv->___ftmul

Critical Paths under _main in BANK1

    _main->_Display_SetTime
    _main->_Display_Time
    _Read_FullTime->_DS1307_Read
    _DS1307_Read->___bmul
    _Lcd_Init->_Lcd_Cmd
    _Display_Time->_Display
    _Display_SetTime->_Display
    _Display_Alarm->_Display
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port
    _Display->___awdiv
    _Lcd_Write_Char->_Lcd_Port

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   20855
                                             14 BANK1      3     3      0
                      _Display_Alarm
                    _Display_SetTime
                       _Display_Time
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                      _Read_FullTime
                           _i2c_Init
 ---------------------------------------------------------------------------------
 (1) _i2c_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Read_FullTime                                        1     1      0     257
                                             11 BANK1      1     1      0
                        _DS1307_Read
 ---------------------------------------------------------------------------------
 (2) _DS1307_Read                                          7     7      0     257
                                              4 BANK1      7     7      0
                             ___bmul
                           _i2c_Nack
                           _i2c_Read
                        _i2c_Restart
                          _i2c_Start
                           _i2c_Stop
                          _i2c_Write
 ---------------------------------------------------------------------------------
 (3) _i2c_Write                                            1     1      0      22
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (3) _i2c_Stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c_Start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c_Restart                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c_Read                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c_Nack                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     145
                                              0 BANK1      4     3      1
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              3 BANK1      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Display_Time                                         2     2      0    5816
                                             12 BANK1      2     2      0
                            _Display
                       _Display_Hour
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _Display_SetTime                                      2     2      0    5816
                                             12 BANK1      2     2      0
                            _Display
                       _Display_Hour
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) _Display_Hour                                         1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Display_Alarm                                        1     1      0    5148
                                             12 BANK1      1     1      0
                            _Display
                  _Display_HourAlarm
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     3     3      0    1915
                                              5 BANK1      3     3      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1    1705
                                              3 BANK1      7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0     110
                                              1 BANK1      2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Display_HourAlarm                                    1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Display                                              3     3      0    1350
                                              9 BANK1      3     3      0
                     _Lcd_Write_Char
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     668
                                              0 BANK1      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     460
                                              0 BANK1      9     5      4
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 BANK1      4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  5     5      0   11777
                                             44 BANK0      5     5      0
                     _Change_Mode12h
                       _DS1307_Write
                          _Fix_Alarm
                           _Read_Tem
                          _Read_Time
                         _Write_Hour
                          _Write_Min
                         _Write_Time
                    i1_Read_FullTime
 ---------------------------------------------------------------------------------
 (6) i1_Read_FullTime                                      1     1      0     230
                                             11 COMMON     1     1      0
                      i1_DS1307_Read
 ---------------------------------------------------------------------------------
 (6) _Write_Time                                           1     1      0    1235
                                             12 COMMON     1     1      0
                       _DS1307_Write
                           _Fix_Time
 ---------------------------------------------------------------------------------
 (7) _Fix_Time                                             1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _Write_Min                                            1     1      0    1235
                                             12 COMMON     1     1      0
                       _DS1307_Write
 ---------------------------------------------------------------------------------
 (6) _Write_Hour                                           1     1      0    1235
                                             12 COMMON     1     1      0
                       _DS1307_Write
 ---------------------------------------------------------------------------------
 (7) _DS1307_Write                                        11    10      1    1235
                                              9 COMMON     3     2      1
                                              0 BANK0      8     8      0
                          i1___awdiv
                          i1___awmod
                        i1_i2c_Start
                         i1_i2c_Stop
                        i1_i2c_Write
 ---------------------------------------------------------------------------------
 (8) i1___awmod                                            7     3      4     348
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (8) i1___awdiv                                            9     5      4     352
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (6) _Read_Time                                            1     1      0     230
                                             11 COMMON     1     1      0
                      i1_DS1307_Read
 ---------------------------------------------------------------------------------
 (7) i1_DS1307_Read                                        7     7      0     230
                                              4 COMMON     7     7      0
                           i1___bmul
                         i1_i2c_Nack
                         i1_i2c_Read
                      i1_i2c_Restart
                        i1_i2c_Start
                         i1_i2c_Stop
                        i1_i2c_Write
 ---------------------------------------------------------------------------------
 (8) i1_i2c_Write                                          1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) i1_i2c_Stop                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (8) i1_i2c_Start                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (8) i1_i2c_Restart                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (8) i1_i2c_Read                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (8) i1_i2c_Nack                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (8) i1___bmul                                             4     3      1     118
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (6) _Read_Tem                                             4     4      0    6377
                                             40 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     305
                                             26 BANK0     14    10      4
                            ___ftdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    2100
                                              8 COMMON     6     0      6
                                              0 BANK0     10    10      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    2160
                                             10 BANK0     16    10      6
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    1812
                                              8 COMMON     6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    1668
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (6) _Fix_Alarm                                            1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _Change_Mode12h                                       1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Display_Alarm
     _Display
       _Lcd_Write_Char
         _Lcd_Port
       ___awdiv
       ___awmod
     _Display_HourAlarm
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Char
       _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
   _Display_SetTime
     _Display
       _Lcd_Write_Char
         _Lcd_Port
       ___awdiv
       ___awmod
     _Display_Hour
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Char
       _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     ___awmod
   _Display_Time
     _Display
       _Lcd_Write_Char
         _Lcd_Port
       ___awdiv
       ___awmod
     _Display_Hour
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Char
       _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     ___awmod
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _Read_FullTime
     _DS1307_Read
       ___bmul
       _i2c_Nack
       _i2c_Read
       _i2c_Restart
       _i2c_Start
       _i2c_Stop
       _i2c_Write
   _i2c_Init

 _ISR (ROOT)
   _Change_Mode12h
   _DS1307_Write
     i1___awdiv
     i1___awmod
     i1_i2c_Start
     i1_i2c_Stop
     i1_i2c_Write
   _Fix_Alarm
   _Read_Tem
     ___awtoft
       ___ftpack
     ___ftdiv
       ___ftmul (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul
       ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___ftmul (ARG)
           ___ftpack
         ___ftpack (ARG)
   _Read_Time
     i1_DS1307_Read
       i1___bmul
       i1_i2c_Nack
       i1_i2c_Read
       i1_i2c_Restart
       i1_i2c_Start
       i1_i2c_Stop
       i1_i2c_Write
   _Write_Hour
     _DS1307_Write
       i1___awdiv
       i1___awmod
       i1_i2c_Start
       i1_i2c_Stop
       i1_i2c_Write
   _Write_Min
     _DS1307_Write
       i1___awdiv
       i1___awmod
       i1_i2c_Start
       i1_i2c_Stop
       i1_i2c_Write
   _Write_Time
     _DS1307_Write
       i1___awdiv
       i1___awmod
       i1_i2c_Start
       i1_i2c_Stop
       i1_i2c_Write
     _Fix_Time
   i1_Read_FullTime
     i1_DS1307_Read
       i1___bmul
       i1_i2c_Nack
       i1_i2c_Read
       i1_i2c_Restart
       i1_i2c_Start
       i1_i2c_Stop
       i1_i2c_Write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      68       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     31      3A       5       72.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50     11      20       7       40.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      68      12        0.0%


Microchip Technology PIC Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Sun Jun 12 08:17:57 2016

                         pc 0002              ___bmul@product 00A2                 __CFG_CP$OFF 0000  
    __size_of_Read_FullTime 004C                ___awdiv@sign 00A6           ??i1_Read_FullTime 007B  
                        fsr 0004                         l412 0786                         l503 1567  
                       l440 16AB                         l352 03DA                         l441 16B3  
                       l442 16B6                         l443 16BE                         l515 156F  
                       l437 169D                         l509 155F                         l533 15A8  
                       l438 16A0                         l439 16A8                         l527 1593  
                       l539 159B                         _RB1 0031                         _RB2 0032  
                       _RB3 0033                         _RD0 0040                         _RB4 0034  
                       _RB5 0035                         _RD2 0042                         _RD3 0043  
                       _RD4 0044                         _RD5 0045                         _RD6 0046  
                       _RD7 0047                         _PEN 048A                __CFG_CPD$OFF 0000  
                       _ISR 002B                         _SEN 0488                         _PSA 040B  
                       _SMP 04A7                         _day 00B3                         _set 00BB  
                       fsr0 0004                ___awmod@sign 00A6                __CFG_IESO$ON 0000  
              __CFG_FOSC$HS 0000                _DS1307_Write 09A6               ??_i2c_Restart 00A0  
              __CFG_LVP$OFF 0000                        ?_ISR 0070                ___ftdiv@cntr 0034  
              ___ftdiv@sign 0039                        l2600 08C1                        l3320 0634  
                      l3400 044F                        l2504 080E                        l3410 0472  
                      l3402 0456                        l2612 08CE                        l2604 08C8  
                      l3332 0662                        l3324 063C                        l3500 0328  
                      l3412 0479                        l3404 045D                        l2508 0814  
                      l2614 08DC                        l2622 08F5                        l3350 06A2  
                      l3326 0647                        l3510 037A                        l3502 0358  
                      l3406 0464                        l3360 06C1                        l3344 068E  
                      l3504 035D                        l3408 046B                        l3416 0480  
                      l2562 07BA                        l2626 08FD                        l2618 08EA  
                      l3434 0234                        l3418 04B0                        l3370 03EC  
                      l2580 07E6                        l2572 07C2                        l2556 07AF  
                      l3348 069B                        l3516 0397                        l3460 029B  
                      l3524 03C0                        l3444 025A                        l2574 07D0  
                      l3358 06B7                        l3470 02C9                        l3454 027E  
                      l3390 042F                        l2584 07F1                        l3448 0269  
                      l2842 15E6                        l3490 030C                        l3482 02F0  
                      l3474 02D4                        l3394 0437                        l2588 07F9  
                      l3492 0313                        l3484 02F7                        l3476 02D9  
                      l2854 164E                        l2846 15F0                        l3494 031A  
                      l3486 02FE                        l3398 0448                        l3830 0791  
                      l2880 092B                        l3496 0321                        l3488 0305  
                      l3816 0767                        l2858 165B                        l3834 079D  
                      l3826 0788                        l2868 1620                        l3882 0499  
                      l3884 0341                        STR_2 05D8                        STR_3 05DC  
                      STR_4 0571                        STR_5 0518                        STR_6 05D8  
                      STR_7 05DC                        STR_8 0510                        STR_9 051C  
                      u2605 1741                        u5107 0760                        u5117 076D  
                      u5127 0A5F                        u3455 0995                        u5137 0A6D  
                      u3555 0910                        u5147 0A7E                        u2845 07C5  
                      u5157 15D2                        u5167 1753                        u3575 0939  
                      _RBIF 0058                        u5177 1767                        u2865 07D1  
                      u2945 08D1                        u2875 07DD                        _RCEN 048B  
                      u2885 07E7                        u2965 08E2                        u2975 08EB  
                      _TMR0 0001                        _RSEN 0489                __CFG_WRT$OFF 0000  
             __CFG_FCMEN$ON 0000               i1_DS1307_Read 176D           ?_Lcd_Write_String 0070  
                      _date 00B2                        _main 06D2                ___ftpack@arg 0070  
                      _mode 0059                        _hour 00B4                ___ftpack@exp 0073  
                      _year 00BD                        _quit 00B9                        btemp 007E  
             __CFG_BOREN$ON 0000            i1DS1307_Read@add 0078            ??_Change_Mode12h 0070  
                      ltemp 007E                        start 0012                        ttemp 007E  
        ??_Lcd_Write_String 00A5                        wtemp 007E             __end_of_Lcd_Cmd 15DB  
         ___bmul@multiplier 00A3               __CFG_MCLRE$ON 0000                ___ftmul@cntr 0028  
           __end_of_Display 172C                ___ftmul@sign 0029                       ??_ISR 004C  
              ___fttol@exp1 0047                ___fttol@lval 0043                       ?_main 0070  
            i1___awdiv@sign 0076                       _ACKEN 048C                       _ACKDT 048D  
           __end_of___awdiv 07FE                       STR_10 05BF                       STR_11 0518  
                     STR_20 05D8                       STR_12 05D8                       STR_21 05DC  
                     STR_13 05DC                       STR_22 05E4                       STR_14 05AB  
                     STR_30 054F                       STR_15 0519                       STR_23 05E0  
                     STR_31 050B                       STR_40 0518                       STR_16 0515  
                     STR_24 05D0                       STR_32 0560                       STR_33 050B  
                     STR_41 05D8                       STR_25 05E8                       STR_17 05CB  
             __CFG_WDTE$OFF 0000                       STR_18 0517                       STR_50 05D4  
                     STR_42 05DC                       STR_26 05F0                       STR_34 052D  
                     STR_19 0518                       STR_35 050B                       STR_43 0593  
                     STR_51 05EC                       STR_27 05D4                       STR_52 0518  
                     STR_28 05EC                       STR_44 05C5                       STR_36 0593  
                     STR_60 053E             __end_of___awmod 0902                       STR_53 0518  
                     STR_29 0518                       STR_37 05AB                       STR_45 05E4  
                     STR_61 0582                       STR_54 0593                       STR_38 0593  
                     STR_46 05E0                       STR_39 05BF                       STR_47 05D0  
                     STR_55 05B2                       STR_56 0593                       STR_48 05E8  
                     STR_49 05F0                       STR_57 05A3                       STR_58 0593  
                     STR_59 05B9             __end_of___ftdiv 0F2F                       _ANSEL 0188  
           __end_of___ftmul 1000             ___awdiv@divisor 00A0             __end_of___fttol 0E77  
                     i1l131 0DB6                       i1l125 0DA3                       i1l503 154F  
                     i1l248 0D3E                       i1l408 0201                       i1l515 1557  
                     i1l189 0B7F                       i1l509 1547                       i1l533 158B  
                     i1l527 1578                       i1l800 0B5B                       i1l801 0B63  
                     i1l539 1580                       i1l793 0B46                       i1l884 0E5D  
           ___awdiv@counter 00A5                       _PORTD 0008     __size_of_Lcd_Set_Cursor 0052  
                     _TRISB 0086                       _TRISD 0088                       _SSPIF 0063  
            i1___awmod@sign 0076                 ?i1_i2c_Nack 0070                 ?i1_i2c_Read 0070  
        _hour_alarm_display 00B5                       _alarm 00B1               ___awtoft@sign 007D  
               ?i1_i2c_Stop 0070                       _count 0057  __size_of_Display_HourAlarm 0027  
                     _month 00B8               ___ftpack@sign 0074               _Read_FullTime 0869  
          __end_ofi1___bmul 15BD                       pclath 000A              ?i1_DS1307_Read 0070  
                     ltemp0 007E                       ltemp1 0082                       ltemp2 0086  
                     ltemp3 0080           i1DS1307_Read@data 007A           i1DS1307_Read@temp 0079  
                     ttemp0 007E                       ttemp1 0081                       ttemp2 0084  
                     ttemp3 0087         __end_of_i2c_Restart 1564                       ttemp4 007F  
                     status 0003                       wtemp0 007E                       wtemp1 0080  
                     wtemp2 0082                       wtemp3 0084                       wtemp4 0086  
                     wtemp5 0088                       wtemp6 007F          __size_ofi1___awdiv 0059  
        __size_ofi1___awmod 004B            __end_of_Lcd_Init 0AB1            __end_of_Lcd_Port 16C2  
           __initialization 0015            __end_of_Fix_Time 0DE9                __end_of_main 07A3  
          __end_of_i2c_Nack 1598            __end_of_i2c_Init 080A            __end_of_i2c_Read 15A1  
          __end_of_i2c_Stop 1574            __end_of_Read_Tem 0BF2                      ??_main 00AE  
             ___fttol@sign1 0042          __size_of_Fix_Alarm 0079        __end_of_Display_Hour 15FA  
      __end_of_Display_Time 0505                      _ADCON0 001F                      _ADCON1 009F  
            ?_Read_FullTime 0070                      _ADRESH 001E                      _ADRESL 009E  
          ___awdiv@dividend 00A2            __end_of___awtoft 161B            __end_of___ftpack 0B7C  
                    _ANSELH 0189          __size_of_i2c_Start 0008                      i1l3000 0E03  
                    i1l3100 0C43                      i1l3020 0E45                      i1l3110 0C56  
                    i1l3104 0C4C                      i1l3032 0E6E                      i1l3200 0C93  
                    i1l3026 0E52                      i1l3018 0E35                      i1l3130 0ACA  
                    i1l3116 0C60                      i1l3060 0BFC                      i1l3028 0E60  
                    i1l3140 0AF5                      i1l3212 0CAB                      i1l3134 0AD8  
                    i1l3222 0CBD                      i1l3206 0C9F                      i1l3072 0C11  
                    i1l3064 0C00                      i1l2520 0B18                      i1l3144 0B03  
                    i1l3216 0CB3                      i1l3160 1672                      i1l3082 0C24  
                    i1l3138 0ADF                      i1l3234 0CD9                      i1l3260 0CFC  
                    i1l3252 0CEF                      i1l3076 0C17                      i1l3068 0C09  
                    i1l2524 0B1F                      i1l2700 0A4E                      i1l3228 0CC9  
                    i1l3180 0C74                      i1l3172 1682                      i1l3164 1676  
                    i1l3094 0C38                      i1l2534 0B4B                      i1l2526 0B2B  
                    i1l3272 0D1E                      i1l3264 0D0B                      i1l3256 0CF5  
                    i1l3088 0C2E                      i1l2536 0B55                      i1l2528 0B30  
                    i1l2712 17BF                      i1l3184 0C79                      i1l3168 167E  
                    i1l3600 0099                      i1l3290 0D46                      i1l3282 0D32  
                    i1l3274 0D24                      i1l2730 17E8                      i1l3194 0C89  
                    i1l3268 0D14                      i1l2652 15B4                      i1l2724 17CC  
                    i1l2716 17C6                      i1l3188 0C7F                      i1l2804 0DD7  
                    i1l3700 01A2                      i1l3294 0D4F                      i1l3286 0D39  
                    i1l3278 0D2C                      i1l2726 17DA                      i1l2734 17F3  
                    i1l2750 0D6F                      i1l3702 01A5                      i1l3710 01C2  
                    i1l3606 00AB                      i1l3614 00C2                      i1l2648 15AE  
                    i1l3720 01D2                      i1l3632 00E5                      i1l3298 0D59  
                    i1l2914 0EA5                      i1l2674 0A0F                      i1l2738 17FB  
                    i1l2762 0D85                      i1l2754 0D77                      i1l2746 0D69  
                    i1l3722 01DC                      i1l3714 01C9                      i1l3706 01A8  
                    i1l3618 00CC                      i1l2908 0E8F                      i1l2692 0A3B  
                    i1l2684 0A17                      i1l2668 0A04                      i1l2772 0D97  
                    i1l3740 01FE                      i1l3716 01CD                      i1l3708 01BC  
                    i1l3724 01E1                      i1l3652 0118                      i1l3644 00FC  
                    i1l3636 00EE                      i1l3580 0061                      i1l2950 0F47  
                    i1l2686 0A25                      i1l2790 0DC1                      i1l2782 0DAE  
                    i1l2766 0D8B                      i1l2758 0D7D                      i1l3670 015D  
                    i1l3654 0121                      i1l3662 013C                      i1l3726 01E2  
                    i1l2936 0F09                      i1l2928 0EEA                      i1l2696 0A46  
                    i1l3672 0163                      i1l3656 012A                      i1l3648 010A  
                    i1l3664 0150                      i1l3680 017A                      i1l3576 0056  
                    i1l3584 006A                      i1l2794 0DC8                      i1l2786 0DB9  
                    i1l2778 0DA6                      i1l3658 0133                      i1l3666 0156  
                    i1l3594 008B          __size_of_i2c_Write 000B                      i1l2980 0FC4  
                    i1l2972 0FAC                      i1l2956 0F5D                      i1l3692 0190  
                    i1l3676 016B                      i1l2798 0DD0                      i1l3678 0175  
                    i1l2984 0FD4                      i1l2968 0F9C                      i1l3696 019A  
                    i1l3688 0188                      i1l2898 1604                      i1l3698 019F  
                    u311_25 0A1A                      u313_25 0A26                      u321_25 17CF  
                    u314_25 0A32                      u315_25 0A3C                      u323_25 17E0  
                    u324_25 17E9                      u271_25 0B24                      u273_25 0B3F  
                    u361_25 0EB7                      u362_25 0EC9                      u370_25 0F7B  
                    u346_25 09D4                      u275_25 0B4E                      u363_25 0EEB  
                    u364_25 0EFC                      u365_25 0F0A                      u373_25 0FAD  
                    u374_25 0FB5                      u382_25 0E0A                      u279_25 0B6A  
                    u391_25 17A6                      u369_25 0F69                      u385_25 0E36  
                    u378_25 0FD5                      u379_25 0FDD                      u388_25 0E54  
                 ??_Lcd_Cmd 00A1     __size_of_Lcd_Write_Char 0041                      _SSPADD 0093  
                    _TRISA1 0429                      _SSPCON 0014                      _SSPBUF 0013  
                 ??_Display 00A9          __size_of_Read_Time 005F              __CFG_PWRTE$OFF 0000  
                    ___bmul 080A                   ??___awdiv 00A4                   ??___awmod 00A4  
                 ??___ftdiv 0030         __size_ofi1_i2c_Nack 0009         __size_ofi1_i2c_Read 0009  
                 ??___ftmul 0020                   ??___fttol 003E         __size_ofi1_i2c_Stop 0008  
              ?i1_i2c_Start 0070                ?i1_i2c_Write 0070            ___awdiv@quotient 00A7  
                    _minute 00B7                      _second 00BA             ___awmod@divisor 00A0  
           ___awmod@counter 00A5       ___ftmul@f3_as_product 0025           __end_ofi1___awdiv 0A53  
         __end_ofi1___awmod 1800               i2c_Write@data 00A0                      saved_w 007E  
           _Display_SetTime 020E                 _i2c_Restart 155C             ??i1_DS1307_Read 0074  
           Lcd_Set_Cursor@a 00A6             Lcd_Set_Cursor@b 00A3             Lcd_Set_Cursor@y 00A8  
           Lcd_Set_Cursor@z 00A7     __end_of__initialization 0027          __size_of_Write_Min 002C  
           i1_Read_FullTime 081D                  ___ftdiv@f1 002D                  ___ftdiv@f2 002A  
                ___ftdiv@f3 0035                  ___awtoft@c 0078         ___bmul@multiplicand 00A0  
         __end_of_Fix_Alarm 0C6B                  ___ftmul@f1 0078                  ___ftmul@f2 007B  
                ___fttol@f1 003A              __pcstackCOMMON 0070                  _Write_Hour 0C6B  
                _Write_Time 16C2           __end_of_i2c_Start 156C           __end_of_i2c_Write 15AC  
                 ?i1___bmul 0070           __end_of_Read_Time 0B10              _Lcd_Set_Cursor 0902  
            _OPTION_REGbits 0081             ??_Read_FullTime 00AB       __end_ofi1_i2c_Restart 154C  
                 ?_Lcd_Init 0070                   ?_Lcd_Port 0070            i1___bmul@product 0072  
                 ?_Fix_Time 0070                   ?_i2c_Nack 0070               ??_DS1307_Read 00A4  
                 ?_i2c_Init 0070                   ?_i2c_Read 0070                  __pbssBANK0 0057  
                __pbssBANK1 00B1                   ?_i2c_Stop 0070                   ?_Read_Tem 0070  
     __end_of_Display_Alarm 06D2                  __pmaintext 06D2                     ?___bmul 00A0  
                __pintentry 0004   __size_of_Lcd_Write_String 0026                   ?___awtoft 0078  
                 ?___ftpack 0070      __end_of_Lcd_Set_Cursor 0954     __end_of_Display_SetTime 03DB  
                ??i1___bmul 0071       __size_of_Display_Hour 001F       __size_of_Display_Time 012A  
         __end_of_Write_Min 1694          i1___awdiv@dividend 0072                ??i1_i2c_Nack 0070  
                ??_Lcd_Init 00A3                ??i1_i2c_Read 0070                  ??_Lcd_Port 00A0  
              ??i1_i2c_Stop 0070             i1i2c_Write@data 0070                  ??_Fix_Time 0070  
   __end_ofi1_Read_FullTime 0869                  __stringtab 0505                  ??_i2c_Nack 00A0  
                ??_i2c_Init 00A0                  ??_i2c_Read 00A0                  ??_i2c_Stop 00A0  
            _Lcd_Write_Char 172C                     _Lcd_Cmd 15BD                  ??_Read_Tem 0048  
                   _Display 16F6         __end_of_DS1307_Read 09A6          i1___awdiv@quotient 0077  
              _Display_Hour 15DB                _Display_Time 03DB             __size_of___bmul 0013  
                   ___awdiv 07A3                     ___awmod 08B5                 ?_Write_Hour 0070  
                   ___ftdiv 0E77                 ?_Write_Time 0070                     ___ftmul 0F2F  
                   ___fttol 0DE9          __end_ofi1_i2c_Nack 157D          __end_ofi1_i2c_Read 1586  
        __end_ofi1_i2c_Stop 155C                  ??___awtoft 007B                  ??___ftpack 0075  
                 _ANSELbits 0188             ?_Lcd_Set_Cursor 00A3                     __ptext1 0800  
                   __ptext2 0869                     __ptext3 0954                     __ptext4 15A1  
                   __ptext5 156C                     __ptext6 1564                     __ptext7 155C  
                   __ptext8 1598                     __ptext9 158F        __size_ofi1_i2c_Start 0008  
      __size_ofi1_i2c_Write 0009                __size_of_ISR 01E3            ___awmod@dividend 00A2  
                _hour_alarm 0058         i1___bmul@multiplier 0073                     _voltage 0054  
    __end_of_Lcd_Write_Char 176D        end_of_initialization 0027                   Lcd_Port@a 00A0  
   __size_of_Change_Mode12h 007B            ?_Display_SetTime 0070                ?_i2c_Restart 0070  
                 i1___awdiv 09FA                   i1___awmod 17B5            ?i1_Read_FullTime 0070  
           ?_Lcd_Write_Char 0070           Lcd_Write_String@a 00A7           Lcd_Write_String@i 00A5  
       __size_of_Write_Hour 0079         __size_of_Write_Time 0034                 _DS1307_Read 0954  
               ___ftdiv@exp 0038             DS1307_Read@data 00AA             DS1307_Read@temp 00A9  
               ___ftmul@exp 0024              __end_of___bmul 081D                   _Fix_Alarm 0BF2  
          _Lcd_Write_String 161B                   _i2c_Start 1564           __size_ofi1___bmul 0011  
                 _i2c_Write 15A1         start_initialization 0015               ?_DS1307_Write 0079  
               __end_of_ISR 020E                  ?i1___awdiv 0070                  ?i1___awmod 0070  
                 _Read_Time 0AB1           __size_of_Lcd_Init 005E           __size_of_Lcd_Port 002E  
     __end_ofi1_DS1307_Read 17B5           __size_of_Fix_Time 008A           __size_of_i2c_Nack 0009  
         __size_of_i2c_Init 000A           __size_of_i2c_Read 0009           __size_of_i2c_Stop 0008  
           DS1307_Write@add 007A             DS1307_Write@dat 0079           __size_of_Read_Tem 0076  
           DS1307_Write@tmp 007B                    ??___bmul 00A1                  ?_Fix_Alarm 0070  
        i1___awmod@dividend 0072             Lcd_Write_Char@a 00A4             Lcd_Write_Char@y 00A3  
         __size_of___awtoft 0021           __size_of___ftpack 006C                  ?_i2c_Start 0070  
            ??_DS1307_Write 0020                  ?_i2c_Write 0070                   ___latbits 0002  
             __pcstackBANK0 0020               __pcstackBANK1 00A0                  ?_Read_Time 0070  
                 _Write_Min 1668       __end_of_Read_FullTime 08B5                    ?_Lcd_Cmd 0070  
                  ?_Display 0070                   __pnvBANK0 0051                   __pnvBANK1 00BE  
                 _day_alarm 00BE            ??_Lcd_Set_Cursor 00A4                ??_Write_Hour 007C  
                  ?___awdiv 00A0                ??_Write_Time 007C                    ?___awmod 00A0  
                  ?___ftdiv 002A      __size_ofi1_i2c_Restart 0008                    ?___ftmul 0078  
                  ?___fttol 003A              _Change_Mode12h 0CE4           i1___awdiv@divisor 0070  
         i1___awdiv@counter 0075                   __pstrings 0505                 ??i1___awdiv 0074  
               ??i1___awmod 0074                  ?_Write_Min 0070                    _ADCvalue 0051  
    __size_of_Display_Alarm 00DE        __size_of_i2c_Restart 0008          __end_of_Write_Hour 0CE4  
        __end_of_Write_Time 16F6           interrupt_function 0004                    _IOCBbits 0096  
              _hour_display 00B6       i1___bmul@multiplicand 0070                    Lcd_Cmd@a 00A2  
    __end_of_Change_Mode12h 0D5F               ??i1_i2c_Start 0070               ??i1_i2c_Write 0070  
               ??_Fix_Alarm 0070                    i1___bmul 15AC                  _ADCON0bits 001F  
               __stringbase 050A                 ??_i2c_Start 00A0                    _WPUBbits 0095  
               ??_i2c_Write 00A0              DS1307_Read@add 00A8            ??_Lcd_Write_Char 00A1  
                  _Lcd_Init 0A53                 ??_Read_Time 007B                    _Lcd_Port 1694  
             i1_i2c_Restart 1544                    _Fix_Time 0D5F                    _i2c_Nack 158F  
                  _i2c_Init 0800                    _i2c_Read 1598                ?_DS1307_Read 0070  
                  _i2c_Stop 156C    __end_of_Lcd_Write_String 1641                _minute_alarm 00BF  
                  _Read_Tem 0B7C            __size_of_Lcd_Cmd 001E            __size_of_Display 0036  
      __end_of_DS1307_Write 09FA               _Display_Alarm 05F4             ?_Change_Mode12h 0070  
         i1___awmod@divisor 0070           i1___awmod@counter 0075            __size_of___awdiv 005B  
          __size_of___awmod 004D            __size_of___ftdiv 00B8            __size_of___ftmul 00D1  
          __size_of___fttol 008E                    ___awtoft 15FA                    ___ftpack 0B10  
        __end_of__stringtab 050B         __end_ofi1_i2c_Start 1554         __end_ofi1_i2c_Write 158F  
            ?i1_i2c_Restart 0070                 ??_Write_Min 007C                    __ptext10 080A  
                  __ptext11 0A53                    __ptext20 16F6                    __ptext12 03DB  
                  __ptext21 08B5                    __ptext13 020E                    __ptext30 0C6B  
                  __ptext22 07A3                    __ptext14 15DB                    __ptext31 09A6  
                  __ptext23 172C                    __ptext15 05F4                    __ptext40 157D  
                  __ptext32 17B5                    __ptext24 1694                    __ptext16 161B  
                  __ptext41 1574                    __ptext33 09FA                    __ptext25 002B  
                  __ptext17 0902                    __ptext50 0CE4                    __ptext42 15AC  
                  __ptext34 0AB1                    __ptext26 081D                    __ptext18 15BD  
                  __ptext43 0B7C                    __ptext35 176D                    __ptext27 16C2  
                  __ptext19 1641                    __ptext44 0DE9                    __ptext36 1586  
                  __ptext28 0D5F                    __ptext45 0F2F                    __ptext37 1554  
                  __ptext29 1668                    __ptext46 0E77                    __ptext38 154C  
                  __ptext47 15FA                    __ptext39 1544                    __ptext48 0B10  
                  __ptext49 0BF2           __CFG_BOR4V$BOR40V 0000    __size_of_Display_SetTime 01CD  
             __size_of_main 00D1    __size_ofi1_Read_FullTime 004C              ?_Display_Alarm 0070  
                _INTCONbits 000B          Lcd_Write_Char@temp 00A2                    intlevel1 0000  
         _Display_HourAlarm 1641          ?_Display_HourAlarm 0070                   stringcode 0505  
             ?_Display_Hour 0070               ?_Display_Time 0070         ??_Display_HourAlarm 00A0  
               i1_i2c_Start 154C                 i1_i2c_Write 1586          Lcd_Set_Cursor@temp 00A9  
    __size_ofi1_DS1307_Read 0048                 _temperature 00BC             ??i1_i2c_Restart 0070  
                  stringdir 0505                    stringtab 0505                  i1_i2c_Nack 1574  
                i1_i2c_Read 157D                  i1_i2c_Stop 1554   __end_of_Display_HourAlarm 1668  
                Display@One 00AB       __size_of_DS1307_Write 0054        __size_of_DS1307_Read 0052  
         ??_Display_SetTime 00AC             ??_Display_Alarm 00AC              ??_Display_Hour 00A0  
            ??_Display_Time 00AC  
